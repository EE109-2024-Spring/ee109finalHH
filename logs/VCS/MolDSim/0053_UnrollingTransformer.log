    Unrolling x259 = OpenCSVFile(Const("/home/hhollen/ee109finalHH/mol_arr100.csv"),false)
    x462 = OpenCSVFile(Const("/home/hhollen/ee109finalHH/mol_arr100.csv"),false)
    [x259] 0: x462
    Unrolling x260 = ReadTokens(x259,Const(","))
    x463 = ReadTokens(x462,Const(","))
    [x260] 0: x463
    Unrolling x261 = CloseCSVFile(x259)
    x464 = CloseCSVFile(x462)
    [x261] 0: x464
    Unrolling x264 = ArrayMap(x260,Block((x260,b5) => x262),Block((x262) => x263))
      Unrolling x262 = ArrayApply(x260,b5)
      x465 = ArrayApply(x463,b5)
      [x262] 0: x465
      Unrolling x263 = TextToFix(x262,TRUE,_10,_22)
      x466 = TextToFix(x465,TRUE,_10,_22)
      [x263] 0: x466
    x467 = ArrayMap(x463,Block((x463,b5) => x465),Block((x465) => x466))
    [x264] 0: x467
    Unrolling x266 = SetMem(x265,x264)
    x469 = SetMem(x468,x467)
    [x266] 0: x469
      Duplicating x268 = SRAMNew(List(Const(100), Const(3)),SRAM2[Fix[TRUE,_10,_22]])
        #0: Memory(List(Dims {0}: Cyclic: N=10, B=1, alpha=<1>, P=<10> (176 solutions, 46 checks), Dims {1}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0, 0),None)
        x471 = SRAMNew(List(Const(100), Const(3)),SRAM2[Fix[TRUE,_10,_22]])
        #1: Memory(List(Dims {0}: Cyclic: N=2, B=1, alpha=<1>, P=<2> (72 solutions, 1 checks), Dims {1}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0, 0),None)
        x472 = SRAMNew(List(Const(100), Const(3)),SRAM2[Fix[TRUE,_10,_22]])
        #2: Memory(List(Dims {0}: Cyclic: N=10, B=1, alpha=<1>, P=<10> (176 solutions, 46 checks), Dims {1}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0, 0),None)
        x473 = SRAMNew(List(Const(100), Const(3)),SRAM2[Fix[TRUE,_10,_22]])
        Registering duplicates for memory: x268
        (x268,0) -> x471
        (x268,1) -> x472
        (x268,2) -> x473
      Unrolling x320 = UnitPipe(Set(),Block(Const(())),None)
      x320 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes UnitUnroller(Accel,false)
        Duplicating x270 = FIFONew(Const(16))
          #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),None)
          x475 = FIFONew(Const(16))
          Registering duplicates for memory: x270
          (x270,0) -> x475
        Unrolling x272 = CounterNew(Const(0),Const(100),Const(1),Const(1))
        x477 = CounterNew(Const(0),Const(100),Const(1),Const(1))
        [x272] 0: x477
        Unrolling x273 = CounterChainNew(List(x272))
        x478 = CounterChainNew(List(x477))
        [x273] 0: x478
        Unrolling x292 = OpForeach(Set(),x273,Block(Const(())),List(b247),None)
        x292 = OpForeach(Set(),x273,Block(Const(())),List(b247),None) [duplicate 1/1] in lanes UnitUnroller(DenseTransfer (x320),false)
        Unrolling foreach x292
          Unrolling x274 = FixMul(b247,Const(3))
          x481 = FixMul(b479,Const(3))
          [x274] 0: x481
          Unrolling x275 = FixDivSRA(x274,Const(4))
          x482 = FixDivSRA(x481,Const(4))
          [x275] 0: x482
          Unrolling x276 = FixSLA(x275,Const(4))
          x483 = FixSLA(x482,Const(4))
          [x276] 0: x483
          Unrolling x277 = FixSLA(x276,Const(2))
          x484 = FixSLA(x483,Const(2))
          [x277] 0: x484
          Unrolling x278 = FixSub(x274,x276)
          x485 = FixSub(x481,x483)
          [x278] 0: x485
          Unrolling x279 = FixAdd(x278,Const(3))
          x486 = FixAdd(x485,Const(3))
          [x279] 0: x486
          Unrolling x280 = FixAdd(x278,Const(18))
          x487 = FixAdd(x485,Const(18))
          [x280] 0: x487
          Unrolling x281 = FixDivSRA(x280,Const(4))
          x488 = FixDivSRA(x487,Const(4))
          [x281] 0: x488
          Unrolling x282 = FixSLA(x281,Const(4))
          x489 = FixSLA(x488,Const(4))
          [x282] 0: x489
          Unrolling x283 = FixSLA(x282,Const(2))
          x490 = FixSLA(x489,Const(2))
          [x283] 0: x490
          Unrolling x284 = FixToFix(x277,TRUE,_64,_0)
          x491 = FixToFix(x484,TRUE,_64,_0)
          [x284] 0: x491
          Unrolling x285 = DRAMAddress(x265)
          x492 = DRAMAddress(x468)
          [x285] 0: x492
          Unrolling x286 = FixAdd(x284,x285)
          x493 = FixAdd(x491,x492)
          [x286] 0: x493
          Unrolling x287 = SimpleStruct(ArrayBuffer((offset,x286), (size,x283), (isLoad,Const(true))))
          x494 = SimpleStruct(ArrayBuffer((offset,x493), (size,x490), (isLoad,Const(true))))
          [x287] 0: x494
          Unrolling x288 = DRAMIsAlloc(x265)
          x495 = DRAMIsAlloc(x468)
          [x288] 0: x495
          Access: x289
          Memory: x269
          Iterators between x289 and x269: b247
          Unroll: Map()
          uids:List(List(0))
          Unrolling x289 = StreamOutWrite(x269,x287,Set(x288))
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x496 = StreamOutBankedWrite(x474,ArrayBuffer(x494),ArrayBuffer(Set(x495, b480)))
          Unrolling x290 = SimpleStruct(ArrayBuffer((size,x282), (start,x278), (end,x279)))
          x497 = SimpleStruct(ArrayBuffer((size,x489), (start,x485), (end,x486)))
          [x290] 0: x497
          Access: x291
          Memory: x270
          Iterators between x291 and x270: b247
          Unroll: Map()
          uids:List(List(0))
          Unrolling x291 = FIFOEnq(x270,x290,Set(Const(true)))
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x498 = FIFOBankedEnq(x475,ArrayBuffer(x497),ArrayBuffer(Set(Const(true), b480)))
        Created foreach x499 = UnrolledForeach(Set(),x478,Block(Const(())),List(List(b479)),List(List(b480)),None)
        [x292] 0: Const(())
        Unrolling x293 = FringeDenseLoad(x265,x269,x271)
        x500 = FringeDenseLoad(x468,x474,x476)
        [x293] 0: x500
        Unrolling x294 = CounterNew(Const(0),Const(100),Const(1),Const(1))
        x501 = CounterNew(Const(0),Const(100),Const(1),Const(1))
        [x294] 0: x501
        Unrolling x295 = CounterChainNew(List(x294))
        x502 = CounterChainNew(List(x501))
        [x295] 0: x502
        Unrolling x319 = OpForeach(Set(),x295,Block(Const(())),List(b251),None)
        x319 = OpForeach(Set(),x295,Block(Const(())),List(b251),None) [duplicate 1/1] in lanes UnitUnroller(DenseTransfer (x320),false)
        Unrolling foreach x319
          Duplicating x296 = RegNew(Const(0))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
            x505 = RegNew(Const(0))
            Registering duplicates for memory: x296
            (x296,0) -> x505
          Duplicating x297 = RegNew(Const(0))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
            x506 = RegNew(Const(0))
            Registering duplicates for memory: x297
            (x297,0) -> x506
          Duplicating x298 = RegNew(Const(0))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
            x507 = RegNew(Const(0))
            Registering duplicates for memory: x298
            (x298,0) -> x507
          Unrolling x306 = UnitPipe(Set(),Block(Const(())),None)
          x306 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x319,x502,List(b251),false,true)
            Access: x299
            Memory: x270
            Iterators between x299 and x270: b251
            Unroll: Map(b251 -> List(0))
            uids:List(List(0))
            Unrolling x299 = FIFODeq(x270,Set(Const(true)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x508 = FIFOBankedDeq(x475,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
            Unrolling x300 = FieldApply(x299,start)
            x510 = FieldApply(x509,start)
            [x300] 0: x510
            Access: x301
            Memory: x296
            Iterators between x301 and x296: 
            Unroll: Map(b251 -> List(0))
            uids:List(List())
            Unrolling x301 = RegWrite(x296,x300,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x511 = RegWrite(x505,x510,Set())
            Unrolling x302 = FieldApply(x299,end)
            x512 = FieldApply(x509,end)
            [x302] 0: x512
            Access: x303
            Memory: x297
            Iterators between x303 and x297: 
            Unroll: Map(b251 -> List(0))
            uids:List(List())
            Unrolling x303 = RegWrite(x297,x302,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x513 = RegWrite(x506,x512,Set())
            Unrolling x304 = FieldApply(x299,size)
            x514 = FieldApply(x509,size)
            [x304] 0: x514
            Access: x305
            Memory: x298
            Iterators between x305 and x298: 
            Unroll: Map(b251 -> List(0))
            uids:List(List())
            Unrolling x305 = RegWrite(x298,x304,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x515 = RegWrite(x507,x514,Set())
          [x306] 0: Const(())
          Access: x307
          Memory: x298
          Iterators between x307 and x298: 
          Unroll: Map()
          uids:List(List())
          Unrolling x307 = RegRead(x298)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x517 = RegRead(x507)
          Unrolling x308 = CounterNew(Const(0),x307,Const(1),Const(1))
          x518 = CounterNew(Const(0),x517,Const(1),Const(1))
          [x308] 0: x518
          Unrolling x309 = CounterChainNew(List(x308))
          x519 = CounterChainNew(List(x518))
          [x309] 0: x519
          Unrolling x318 = OpForeach(Set(),x309,Block(Const(())),List(b146),None)
          x318 = OpForeach(Set(),x309,Block(Const(())),List(b146),None) [duplicate 1/1] in lanes PartialUnroller(x319,x502,List(b251),false,true)
          Unrolling foreach x318
            Access: x310
            Memory: x296
            Iterators between x310 and x296: b146
            Unroll: Map(b251 -> List(0))
            uids:List(List(0))
            Unrolling x310 = RegRead(x296)
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x522 = RegRead(x505)
            Unrolling x311 = FixLeq(x310,b146)
            x523 = FixLeq(x522,b520)
            [x311] 0: x523
            Access: x312
            Memory: x297
            Iterators between x312 and x297: b146
            Unroll: Map(b251 -> List(0))
            uids:List(List(0))
            Unrolling x312 = RegRead(x297)
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x524 = RegRead(x506)
            Unrolling x313 = FixLst(b146,x312)
            x525 = FixLst(b520,x524)
            [x313] 0: x525
            Unrolling x314 = And(x311,x313)
            x526 = And(x523,x525)
            [x314] 0: x526
            Unrolling x315 = FixSub(b146,x310)
            x527 = FixSub(b520,x522)
            [x315] 0: x527
            Access: x316
            Memory: x271
            Iterators between x316 and x271: b251, b146
            Unroll: Map(b251 -> List(0))
            uids:List(List(0, 0))
            Unrolling x316 = StreamInRead(x271,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x528 = StreamInBankedRead(x476,ArrayBuffer(Set(b521, b504)))
            Access: x317
            Memory: x268
            Iterators between x317 and x268: b251, b146
            Unroll: Map(b251 -> List(0))
            uids:List(List(0, 0))
            Unrolling x317 = SRAMWrite(x268,x316,List(b251, x315),Set(x314))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b503, x527)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x534 = SRAMBankedWrite(x472,Vector(x529),Vector(List(x530, Const(0))),Vector(x533),Vector(Set(x526, b521, b504)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b503, x527)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x539 = SRAMBankedWrite(x471,Vector(x529),Vector(List(x535, Const(0))),Vector(x538),Vector(Set(x526, b521, b504)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b503, x527)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x540 = SRAMBankedWrite(x473,Vector(x529),Vector(List(x535, Const(0))),Vector(x538),Vector(Set(x526, b521, b504)))
          Created foreach x541 = UnrolledForeach(Set(b504),x519,Block(Const(())),List(List(b520)),List(List(b521)),None)
          [x318] 0: Const(())
        Created foreach x542 = UnrolledForeach(Set(),x502,Block(Const(())),List(List(b503)),List(List(b504)),None)
        [x319] 0: Const(())
      [x320] 0: Const(())
      Duplicating x321 = SRAMNew(List(Const(100), Const(3)),SRAM2[Fix[TRUE,_10,_22]])
        #0: Memory(List(Dims {0}: Cyclic: N=10, B=1, alpha=<1>, P=<10> (176 solutions, 46 checks), Dims {1}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0, 0),None)
        x544 = SRAMNew(List(Const(100), Const(3)),SRAM2[Fix[TRUE,_10,_22]])
        Registering duplicates for memory: x321
        (x321,0) -> x544
      Unrolling x322 = CounterNew(Const(0),Const(100),Const(1),Const(10))
      x545 = CounterNew(Const(0),Const(100),Const(1),Const(10))
      [x322] 0: x545
      Unrolling x323 = CounterChainNew(List(x322))
      x546 = CounterChainNew(List(x545))
      [x323] 0: x546
      Unrolling x396 = OpForeach(Set(),x323,Block(Const(())),List(b20),None)
      x396 = OpForeach(Set(),x323,Block(Const(())),List(b20),None) [duplicate 1/1] in lanes UnitUnroller(Accel,false)
      Unrolling foreach x396
        Duplicating x324 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),Buffer)
          x567 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
          x568 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          Registering duplicates for memory: x324
          (x324,0) -> x567
          (x324,1) -> x568
        Duplicating x324 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),Buffer)
          x569 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
          x570 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          Registering duplicates for memory: x324
          (x324,0) -> x569
          (x324,1) -> x570
        Duplicating x324 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),Buffer)
          x571 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
          x572 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          Registering duplicates for memory: x324
          (x324,0) -> x571
          (x324,1) -> x572
        Duplicating x324 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),Buffer)
          x573 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
          x574 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          Registering duplicates for memory: x324
          (x324,0) -> x573
          (x324,1) -> x574
        Duplicating x324 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),Buffer)
          x575 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
          x576 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          Registering duplicates for memory: x324
          (x324,0) -> x575
          (x324,1) -> x576
        Duplicating x324 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),Buffer)
          x577 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
          x578 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          Registering duplicates for memory: x324
          (x324,0) -> x577
          (x324,1) -> x578
        Duplicating x324 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),Buffer)
          x579 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
          x580 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          Registering duplicates for memory: x324
          (x324,0) -> x579
          (x324,1) -> x580
        Duplicating x324 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),Buffer)
          x581 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
          x582 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          Registering duplicates for memory: x324
          (x324,0) -> x581
          (x324,1) -> x582
        Duplicating x324 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),Buffer)
          x583 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
          x584 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          Registering duplicates for memory: x324
          (x324,0) -> x583
          (x324,1) -> x584
        Duplicating x324 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),1,List(0),Buffer)
          x585 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
          x586 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
          Registering duplicates for memory: x324
          (x324,0) -> x585
          (x324,1) -> x586
        Unrolling x325 = CounterNew(Const(0),Const(100),Const(1),Const(2))
        Lane #List(0): 
        x587 = CounterNew(Const(0),Const(100),Const(1),Const(2))
        Lane #List(1): 
        x588 = CounterNew(Const(0),Const(100),Const(1),Const(2))
        Lane #List(2): 
        x589 = CounterNew(Const(0),Const(100),Const(1),Const(2))
        Lane #List(3): 
        x590 = CounterNew(Const(0),Const(100),Const(1),Const(2))
        Lane #List(4): 
        x591 = CounterNew(Const(0),Const(100),Const(1),Const(2))
        Lane #List(5): 
        x592 = CounterNew(Const(0),Const(100),Const(1),Const(2))
        Lane #List(6): 
        x593 = CounterNew(Const(0),Const(100),Const(1),Const(2))
        Lane #List(7): 
        x594 = CounterNew(Const(0),Const(100),Const(1),Const(2))
        Lane #List(8): 
        x595 = CounterNew(Const(0),Const(100),Const(1),Const(2))
        Lane #List(9): 
        x596 = CounterNew(Const(0),Const(100),Const(1),Const(2))
        [x325] 0: x587, 1: x588, 2: x589, 3: x590, 4: x591, 5: x592, 6: x593, 7: x594, 8: x595, 9: x596
        Unrolling x326 = CounterChainNew(List(x325))
        Lane #List(0): 
        x597 = CounterChainNew(List(x587))
        Lane #List(1): 
        x598 = CounterChainNew(List(x588))
        Lane #List(2): 
        x599 = CounterChainNew(List(x589))
        Lane #List(3): 
        x600 = CounterChainNew(List(x590))
        Lane #List(4): 
        x601 = CounterChainNew(List(x591))
        Lane #List(5): 
        x602 = CounterChainNew(List(x592))
        Lane #List(6): 
        x603 = CounterChainNew(List(x593))
        Lane #List(7): 
        x604 = CounterChainNew(List(x594))
        Lane #List(8): 
        x605 = CounterChainNew(List(x595))
        Lane #List(9): 
        x606 = CounterChainNew(List(x596))
        [x326] 0: x597, 1: x598, 2: x599, 3: x600, 4: x601, 5: x602, 6: x603, 7: x604, 8: x605, 9: x606
        Unrolling x327 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(0): 
        x607 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(1): 
        x608 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(2): 
        x609 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(3): 
        x610 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(4): 
        x611 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(5): 
        x612 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(6): 
        x613 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(7): 
        x614 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(8): 
        x615 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(9): 
        x616 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        [x327] 0: x607, 1: x608, 2: x609, 3: x610, 4: x611, 5: x612, 6: x613, 7: x614, 8: x615, 9: x616
        Unrolling x328 = CounterChainNew(Vector(x327))
        Lane #List(0): 
        x617 = CounterChainNew(Vector(x607))
        Lane #List(1): 
        x618 = CounterChainNew(Vector(x608))
        Lane #List(2): 
        x619 = CounterChainNew(Vector(x609))
        Lane #List(3): 
        x620 = CounterChainNew(Vector(x610))
        Lane #List(4): 
        x621 = CounterChainNew(Vector(x611))
        Lane #List(5): 
        x622 = CounterChainNew(Vector(x612))
        Lane #List(6): 
        x623 = CounterChainNew(Vector(x613))
        Lane #List(7): 
        x624 = CounterChainNew(Vector(x614))
        Lane #List(8): 
        x625 = CounterChainNew(Vector(x615))
        Lane #List(9): 
        x626 = CounterChainNew(Vector(x616))
        [x328] 0: x617, 1: x618, 2: x619, 3: x620, 4: x621, 5: x622, 6: x623, 7: x624, 8: x625, 9: x626
        Unrolling x388 = OpMemReduce(Set(),x326,x328,x324,Block(x329),Block((x329) => x384),Block((x324) => x385),Block((b29,b30) => x386),Block((x324,x386) => Const(())),None,false,List(b27),List(b28),None,Fix[TRUE,_10,_22],SRAM1[Fix[TRUE,_10,_22]])
        Duplicating controller x388 = OpMemReduce(Set(),x326,x328,x324,Block(x329),Block((x329) => x384),Block((x324) => x385),Block((b29,b30) => x386),Block((x324,x386) => Const(())),None,false,List(b27),List(b28),None,Fix[TRUE,_10,_22],SRAM1[Fix[TRUE,_10,_22]]) in lanes PartialUnroller(x396,x546,List(b20),false,true)
          x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [x329]
          x330 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x330]
          x331 = CounterChainNew(List(x330)) [x331]
          x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) [x336]
          x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x337]
          x347 = UnitPipe(Set(),Block(Const(())),None) [x347]
          x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x348]
          x349 = RegNew(Const(false)) [x349]
          x350 = RegNew(Const(false)) [x350]
          x358 = UnitPipe(Set(),Block(Const(())),None) [x358]
          x359 = RegRead(x350) [x359]
          x360 = RegRead(x349) [x360]
          x373 = Switch(List(x360, x359),Block(x372)) [x373]
          x375 = UnitPipe(Set(),Block(Const(())),None) [x375]
          x376 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x376]
        
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x633 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x634 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x635 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x636 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x637 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x633
            (x329,1) -> x634
            (x329,2) -> x635
            (x329,3) -> x636
            (x329,4) -> x637
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x638 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x639 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x640 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x641 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x642 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x638
            (x329,1) -> x639
            (x329,2) -> x640
            (x329,3) -> x641
            (x329,4) -> x642
          Unrolling x330 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x643 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x644 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x330] 0: x643, 1: x644
          Unrolling x331 = CounterChainNew(List(x330))
          Lane #List(0): 
          x645 = CounterChainNew(List(x643))
          Lane #List(1): 
          x646 = CounterChainNew(List(x644))
          [x331] 0: x645, 1: x646
          Unrolling x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None)
          Duplicating controller x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) in lanes PartialUnroller(x388_map,x597,List(b27),false,true)
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List(0, 0, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b547, b647)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x653 = SRAMBankedRead(x471,Vector(List(x649, Const(0))),Vector(x652),Vector(Set(b648, b630, b557)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List(0, 0, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b627, b647)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x659 = SRAMBankedRead(x472,Vector(List(x655, Const(0))),Vector(x658),Vector(Set(b648, b630, b557)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x661 = FixSub(x654,x660)
            [x334] 0: x661
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b647)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x662 = SRAMBankedWrite(x634,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b647)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x663 = SRAMBankedWrite(x637,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b647)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x664 = SRAMBankedWrite(x633,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b647)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x665 = SRAMBankedWrite(x636,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b647)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x666 = SRAMBankedWrite(x635,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
          Created foreach x667 = UnrolledForeach(Set(b630, b557),x645,Block(Const(())),List(List(b647)),List(List(b648)),None)
            x336 duplicate #List(1)/2 = x667
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List(0, 1, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(1))
            a2 = 
              lane 0 (castgrp/broadcast 0/1) = List(b547, b668)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
              x674 = SRAMBankedRead(x471,Vector(List(x670, Const(0))),Vector(x673),Vector(Set(b669, b631, b557)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List(0, 1, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 1/0) = List(b628, b668)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
              x680 = SRAMBankedRead(x472,Vector(List(x676, Const(0))),Vector(x679),Vector(Set(b669, b631, b557)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x682 = FixSub(x675,x681)
            [x334] 0: x682
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b668)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x683 = SRAMBankedWrite(x638,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b668)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x684 = SRAMBankedWrite(x642,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b668)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x685 = SRAMBankedWrite(x641,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b668)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x686 = SRAMBankedWrite(x640,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b668)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x687 = SRAMBankedWrite(x639,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
          Created foreach x688 = UnrolledForeach(Set(b631, b557),x646,Block(Const(())),List(List(b668)),List(List(b669)),None)
            x336 duplicate #List(2)/2 = x688
          [x336] 0: x689
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x690 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x690
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x691 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x691
          Unrolling x347 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x347 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x597,List(b27),false,true)
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x692 = SRAMBankedRead(x633,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x694 = FixMul(x693,x693)
            [x339] 0: x694
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x695 = SRAMBankedRead(x634,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x697 = FixMul(x696,x696)
            [x341] 0: x697
            Unrolling x342 = FixAdd(x339,x341)
            x698 = FixAdd(x694,x697)
            [x342] 0: x698
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x699 = SRAMBankedRead(x635,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x701 = FixMul(x700,x700)
            [x344] 0: x701
            Unrolling x345 = FixAdd(x342,x344)
            x702 = FixAdd(x698,x701)
            [x345] 0: x702
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x703 = SRAMBankedWrite(x690,Vector(x702),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(1)/2 = x704
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x705 = SRAMBankedRead(x638,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x707 = FixMul(x706,x706)
            [x339] 0: x707
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x708 = SRAMBankedRead(x639,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x710 = FixMul(x709,x709)
            [x341] 0: x710
            Unrolling x342 = FixAdd(x339,x341)
            x711 = FixAdd(x707,x710)
            [x342] 0: x711
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x712 = SRAMBankedRead(x640,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x714 = FixMul(x713,x713)
            [x344] 0: x714
            Unrolling x345 = FixAdd(x342,x344)
            x715 = FixAdd(x711,x714)
            [x345] 0: x715
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x716 = SRAMBankedWrite(x691,Vector(x715),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(2)/2 = x717
          [x347] 0: x718
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x719 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x719
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x720 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x720
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x721 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x721
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x722 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x722
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x723 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x723
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x724 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x724
          Unrolling x358 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x358 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x597,List(b27),false,true)
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x725 = SRAMBankedRead(x690,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x727 = FixLst(Const(0),x726)
            [x352] 0: x727
            Unrolling x353 = FixLst(Const(1),x351)
            x728 = FixLst(Const(1),x726)
            [x353] 0: x728
            Unrolling x354 = And(x352,x353)
            x729 = And(x727,x728)
            [x354] 0: x729
            Unrolling x355 = Not(x354)
            x730 = Not(x729)
            [x355] 0: x730
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x731 = RegWrite(x721,x729,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x732 = RegWrite(x723,x730,Set())
            x358 duplicate #List(1)/2 = x733
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x734 = SRAMBankedRead(x691,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x736 = FixLst(Const(0),x735)
            [x352] 0: x736
            Unrolling x353 = FixLst(Const(1),x351)
            x737 = FixLst(Const(1),x735)
            [x353] 0: x737
            Unrolling x354 = And(x352,x353)
            x738 = And(x736,x737)
            [x354] 0: x738
            Unrolling x355 = Not(x354)
            x739 = Not(x738)
            [x355] 0: x739
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x740 = RegWrite(x722,x738,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x741 = RegWrite(x724,x739,Set())
            x358 duplicate #List(2)/2 = x742
          [x358] 0: x743
          Access: x359
          Memory: x350
          Iterators between x359 and x350: 
          Unroll: Map(b20 -> List(0))
          uids:List(List())
          uids:List(List())
          Unrolling x359 = RegRead(x350)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x744 = RegRead(x723)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x745 = RegRead(x724)
          Access: x360
          Memory: x349
          Iterators between x360 and x349: 
          Unroll: Map(b20 -> List(0))
          uids:List(List())
          uids:List(List())
          Unrolling x360 = RegRead(x349)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x746 = RegRead(x722)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x747 = RegRead(x721)
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(0), b27 -> List(0))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x748 = RegRead(x721)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(0), b27 -> List(0))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x749 = SRAMBankedRead(x690,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x748)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x751 = FixDiv(Const(100),x750)
              [x363] 0: x751
              Unrolling x364 = FixDiv(x363,x362)
              x752 = FixDiv(x751,x750)
              [x364] 0: x752
              Unrolling x365 = FixDiv(x364,x362)
              x753 = FixDiv(x752,x750)
              [x365] 0: x753
              Unrolling x366 = FixDiv(x365,x362)
              x754 = FixDiv(x753,x750)
              [x366] 0: x754
              Unrolling x367 = FixDiv(x366,x362)
              x755 = FixDiv(x754,x750)
              [x367] 0: x755
              Unrolling x368 = FixDiv(Const(10),x362)
              x756 = FixDiv(Const(10),x750)
              [x368] 0: x756
              Unrolling x369 = FixDiv(x368,x362)
              x757 = FixDiv(x756,x750)
              [x369] 0: x757
              Unrolling x370 = FixSub(x367,x369)
              x758 = FixSub(x755,x757)
              [x370] 0: x758
            [x371] 0: x759
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x760
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(0), b27 -> List(1))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x762 = RegRead(x722)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(0), b27 -> List(1))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x763 = SRAMBankedRead(x691,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x762)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x765 = FixDiv(Const(100),x764)
              [x363] 0: x765
              Unrolling x364 = FixDiv(x363,x362)
              x766 = FixDiv(x765,x764)
              [x364] 0: x766
              Unrolling x365 = FixDiv(x364,x362)
              x767 = FixDiv(x766,x764)
              [x365] 0: x767
              Unrolling x366 = FixDiv(x365,x362)
              x768 = FixDiv(x767,x764)
              [x366] 0: x768
              Unrolling x367 = FixDiv(x366,x362)
              x769 = FixDiv(x768,x764)
              [x367] 0: x769
              Unrolling x368 = FixDiv(Const(10),x362)
              x770 = FixDiv(Const(10),x764)
              [x368] 0: x770
              Unrolling x369 = FixDiv(x368,x362)
              x771 = FixDiv(x770,x764)
              [x369] 0: x771
              Unrolling x370 = FixSub(x367,x369)
              x772 = FixSub(x769,x771)
              [x370] 0: x772
            [x371] 0: x773
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x774
          Unrolling x375 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x375 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x597,List(b27),false,true)
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x776 = SRAMBankedWrite(x719,Vector(x761),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(1)/2 = x777
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x778 = SRAMBankedWrite(x720,Vector(x775),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(2)/2 = x779
          [x375] 0: x780
          Unrolling x376 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x781 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x782 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x376] 0: x781, 1: x782
          Unrolling x377 = CounterChainNew(List(x376))
          Lane #List(0): 
          x783 = CounterChainNew(List(x781))
          Lane #List(1): 
          x784 = CounterChainNew(List(x782))
          [x377] 0: x783, 1: x784
          Unrolling x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None)
          Duplicating controller x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None) in lanes PartialUnroller(x388_map,x597,List(b27),false,true)
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b785)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x787 = SRAMBankedRead(x636,Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x789 = FixMul(x788,Const(0.099999904632568359375))
            [x379] 0: x789
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x790 = SRAMBankedRead(x719,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x792 = FixMul(x789,x791)
            [x381] 0: x792
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(0), b27 -> List(0))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b785)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x793 = SRAMBankedWrite(x634,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b785)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x794 = SRAMBankedWrite(x637,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b785)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x795 = SRAMBankedWrite(x633,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b785)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x796 = SRAMBankedWrite(x636,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b785)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x797 = SRAMBankedWrite(x635,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
          Created foreach x798 = UnrolledForeach(Set(b630, b557),x783,Block(Const(())),List(List(b785)),List(List(b786)),None)
            x383 duplicate #List(1)/2 = x798
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b799)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x801 = SRAMBankedRead(x641,Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x803 = FixMul(x802,Const(0.099999904632568359375))
            [x379] 0: x803
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x804 = SRAMBankedRead(x720,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x806 = FixMul(x803,x805)
            [x381] 0: x806
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(0), b27 -> List(1))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b799)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x807 = SRAMBankedWrite(x638,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b799)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x808 = SRAMBankedWrite(x642,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b799)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x809 = SRAMBankedWrite(x641,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b799)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x810 = SRAMBankedWrite(x640,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b799)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x811 = SRAMBankedWrite(x639,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
          Created foreach x812 = UnrolledForeach(Set(b631, b557),x784,Block(Const(())),List(List(b799)),List(List(b800)),None)
            x383 duplicate #List(2)/2 = x812
          [x383] 0: x813
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(0), b27 -> List(0))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b629)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x814 = SRAMBankedRead(x637,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(0), b27 -> List(1))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b629)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x816 = SRAMBankedRead(x642,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
          Access: x385
          Memory: x324
          Iterators between x385 and x324: b28
          Unroll: Map(b20 -> List(0))
          uids:List(List(0))
          Unrolling x385 = SRAMRead(x324,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b629)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x818 = SRAMBankedRead(x567,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
        Creating Function0 with subst: {b29 -> x815, b30 -> x817}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x825 = FixAdd(x815,x817)
          Lane #List(1): 
          x825 = FixAdd(x815,x817)
          Lane #List(2): 
          x825 = FixAdd(x815,x817)
          Lane #List(3): 
          x825 = FixAdd(x815,x817)
          Lane #List(4): 
          x825 = FixAdd(x815,x817)
          Lane #List(5): 
          x825 = FixAdd(x815,x817)
          Lane #List(6): 
          x825 = FixAdd(x815,x817)
          Lane #List(7): 
          x825 = FixAdd(x815,x817)
          Lane #List(8): 
          x825 = FixAdd(x815,x817)
          Lane #List(9): 
          x825 = FixAdd(x815,x817)
          [x386] 0: x825, 1: x825, 2: x825, 3: x825, 4: x825, 5: x825, 6: x825, 7: x825, 8: x825, 9: x825
        Executing Function2 with inputs: x826 and x819
        Creating Function0 with subst: {b29 -> x826, b30 -> x819}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x829 = FixAdd(x826,x819)
          Lane #List(1): 
          x829 = FixAdd(x826,x819)
          Lane #List(2): 
          x829 = FixAdd(x826,x819)
          Lane #List(3): 
          x829 = FixAdd(x826,x819)
          Lane #List(4): 
          x829 = FixAdd(x826,x819)
          Lane #List(5): 
          x829 = FixAdd(x826,x819)
          Lane #List(6): 
          x829 = FixAdd(x826,x819)
          Lane #List(7): 
          x829 = FixAdd(x826,x819)
          Lane #List(8): 
          x829 = FixAdd(x826,x819)
          Lane #List(9): 
          x829 = FixAdd(x826,x819)
          [x386] 0: x829, 1: x829, 2: x829, 3: x829, 4: x829, 5: x829, 6: x829, 7: x829, 8: x829, 9: x829
          Access: x387
          Memory: x324
          Iterators between x387 and x324: b28
          Unroll: Map(b20 -> List(0))
          uids:List(List(0))
          Unrolling x387 = SRAMWrite(x324,x386,List(b28),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b629)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x831 = SRAMBankedWrite(x568,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)))
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b629)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x832 = SRAMBankedWrite(x567,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)))
          x388 duplicate #List(1)/10 = x834
          x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [x329]
          x330 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x330]
          x331 = CounterChainNew(List(x330)) [x331]
          x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) [x336]
          x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x337]
          x347 = UnitPipe(Set(),Block(Const(())),None) [x347]
          x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x348]
          x349 = RegNew(Const(false)) [x349]
          x350 = RegNew(Const(false)) [x350]
          x358 = UnitPipe(Set(),Block(Const(())),None) [x358]
          x359 = RegRead(x350) [x359]
          x360 = RegRead(x349) [x360]
          x373 = Switch(List(x360, x359),Block(x372)) [x373]
          x375 = UnitPipe(Set(),Block(Const(())),None) [x375]
          x376 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x376]
        
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x841 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x842 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x843 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x844 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x845 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x841
            (x329,1) -> x842
            (x329,2) -> x843
            (x329,3) -> x844
            (x329,4) -> x845
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x846 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x847 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x848 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x849 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x850 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x846
            (x329,1) -> x847
            (x329,2) -> x848
            (x329,3) -> x849
            (x329,4) -> x850
          Unrolling x330 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x851 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x852 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x330] 0: x851, 1: x852
          Unrolling x331 = CounterChainNew(List(x330))
          Lane #List(0): 
          x853 = CounterChainNew(List(x851))
          Lane #List(1): 
          x854 = CounterChainNew(List(x852))
          [x331] 0: x853, 1: x854
          Unrolling x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None)
          Duplicating controller x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) in lanes PartialUnroller(x388_map,x598,List(b27),false,true)
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List(1, 0, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 1/0) = List(b548, b855)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
              x861 = SRAMBankedRead(x471,Vector(List(x857, Const(0))),Vector(x860),Vector(Set(b856, b838, b558)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List(1, 0, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(1))
            a2 = 
              lane 0 (castgrp/broadcast 0/1) = List(b835, b855)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(1)
              x867 = SRAMBankedRead(x472,Vector(List(x863, Const(0))),Vector(x866),Vector(Set(b856, b838, b558)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x869 = FixSub(x862,x868)
            [x334] 0: x869
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b855)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x870 = SRAMBankedWrite(x841,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b855)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x871 = SRAMBankedWrite(x842,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b855)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x872 = SRAMBankedWrite(x843,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b855)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x873 = SRAMBankedWrite(x845,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b855)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x874 = SRAMBankedWrite(x844,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
          Created foreach x875 = UnrolledForeach(Set(b838, b558),x853,Block(Const(())),List(List(b855)),List(List(b856)),None)
            x336 duplicate #List(1)/2 = x875
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List(1, 1, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(1))
            a2 = 
              lane 0 (castgrp/broadcast 1/1) = List(b548, b876)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(1)
              x882 = SRAMBankedRead(x471,Vector(List(x878, Const(0))),Vector(x881),Vector(Set(b877, b839, b558)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List(1, 1, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(1))
            a2 = 
              lane 0 (castgrp/broadcast 1/1) = List(b836, b876)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(1)
              x888 = SRAMBankedRead(x472,Vector(List(x884, Const(0))),Vector(x887),Vector(Set(b877, b839, b558)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x890 = FixSub(x883,x889)
            [x334] 0: x890
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b876)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x891 = SRAMBankedWrite(x846,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b876)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x892 = SRAMBankedWrite(x849,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b876)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x893 = SRAMBankedWrite(x847,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b876)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x894 = SRAMBankedWrite(x848,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b876)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x895 = SRAMBankedWrite(x850,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
          Created foreach x896 = UnrolledForeach(Set(b839, b558),x854,Block(Const(())),List(List(b876)),List(List(b877)),None)
            x336 duplicate #List(2)/2 = x896
          [x336] 0: x897
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x898 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x898
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x899 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x899
          Unrolling x347 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x347 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x598,List(b27),false,true)
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x900 = SRAMBankedRead(x841,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x902 = FixMul(x901,x901)
            [x339] 0: x902
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x903 = SRAMBankedRead(x842,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x905 = FixMul(x904,x904)
            [x341] 0: x905
            Unrolling x342 = FixAdd(x339,x341)
            x906 = FixAdd(x902,x905)
            [x342] 0: x906
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x907 = SRAMBankedRead(x843,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x909 = FixMul(x908,x908)
            [x344] 0: x909
            Unrolling x345 = FixAdd(x342,x344)
            x910 = FixAdd(x906,x909)
            [x345] 0: x910
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x911 = SRAMBankedWrite(x898,Vector(x910),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(1)/2 = x912
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x913 = SRAMBankedRead(x846,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x915 = FixMul(x914,x914)
            [x339] 0: x915
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x916 = SRAMBankedRead(x847,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x918 = FixMul(x917,x917)
            [x341] 0: x918
            Unrolling x342 = FixAdd(x339,x341)
            x919 = FixAdd(x915,x918)
            [x342] 0: x919
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x920 = SRAMBankedRead(x848,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x922 = FixMul(x921,x921)
            [x344] 0: x922
            Unrolling x345 = FixAdd(x342,x344)
            x923 = FixAdd(x919,x922)
            [x345] 0: x923
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x924 = SRAMBankedWrite(x899,Vector(x923),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(2)/2 = x925
          [x347] 0: x926
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x927 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x927
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x928 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x928
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x929 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x929
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x930 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x930
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x931 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x931
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x932 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x932
          Unrolling x358 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x358 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x598,List(b27),false,true)
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x933 = SRAMBankedRead(x898,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x935 = FixLst(Const(0),x934)
            [x352] 0: x935
            Unrolling x353 = FixLst(Const(1),x351)
            x936 = FixLst(Const(1),x934)
            [x353] 0: x936
            Unrolling x354 = And(x352,x353)
            x937 = And(x935,x936)
            [x354] 0: x937
            Unrolling x355 = Not(x354)
            x938 = Not(x937)
            [x355] 0: x938
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x939 = RegWrite(x929,x937,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x940 = RegWrite(x931,x938,Set())
            x358 duplicate #List(1)/2 = x941
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x942 = SRAMBankedRead(x899,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x944 = FixLst(Const(0),x943)
            [x352] 0: x944
            Unrolling x353 = FixLst(Const(1),x351)
            x945 = FixLst(Const(1),x943)
            [x353] 0: x945
            Unrolling x354 = And(x352,x353)
            x946 = And(x944,x945)
            [x354] 0: x946
            Unrolling x355 = Not(x354)
            x947 = Not(x946)
            [x355] 0: x947
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x948 = RegWrite(x930,x946,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x949 = RegWrite(x932,x947,Set())
            x358 duplicate #List(2)/2 = x950
          [x358] 0: x951
          Access: x359
          Memory: x350
          Iterators between x359 and x350: 
          Unroll: Map(b20 -> List(1))
          uids:List(List())
          uids:List(List())
          Unrolling x359 = RegRead(x350)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x952 = RegRead(x932)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x953 = RegRead(x931)
          Access: x360
          Memory: x349
          Iterators between x360 and x349: 
          Unroll: Map(b20 -> List(1))
          uids:List(List())
          uids:List(List())
          Unrolling x360 = RegRead(x349)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x954 = RegRead(x929)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x955 = RegRead(x930)
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(1), b27 -> List(0))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x956 = RegRead(x929)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(1), b27 -> List(0))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x957 = SRAMBankedRead(x898,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x956)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x959 = FixDiv(Const(100),x958)
              [x363] 0: x959
              Unrolling x364 = FixDiv(x363,x362)
              x960 = FixDiv(x959,x958)
              [x364] 0: x960
              Unrolling x365 = FixDiv(x364,x362)
              x961 = FixDiv(x960,x958)
              [x365] 0: x961
              Unrolling x366 = FixDiv(x365,x362)
              x962 = FixDiv(x961,x958)
              [x366] 0: x962
              Unrolling x367 = FixDiv(x366,x362)
              x963 = FixDiv(x962,x958)
              [x367] 0: x963
              Unrolling x368 = FixDiv(Const(10),x362)
              x964 = FixDiv(Const(10),x958)
              [x368] 0: x964
              Unrolling x369 = FixDiv(x368,x362)
              x965 = FixDiv(x964,x958)
              [x369] 0: x965
              Unrolling x370 = FixSub(x367,x369)
              x966 = FixSub(x963,x965)
              [x370] 0: x966
            [x371] 0: x967
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x968
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(1), b27 -> List(1))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x970 = RegRead(x930)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(1), b27 -> List(1))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x971 = SRAMBankedRead(x899,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x970)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x973 = FixDiv(Const(100),x972)
              [x363] 0: x973
              Unrolling x364 = FixDiv(x363,x362)
              x974 = FixDiv(x973,x972)
              [x364] 0: x974
              Unrolling x365 = FixDiv(x364,x362)
              x975 = FixDiv(x974,x972)
              [x365] 0: x975
              Unrolling x366 = FixDiv(x365,x362)
              x976 = FixDiv(x975,x972)
              [x366] 0: x976
              Unrolling x367 = FixDiv(x366,x362)
              x977 = FixDiv(x976,x972)
              [x367] 0: x977
              Unrolling x368 = FixDiv(Const(10),x362)
              x978 = FixDiv(Const(10),x972)
              [x368] 0: x978
              Unrolling x369 = FixDiv(x368,x362)
              x979 = FixDiv(x978,x972)
              [x369] 0: x979
              Unrolling x370 = FixSub(x367,x369)
              x980 = FixSub(x977,x979)
              [x370] 0: x980
            [x371] 0: x981
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x982
          Unrolling x375 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x375 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x598,List(b27),false,true)
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x984 = SRAMBankedWrite(x927,Vector(x969),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(1)/2 = x985
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x986 = SRAMBankedWrite(x928,Vector(x983),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(2)/2 = x987
          [x375] 0: x988
          Unrolling x376 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x989 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x990 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x376] 0: x989, 1: x990
          Unrolling x377 = CounterChainNew(List(x376))
          Lane #List(0): 
          x991 = CounterChainNew(List(x989))
          Lane #List(1): 
          x992 = CounterChainNew(List(x990))
          [x377] 0: x991, 1: x992
          Unrolling x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None)
          Duplicating controller x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None) in lanes PartialUnroller(x388_map,x598,List(b27),false,true)
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b993)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x995 = SRAMBankedRead(x844,Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x997 = FixMul(x996,Const(0.099999904632568359375))
            [x379] 0: x997
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x998 = SRAMBankedRead(x927,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x1000 = FixMul(x997,x999)
            [x381] 0: x1000
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(1), b27 -> List(0))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b993)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1001 = SRAMBankedWrite(x841,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b993)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1002 = SRAMBankedWrite(x842,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b993)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1003 = SRAMBankedWrite(x843,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b993)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1004 = SRAMBankedWrite(x845,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b993)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1005 = SRAMBankedWrite(x844,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
          Created foreach x1006 = UnrolledForeach(Set(b838, b558),x991,Block(Const(())),List(List(b993)),List(List(b994)),None)
            x383 duplicate #List(1)/2 = x1006
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1007)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1009 = SRAMBankedRead(x849,Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x1011 = FixMul(x1010,Const(0.099999904632568359375))
            [x379] 0: x1011
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1012 = SRAMBankedRead(x928,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x1014 = FixMul(x1011,x1013)
            [x381] 0: x1014
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(1), b27 -> List(1))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1007)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1015 = SRAMBankedWrite(x846,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1007)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1016 = SRAMBankedWrite(x849,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1007)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1017 = SRAMBankedWrite(x847,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1007)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1018 = SRAMBankedWrite(x848,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1007)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1019 = SRAMBankedWrite(x850,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
          Created foreach x1020 = UnrolledForeach(Set(b839, b558),x992,Block(Const(())),List(List(b1007)),List(List(b1008)),None)
            x383 duplicate #List(2)/2 = x1020
          [x383] 0: x1021
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(1), b27 -> List(0))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b837)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1022 = SRAMBankedRead(x845,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(1), b27 -> List(1))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b837)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1024 = SRAMBankedRead(x850,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
          Access: x385
          Memory: x324
          Iterators between x385 and x324: b28
          Unroll: Map(b20 -> List(1))
          uids:List(List(0))
          Unrolling x385 = SRAMRead(x324,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b837)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1026 = SRAMBankedRead(x569,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
        Creating Function0 with subst: {b29 -> x1023, b30 -> x1025}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x1033 = FixAdd(x1023,x1025)
          Lane #List(1): 
          x1033 = FixAdd(x1023,x1025)
          Lane #List(2): 
          x1033 = FixAdd(x1023,x1025)
          Lane #List(3): 
          x1033 = FixAdd(x1023,x1025)
          Lane #List(4): 
          x1033 = FixAdd(x1023,x1025)
          Lane #List(5): 
          x1033 = FixAdd(x1023,x1025)
          Lane #List(6): 
          x1033 = FixAdd(x1023,x1025)
          Lane #List(7): 
          x1033 = FixAdd(x1023,x1025)
          Lane #List(8): 
          x1033 = FixAdd(x1023,x1025)
          Lane #List(9): 
          x1033 = FixAdd(x1023,x1025)
          [x386] 0: x1033, 1: x1033, 2: x1033, 3: x1033, 4: x1033, 5: x1033, 6: x1033, 7: x1033, 8: x1033, 9: x1033
        Executing Function2 with inputs: x1034 and x1027
        Creating Function0 with subst: {b29 -> x1034, b30 -> x1027}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x1037 = FixAdd(x1034,x1027)
          Lane #List(1): 
          x1037 = FixAdd(x1034,x1027)
          Lane #List(2): 
          x1037 = FixAdd(x1034,x1027)
          Lane #List(3): 
          x1037 = FixAdd(x1034,x1027)
          Lane #List(4): 
          x1037 = FixAdd(x1034,x1027)
          Lane #List(5): 
          x1037 = FixAdd(x1034,x1027)
          Lane #List(6): 
          x1037 = FixAdd(x1034,x1027)
          Lane #List(7): 
          x1037 = FixAdd(x1034,x1027)
          Lane #List(8): 
          x1037 = FixAdd(x1034,x1027)
          Lane #List(9): 
          x1037 = FixAdd(x1034,x1027)
          [x386] 0: x1037, 1: x1037, 2: x1037, 3: x1037, 4: x1037, 5: x1037, 6: x1037, 7: x1037, 8: x1037, 9: x1037
          Access: x387
          Memory: x324
          Iterators between x387 and x324: b28
          Unroll: Map(b20 -> List(1))
          uids:List(List(0))
          Unrolling x387 = SRAMWrite(x324,x386,List(b28),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b837)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1039 = SRAMBankedWrite(x570,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)))
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b837)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1040 = SRAMBankedWrite(x569,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)))
          x388 duplicate #List(2)/10 = x1042
          x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [x329]
          x330 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x330]
          x331 = CounterChainNew(List(x330)) [x331]
          x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) [x336]
          x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x337]
          x347 = UnitPipe(Set(),Block(Const(())),None) [x347]
          x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x348]
          x349 = RegNew(Const(false)) [x349]
          x350 = RegNew(Const(false)) [x350]
          x358 = UnitPipe(Set(),Block(Const(())),None) [x358]
          x359 = RegRead(x350) [x359]
          x360 = RegRead(x349) [x360]
          x373 = Switch(List(x360, x359),Block(x372)) [x373]
          x375 = UnitPipe(Set(),Block(Const(())),None) [x375]
          x376 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x376]
        
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1049 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1050 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1051 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1052 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x1053 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x1049
            (x329,1) -> x1050
            (x329,2) -> x1051
            (x329,3) -> x1052
            (x329,4) -> x1053
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1054 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1055 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1056 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1057 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x1058 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x1054
            (x329,1) -> x1055
            (x329,2) -> x1056
            (x329,3) -> x1057
            (x329,4) -> x1058
          Unrolling x330 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x1059 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x1060 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x330] 0: x1059, 1: x1060
          Unrolling x331 = CounterChainNew(List(x330))
          Lane #List(0): 
          x1061 = CounterChainNew(List(x1059))
          Lane #List(1): 
          x1062 = CounterChainNew(List(x1060))
          [x331] 0: x1061, 1: x1062
          Unrolling x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None)
          Duplicating controller x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) in lanes PartialUnroller(x388_map,x599,List(b27),false,true)
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List(2, 0, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,2,ArrayBuffer(2),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 2/0) = List(b549, b1063)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(0)
              x1069 = SRAMBankedRead(x471,Vector(List(x1065, Const(0))),Vector(x1068),Vector(Set(b1064, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List(2, 0, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(2))
            a2 = 
              lane 0 (castgrp/broadcast 0/2) = List(b1043, b1063)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(2)
              x1075 = SRAMBankedRead(x472,Vector(List(x1071, Const(0))),Vector(x1074),Vector(Set(b1064, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x1077 = FixSub(x1070,x1076)
            [x334] 0: x1077
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1063)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1078 = SRAMBankedWrite(x1051,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1063)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1079 = SRAMBankedWrite(x1050,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1063)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1080 = SRAMBankedWrite(x1049,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1063)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1081 = SRAMBankedWrite(x1053,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1063)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1082 = SRAMBankedWrite(x1052,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
          Created foreach x1083 = UnrolledForeach(Set(b1046, b559),x1061,Block(Const(())),List(List(b1063)),List(List(b1064)),None)
            x336 duplicate #List(1)/2 = x1083
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List(2, 1, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,2,ArrayBuffer(2),ArrayBuffer(1))
            a2 = 
              lane 0 (castgrp/broadcast 2/1) = List(b549, b1084)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(1)
              x1090 = SRAMBankedRead(x471,Vector(List(x1086, Const(0))),Vector(x1089),Vector(Set(b1085, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List(2, 1, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(2))
            a2 = 
              lane 0 (castgrp/broadcast 1/2) = List(b1044, b1084)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(2)
              x1096 = SRAMBankedRead(x472,Vector(List(x1092, Const(0))),Vector(x1095),Vector(Set(b1085, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x1098 = FixSub(x1091,x1097)
            [x334] 0: x1098
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1084)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1099 = SRAMBankedWrite(x1055,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1084)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1100 = SRAMBankedWrite(x1057,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1084)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1101 = SRAMBankedWrite(x1054,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1084)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1102 = SRAMBankedWrite(x1058,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1084)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1103 = SRAMBankedWrite(x1056,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
          Created foreach x1104 = UnrolledForeach(Set(b1047, b559),x1062,Block(Const(())),List(List(b1084)),List(List(b1085)),None)
            x336 duplicate #List(2)/2 = x1104
          [x336] 0: x1105
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x1106 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x1106
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x1107 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x1107
          Unrolling x347 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x347 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x599,List(b27),false,true)
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1108 = SRAMBankedRead(x1049,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x1110 = FixMul(x1109,x1109)
            [x339] 0: x1110
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1111 = SRAMBankedRead(x1050,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x1113 = FixMul(x1112,x1112)
            [x341] 0: x1113
            Unrolling x342 = FixAdd(x339,x341)
            x1114 = FixAdd(x1110,x1113)
            [x342] 0: x1114
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1115 = SRAMBankedRead(x1051,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x1117 = FixMul(x1116,x1116)
            [x344] 0: x1117
            Unrolling x345 = FixAdd(x342,x344)
            x1118 = FixAdd(x1114,x1117)
            [x345] 0: x1118
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1119 = SRAMBankedWrite(x1106,Vector(x1118),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(1)/2 = x1120
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1121 = SRAMBankedRead(x1054,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x1123 = FixMul(x1122,x1122)
            [x339] 0: x1123
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1124 = SRAMBankedRead(x1055,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x1126 = FixMul(x1125,x1125)
            [x341] 0: x1126
            Unrolling x342 = FixAdd(x339,x341)
            x1127 = FixAdd(x1123,x1126)
            [x342] 0: x1127
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1128 = SRAMBankedRead(x1056,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x1130 = FixMul(x1129,x1129)
            [x344] 0: x1130
            Unrolling x345 = FixAdd(x342,x344)
            x1131 = FixAdd(x1127,x1130)
            [x345] 0: x1131
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1132 = SRAMBankedWrite(x1107,Vector(x1131),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(2)/2 = x1133
          [x347] 0: x1134
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x1135 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x1135
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x1136 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x1136
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1137 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x1137
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1138 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x1138
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1139 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x1139
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1140 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x1140
          Unrolling x358 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x358 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x599,List(b27),false,true)
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1141 = SRAMBankedRead(x1106,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x1143 = FixLst(Const(0),x1142)
            [x352] 0: x1143
            Unrolling x353 = FixLst(Const(1),x351)
            x1144 = FixLst(Const(1),x1142)
            [x353] 0: x1144
            Unrolling x354 = And(x352,x353)
            x1145 = And(x1143,x1144)
            [x354] 0: x1145
            Unrolling x355 = Not(x354)
            x1146 = Not(x1145)
            [x355] 0: x1146
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1147 = RegWrite(x1137,x1145,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1148 = RegWrite(x1139,x1146,Set())
            x358 duplicate #List(1)/2 = x1149
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1150 = SRAMBankedRead(x1107,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x1152 = FixLst(Const(0),x1151)
            [x352] 0: x1152
            Unrolling x353 = FixLst(Const(1),x351)
            x1153 = FixLst(Const(1),x1151)
            [x353] 0: x1153
            Unrolling x354 = And(x352,x353)
            x1154 = And(x1152,x1153)
            [x354] 0: x1154
            Unrolling x355 = Not(x354)
            x1155 = Not(x1154)
            [x355] 0: x1155
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1156 = RegWrite(x1138,x1154,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1157 = RegWrite(x1140,x1155,Set())
            x358 duplicate #List(2)/2 = x1158
          [x358] 0: x1159
          Access: x359
          Memory: x350
          Iterators between x359 and x350: 
          Unroll: Map(b20 -> List(2))
          uids:List(List())
          uids:List(List())
          Unrolling x359 = RegRead(x350)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1160 = RegRead(x1140)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1161 = RegRead(x1139)
          Access: x360
          Memory: x349
          Iterators between x360 and x349: 
          Unroll: Map(b20 -> List(2))
          uids:List(List())
          uids:List(List())
          Unrolling x360 = RegRead(x349)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x1162 = RegRead(x1138)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x1163 = RegRead(x1137)
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(2), b27 -> List(0))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1164 = RegRead(x1137)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(2), b27 -> List(0))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1165 = SRAMBankedRead(x1106,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1164)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x1167 = FixDiv(Const(100),x1166)
              [x363] 0: x1167
              Unrolling x364 = FixDiv(x363,x362)
              x1168 = FixDiv(x1167,x1166)
              [x364] 0: x1168
              Unrolling x365 = FixDiv(x364,x362)
              x1169 = FixDiv(x1168,x1166)
              [x365] 0: x1169
              Unrolling x366 = FixDiv(x365,x362)
              x1170 = FixDiv(x1169,x1166)
              [x366] 0: x1170
              Unrolling x367 = FixDiv(x366,x362)
              x1171 = FixDiv(x1170,x1166)
              [x367] 0: x1171
              Unrolling x368 = FixDiv(Const(10),x362)
              x1172 = FixDiv(Const(10),x1166)
              [x368] 0: x1172
              Unrolling x369 = FixDiv(x368,x362)
              x1173 = FixDiv(x1172,x1166)
              [x369] 0: x1173
              Unrolling x370 = FixSub(x367,x369)
              x1174 = FixSub(x1171,x1173)
              [x370] 0: x1174
            [x371] 0: x1175
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x1176
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(2), b27 -> List(1))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1178 = RegRead(x1138)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(2), b27 -> List(1))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1179 = SRAMBankedRead(x1107,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1178)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x1181 = FixDiv(Const(100),x1180)
              [x363] 0: x1181
              Unrolling x364 = FixDiv(x363,x362)
              x1182 = FixDiv(x1181,x1180)
              [x364] 0: x1182
              Unrolling x365 = FixDiv(x364,x362)
              x1183 = FixDiv(x1182,x1180)
              [x365] 0: x1183
              Unrolling x366 = FixDiv(x365,x362)
              x1184 = FixDiv(x1183,x1180)
              [x366] 0: x1184
              Unrolling x367 = FixDiv(x366,x362)
              x1185 = FixDiv(x1184,x1180)
              [x367] 0: x1185
              Unrolling x368 = FixDiv(Const(10),x362)
              x1186 = FixDiv(Const(10),x1180)
              [x368] 0: x1186
              Unrolling x369 = FixDiv(x368,x362)
              x1187 = FixDiv(x1186,x1180)
              [x369] 0: x1187
              Unrolling x370 = FixSub(x367,x369)
              x1188 = FixSub(x1185,x1187)
              [x370] 0: x1188
            [x371] 0: x1189
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x1190
          Unrolling x375 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x375 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x599,List(b27),false,true)
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1192 = SRAMBankedWrite(x1135,Vector(x1177),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(1)/2 = x1193
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1194 = SRAMBankedWrite(x1136,Vector(x1191),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(2)/2 = x1195
          [x375] 0: x1196
          Unrolling x376 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x1197 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x1198 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x376] 0: x1197, 1: x1198
          Unrolling x377 = CounterChainNew(List(x376))
          Lane #List(0): 
          x1199 = CounterChainNew(List(x1197))
          Lane #List(1): 
          x1200 = CounterChainNew(List(x1198))
          [x377] 0: x1199, 1: x1200
          Unrolling x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None)
          Duplicating controller x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None) in lanes PartialUnroller(x388_map,x599,List(b27),false,true)
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1201)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1203 = SRAMBankedRead(x1052,Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x1205 = FixMul(x1204,Const(0.099999904632568359375))
            [x379] 0: x1205
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1206 = SRAMBankedRead(x1135,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x1208 = FixMul(x1205,x1207)
            [x381] 0: x1208
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(2), b27 -> List(0))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1201)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1209 = SRAMBankedWrite(x1051,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1201)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1210 = SRAMBankedWrite(x1050,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1201)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1211 = SRAMBankedWrite(x1049,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1201)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1212 = SRAMBankedWrite(x1053,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1201)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1213 = SRAMBankedWrite(x1052,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
          Created foreach x1214 = UnrolledForeach(Set(b1046, b559),x1199,Block(Const(())),List(List(b1201)),List(List(b1202)),None)
            x383 duplicate #List(1)/2 = x1214
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1215)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1217 = SRAMBankedRead(x1057,Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x1219 = FixMul(x1218,Const(0.099999904632568359375))
            [x379] 0: x1219
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1220 = SRAMBankedRead(x1136,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x1222 = FixMul(x1219,x1221)
            [x381] 0: x1222
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(2), b27 -> List(1))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1215)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1223 = SRAMBankedWrite(x1055,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1215)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1224 = SRAMBankedWrite(x1057,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1215)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1225 = SRAMBankedWrite(x1054,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1215)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1226 = SRAMBankedWrite(x1058,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1215)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1227 = SRAMBankedWrite(x1056,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
          Created foreach x1228 = UnrolledForeach(Set(b1047, b559),x1200,Block(Const(())),List(List(b1215)),List(List(b1216)),None)
            x383 duplicate #List(2)/2 = x1228
          [x383] 0: x1229
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(2), b27 -> List(0))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1045)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1230 = SRAMBankedRead(x1053,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(2), b27 -> List(1))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1045)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1232 = SRAMBankedRead(x1058,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
          Access: x385
          Memory: x324
          Iterators between x385 and x324: b28
          Unroll: Map(b20 -> List(2))
          uids:List(List(0))
          Unrolling x385 = SRAMRead(x324,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1045)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1234 = SRAMBankedRead(x571,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
        Creating Function0 with subst: {b29 -> x1231, b30 -> x1233}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x1241 = FixAdd(x1231,x1233)
          Lane #List(1): 
          x1241 = FixAdd(x1231,x1233)
          Lane #List(2): 
          x1241 = FixAdd(x1231,x1233)
          Lane #List(3): 
          x1241 = FixAdd(x1231,x1233)
          Lane #List(4): 
          x1241 = FixAdd(x1231,x1233)
          Lane #List(5): 
          x1241 = FixAdd(x1231,x1233)
          Lane #List(6): 
          x1241 = FixAdd(x1231,x1233)
          Lane #List(7): 
          x1241 = FixAdd(x1231,x1233)
          Lane #List(8): 
          x1241 = FixAdd(x1231,x1233)
          Lane #List(9): 
          x1241 = FixAdd(x1231,x1233)
          [x386] 0: x1241, 1: x1241, 2: x1241, 3: x1241, 4: x1241, 5: x1241, 6: x1241, 7: x1241, 8: x1241, 9: x1241
        Executing Function2 with inputs: x1242 and x1235
        Creating Function0 with subst: {b29 -> x1242, b30 -> x1235}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x1245 = FixAdd(x1242,x1235)
          Lane #List(1): 
          x1245 = FixAdd(x1242,x1235)
          Lane #List(2): 
          x1245 = FixAdd(x1242,x1235)
          Lane #List(3): 
          x1245 = FixAdd(x1242,x1235)
          Lane #List(4): 
          x1245 = FixAdd(x1242,x1235)
          Lane #List(5): 
          x1245 = FixAdd(x1242,x1235)
          Lane #List(6): 
          x1245 = FixAdd(x1242,x1235)
          Lane #List(7): 
          x1245 = FixAdd(x1242,x1235)
          Lane #List(8): 
          x1245 = FixAdd(x1242,x1235)
          Lane #List(9): 
          x1245 = FixAdd(x1242,x1235)
          [x386] 0: x1245, 1: x1245, 2: x1245, 3: x1245, 4: x1245, 5: x1245, 6: x1245, 7: x1245, 8: x1245, 9: x1245
          Access: x387
          Memory: x324
          Iterators between x387 and x324: b28
          Unroll: Map(b20 -> List(2))
          uids:List(List(0))
          Unrolling x387 = SRAMWrite(x324,x386,List(b28),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1045)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1247 = SRAMBankedWrite(x572,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)))
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1045)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1248 = SRAMBankedWrite(x571,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)))
          x388 duplicate #List(3)/10 = x1250
          x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [x329]
          x330 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x330]
          x331 = CounterChainNew(List(x330)) [x331]
          x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) [x336]
          x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x337]
          x347 = UnitPipe(Set(),Block(Const(())),None) [x347]
          x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x348]
          x349 = RegNew(Const(false)) [x349]
          x350 = RegNew(Const(false)) [x350]
          x358 = UnitPipe(Set(),Block(Const(())),None) [x358]
          x359 = RegRead(x350) [x359]
          x360 = RegRead(x349) [x360]
          x373 = Switch(List(x360, x359),Block(x372)) [x373]
          x375 = UnitPipe(Set(),Block(Const(())),None) [x375]
          x376 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x376]
        
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1257 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1258 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1259 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1260 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x1261 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x1257
            (x329,1) -> x1258
            (x329,2) -> x1259
            (x329,3) -> x1260
            (x329,4) -> x1261
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1262 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1263 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1264 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1265 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x1266 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x1262
            (x329,1) -> x1263
            (x329,2) -> x1264
            (x329,3) -> x1265
            (x329,4) -> x1266
          Unrolling x330 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x1267 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x1268 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x330] 0: x1267, 1: x1268
          Unrolling x331 = CounterChainNew(List(x330))
          Lane #List(0): 
          x1269 = CounterChainNew(List(x1267))
          Lane #List(1): 
          x1270 = CounterChainNew(List(x1268))
          [x331] 0: x1269, 1: x1270
          Unrolling x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None)
          Duplicating controller x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) in lanes PartialUnroller(x388_map,x600,List(b27),false,true)
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List(3, 0, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,3,ArrayBuffer(3),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 3/0) = List(b550, b1271)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(0)
              x1277 = SRAMBankedRead(x471,Vector(List(x1273, Const(0))),Vector(x1276),Vector(Set(b1272, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List(3, 0, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(3))
            a2 = 
              lane 0 (castgrp/broadcast 0/3) = List(b1251, b1271)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(3)
              x1283 = SRAMBankedRead(x472,Vector(List(x1279, Const(0))),Vector(x1282),Vector(Set(b1272, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x1285 = FixSub(x1278,x1284)
            [x334] 0: x1285
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1271)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1286 = SRAMBankedWrite(x1260,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1271)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1287 = SRAMBankedWrite(x1259,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1271)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1288 = SRAMBankedWrite(x1258,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1271)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1289 = SRAMBankedWrite(x1257,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1271)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1290 = SRAMBankedWrite(x1261,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
          Created foreach x1291 = UnrolledForeach(Set(b1254, b560),x1269,Block(Const(())),List(List(b1271)),List(List(b1272)),None)
            x336 duplicate #List(1)/2 = x1291
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List(3, 1, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,3,ArrayBuffer(3),ArrayBuffer(1))
            a2 = 
              lane 0 (castgrp/broadcast 3/1) = List(b550, b1292)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(1)
              x1298 = SRAMBankedRead(x471,Vector(List(x1294, Const(0))),Vector(x1297),Vector(Set(b1293, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List(3, 1, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(3))
            a2 = 
              lane 0 (castgrp/broadcast 1/3) = List(b1252, b1292)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(3)
              x1304 = SRAMBankedRead(x472,Vector(List(x1300, Const(0))),Vector(x1303),Vector(Set(b1293, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x1306 = FixSub(x1299,x1305)
            [x334] 0: x1306
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1292)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1307 = SRAMBankedWrite(x1265,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1292)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1308 = SRAMBankedWrite(x1264,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1292)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1309 = SRAMBankedWrite(x1263,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1292)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1310 = SRAMBankedWrite(x1266,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1292)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1311 = SRAMBankedWrite(x1262,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
          Created foreach x1312 = UnrolledForeach(Set(b1255, b560),x1270,Block(Const(())),List(List(b1292)),List(List(b1293)),None)
            x336 duplicate #List(2)/2 = x1312
          [x336] 0: x1313
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x1314 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x1314
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x1315 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x1315
          Unrolling x347 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x347 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x600,List(b27),false,true)
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1316 = SRAMBankedRead(x1257,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x1318 = FixMul(x1317,x1317)
            [x339] 0: x1318
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1319 = SRAMBankedRead(x1258,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x1321 = FixMul(x1320,x1320)
            [x341] 0: x1321
            Unrolling x342 = FixAdd(x339,x341)
            x1322 = FixAdd(x1318,x1321)
            [x342] 0: x1322
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1323 = SRAMBankedRead(x1259,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x1325 = FixMul(x1324,x1324)
            [x344] 0: x1325
            Unrolling x345 = FixAdd(x342,x344)
            x1326 = FixAdd(x1322,x1325)
            [x345] 0: x1326
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1327 = SRAMBankedWrite(x1314,Vector(x1326),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(1)/2 = x1328
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1329 = SRAMBankedRead(x1262,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x1331 = FixMul(x1330,x1330)
            [x339] 0: x1331
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1332 = SRAMBankedRead(x1263,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x1334 = FixMul(x1333,x1333)
            [x341] 0: x1334
            Unrolling x342 = FixAdd(x339,x341)
            x1335 = FixAdd(x1331,x1334)
            [x342] 0: x1335
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1336 = SRAMBankedRead(x1264,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x1338 = FixMul(x1337,x1337)
            [x344] 0: x1338
            Unrolling x345 = FixAdd(x342,x344)
            x1339 = FixAdd(x1335,x1338)
            [x345] 0: x1339
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1340 = SRAMBankedWrite(x1315,Vector(x1339),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(2)/2 = x1341
          [x347] 0: x1342
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x1343 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x1343
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x1344 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x1344
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1345 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x1345
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1346 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x1346
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1347 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x1347
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1348 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x1348
          Unrolling x358 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x358 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x600,List(b27),false,true)
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1349 = SRAMBankedRead(x1314,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x1351 = FixLst(Const(0),x1350)
            [x352] 0: x1351
            Unrolling x353 = FixLst(Const(1),x351)
            x1352 = FixLst(Const(1),x1350)
            [x353] 0: x1352
            Unrolling x354 = And(x352,x353)
            x1353 = And(x1351,x1352)
            [x354] 0: x1353
            Unrolling x355 = Not(x354)
            x1354 = Not(x1353)
            [x355] 0: x1354
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1355 = RegWrite(x1345,x1353,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1356 = RegWrite(x1347,x1354,Set())
            x358 duplicate #List(1)/2 = x1357
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1358 = SRAMBankedRead(x1315,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x1360 = FixLst(Const(0),x1359)
            [x352] 0: x1360
            Unrolling x353 = FixLst(Const(1),x351)
            x1361 = FixLst(Const(1),x1359)
            [x353] 0: x1361
            Unrolling x354 = And(x352,x353)
            x1362 = And(x1360,x1361)
            [x354] 0: x1362
            Unrolling x355 = Not(x354)
            x1363 = Not(x1362)
            [x355] 0: x1363
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1364 = RegWrite(x1346,x1362,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1365 = RegWrite(x1348,x1363,Set())
            x358 duplicate #List(2)/2 = x1366
          [x358] 0: x1367
          Access: x359
          Memory: x350
          Iterators between x359 and x350: 
          Unroll: Map(b20 -> List(3))
          uids:List(List())
          uids:List(List())
          Unrolling x359 = RegRead(x350)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1368 = RegRead(x1348)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1369 = RegRead(x1347)
          Access: x360
          Memory: x349
          Iterators between x360 and x349: 
          Unroll: Map(b20 -> List(3))
          uids:List(List())
          uids:List(List())
          Unrolling x360 = RegRead(x349)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x1370 = RegRead(x1345)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x1371 = RegRead(x1346)
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(3), b27 -> List(0))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1372 = RegRead(x1345)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(3), b27 -> List(0))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1373 = SRAMBankedRead(x1314,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1372)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x1375 = FixDiv(Const(100),x1374)
              [x363] 0: x1375
              Unrolling x364 = FixDiv(x363,x362)
              x1376 = FixDiv(x1375,x1374)
              [x364] 0: x1376
              Unrolling x365 = FixDiv(x364,x362)
              x1377 = FixDiv(x1376,x1374)
              [x365] 0: x1377
              Unrolling x366 = FixDiv(x365,x362)
              x1378 = FixDiv(x1377,x1374)
              [x366] 0: x1378
              Unrolling x367 = FixDiv(x366,x362)
              x1379 = FixDiv(x1378,x1374)
              [x367] 0: x1379
              Unrolling x368 = FixDiv(Const(10),x362)
              x1380 = FixDiv(Const(10),x1374)
              [x368] 0: x1380
              Unrolling x369 = FixDiv(x368,x362)
              x1381 = FixDiv(x1380,x1374)
              [x369] 0: x1381
              Unrolling x370 = FixSub(x367,x369)
              x1382 = FixSub(x1379,x1381)
              [x370] 0: x1382
            [x371] 0: x1383
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x1384
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(3), b27 -> List(1))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1386 = RegRead(x1346)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(3), b27 -> List(1))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1387 = SRAMBankedRead(x1315,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1386)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x1389 = FixDiv(Const(100),x1388)
              [x363] 0: x1389
              Unrolling x364 = FixDiv(x363,x362)
              x1390 = FixDiv(x1389,x1388)
              [x364] 0: x1390
              Unrolling x365 = FixDiv(x364,x362)
              x1391 = FixDiv(x1390,x1388)
              [x365] 0: x1391
              Unrolling x366 = FixDiv(x365,x362)
              x1392 = FixDiv(x1391,x1388)
              [x366] 0: x1392
              Unrolling x367 = FixDiv(x366,x362)
              x1393 = FixDiv(x1392,x1388)
              [x367] 0: x1393
              Unrolling x368 = FixDiv(Const(10),x362)
              x1394 = FixDiv(Const(10),x1388)
              [x368] 0: x1394
              Unrolling x369 = FixDiv(x368,x362)
              x1395 = FixDiv(x1394,x1388)
              [x369] 0: x1395
              Unrolling x370 = FixSub(x367,x369)
              x1396 = FixSub(x1393,x1395)
              [x370] 0: x1396
            [x371] 0: x1397
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x1398
          Unrolling x375 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x375 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x600,List(b27),false,true)
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1400 = SRAMBankedWrite(x1343,Vector(x1385),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(1)/2 = x1401
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1402 = SRAMBankedWrite(x1344,Vector(x1399),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(2)/2 = x1403
          [x375] 0: x1404
          Unrolling x376 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x1405 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x1406 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x376] 0: x1405, 1: x1406
          Unrolling x377 = CounterChainNew(List(x376))
          Lane #List(0): 
          x1407 = CounterChainNew(List(x1405))
          Lane #List(1): 
          x1408 = CounterChainNew(List(x1406))
          [x377] 0: x1407, 1: x1408
          Unrolling x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None)
          Duplicating controller x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None) in lanes PartialUnroller(x388_map,x600,List(b27),false,true)
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1409)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1411 = SRAMBankedRead(x1260,Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x1413 = FixMul(x1412,Const(0.099999904632568359375))
            [x379] 0: x1413
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1414 = SRAMBankedRead(x1343,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x1416 = FixMul(x1413,x1415)
            [x381] 0: x1416
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(3), b27 -> List(0))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1409)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1417 = SRAMBankedWrite(x1260,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1409)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1418 = SRAMBankedWrite(x1259,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1409)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1419 = SRAMBankedWrite(x1258,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1409)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1420 = SRAMBankedWrite(x1257,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1409)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1421 = SRAMBankedWrite(x1261,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
          Created foreach x1422 = UnrolledForeach(Set(b1254, b560),x1407,Block(Const(())),List(List(b1409)),List(List(b1410)),None)
            x383 duplicate #List(1)/2 = x1422
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1423)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1425 = SRAMBankedRead(x1265,Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x1427 = FixMul(x1426,Const(0.099999904632568359375))
            [x379] 0: x1427
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1428 = SRAMBankedRead(x1344,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x1430 = FixMul(x1427,x1429)
            [x381] 0: x1430
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(3), b27 -> List(1))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1423)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1431 = SRAMBankedWrite(x1265,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1423)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1432 = SRAMBankedWrite(x1264,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1423)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1433 = SRAMBankedWrite(x1263,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1423)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1434 = SRAMBankedWrite(x1266,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1423)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1435 = SRAMBankedWrite(x1262,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
          Created foreach x1436 = UnrolledForeach(Set(b1255, b560),x1408,Block(Const(())),List(List(b1423)),List(List(b1424)),None)
            x383 duplicate #List(2)/2 = x1436
          [x383] 0: x1437
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(3), b27 -> List(0))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1253)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1438 = SRAMBankedRead(x1261,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(3), b27 -> List(1))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1253)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1440 = SRAMBankedRead(x1266,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
          Access: x385
          Memory: x324
          Iterators between x385 and x324: b28
          Unroll: Map(b20 -> List(3))
          uids:List(List(0))
          Unrolling x385 = SRAMRead(x324,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1253)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1442 = SRAMBankedRead(x573,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
        Creating Function0 with subst: {b29 -> x1439, b30 -> x1441}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x1449 = FixAdd(x1439,x1441)
          Lane #List(1): 
          x1449 = FixAdd(x1439,x1441)
          Lane #List(2): 
          x1449 = FixAdd(x1439,x1441)
          Lane #List(3): 
          x1449 = FixAdd(x1439,x1441)
          Lane #List(4): 
          x1449 = FixAdd(x1439,x1441)
          Lane #List(5): 
          x1449 = FixAdd(x1439,x1441)
          Lane #List(6): 
          x1449 = FixAdd(x1439,x1441)
          Lane #List(7): 
          x1449 = FixAdd(x1439,x1441)
          Lane #List(8): 
          x1449 = FixAdd(x1439,x1441)
          Lane #List(9): 
          x1449 = FixAdd(x1439,x1441)
          [x386] 0: x1449, 1: x1449, 2: x1449, 3: x1449, 4: x1449, 5: x1449, 6: x1449, 7: x1449, 8: x1449, 9: x1449
        Executing Function2 with inputs: x1450 and x1443
        Creating Function0 with subst: {b29 -> x1450, b30 -> x1443}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x1453 = FixAdd(x1450,x1443)
          Lane #List(1): 
          x1453 = FixAdd(x1450,x1443)
          Lane #List(2): 
          x1453 = FixAdd(x1450,x1443)
          Lane #List(3): 
          x1453 = FixAdd(x1450,x1443)
          Lane #List(4): 
          x1453 = FixAdd(x1450,x1443)
          Lane #List(5): 
          x1453 = FixAdd(x1450,x1443)
          Lane #List(6): 
          x1453 = FixAdd(x1450,x1443)
          Lane #List(7): 
          x1453 = FixAdd(x1450,x1443)
          Lane #List(8): 
          x1453 = FixAdd(x1450,x1443)
          Lane #List(9): 
          x1453 = FixAdd(x1450,x1443)
          [x386] 0: x1453, 1: x1453, 2: x1453, 3: x1453, 4: x1453, 5: x1453, 6: x1453, 7: x1453, 8: x1453, 9: x1453
          Access: x387
          Memory: x324
          Iterators between x387 and x324: b28
          Unroll: Map(b20 -> List(3))
          uids:List(List(0))
          Unrolling x387 = SRAMWrite(x324,x386,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1253)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1455 = SRAMBankedWrite(x573,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)))
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1253)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1456 = SRAMBankedWrite(x574,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)))
          x388 duplicate #List(4)/10 = x1458
          x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [x329]
          x330 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x330]
          x331 = CounterChainNew(List(x330)) [x331]
          x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) [x336]
          x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x337]
          x347 = UnitPipe(Set(),Block(Const(())),None) [x347]
          x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x348]
          x349 = RegNew(Const(false)) [x349]
          x350 = RegNew(Const(false)) [x350]
          x358 = UnitPipe(Set(),Block(Const(())),None) [x358]
          x359 = RegRead(x350) [x359]
          x360 = RegRead(x349) [x360]
          x373 = Switch(List(x360, x359),Block(x372)) [x373]
          x375 = UnitPipe(Set(),Block(Const(())),None) [x375]
          x376 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x376]
        
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1465 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1466 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1467 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1468 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x1469 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x1465
            (x329,1) -> x1466
            (x329,2) -> x1467
            (x329,3) -> x1468
            (x329,4) -> x1469
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1470 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1471 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1472 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1473 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x1474 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x1470
            (x329,1) -> x1471
            (x329,2) -> x1472
            (x329,3) -> x1473
            (x329,4) -> x1474
          Unrolling x330 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x1475 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x1476 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x330] 0: x1475, 1: x1476
          Unrolling x331 = CounterChainNew(List(x330))
          Lane #List(0): 
          x1477 = CounterChainNew(List(x1475))
          Lane #List(1): 
          x1478 = CounterChainNew(List(x1476))
          [x331] 0: x1477, 1: x1478
          Unrolling x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None)
          Duplicating controller x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) in lanes PartialUnroller(x388_map,x601,List(b27),false,true)
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List(4, 0, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,4,ArrayBuffer(4),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 4/0) = List(b551, b1479)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(4) broadcast:List(0)
              x1485 = SRAMBankedRead(x471,Vector(List(x1481, Const(0))),Vector(x1484),Vector(Set(b1480, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List(4, 0, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(4))
            a2 = 
              lane 0 (castgrp/broadcast 0/4) = List(b1459, b1479)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(4)
              x1491 = SRAMBankedRead(x472,Vector(List(x1487, Const(0))),Vector(x1490),Vector(Set(b1480, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x1493 = FixSub(x1486,x1492)
            [x334] 0: x1493
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1479)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1494 = SRAMBankedWrite(x1469,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1479)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1495 = SRAMBankedWrite(x1465,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1479)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1496 = SRAMBankedWrite(x1466,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1479)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1497 = SRAMBankedWrite(x1467,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1479)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1498 = SRAMBankedWrite(x1468,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
          Created foreach x1499 = UnrolledForeach(Set(b1462, b561),x1477,Block(Const(())),List(List(b1479)),List(List(b1480)),None)
            x336 duplicate #List(1)/2 = x1499
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List(4, 1, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,4,ArrayBuffer(4),ArrayBuffer(1))
            a2 = 
              lane 0 (castgrp/broadcast 4/1) = List(b551, b1500)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(4) broadcast:List(1)
              x1506 = SRAMBankedRead(x471,Vector(List(x1502, Const(0))),Vector(x1505),Vector(Set(b1501, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List(4, 1, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(4))
            a2 = 
              lane 0 (castgrp/broadcast 1/4) = List(b1460, b1500)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(4)
              x1512 = SRAMBankedRead(x472,Vector(List(x1508, Const(0))),Vector(x1511),Vector(Set(b1501, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x1514 = FixSub(x1507,x1513)
            [x334] 0: x1514
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1500)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1515 = SRAMBankedWrite(x1470,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1500)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1516 = SRAMBankedWrite(x1471,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1500)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1517 = SRAMBankedWrite(x1474,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1500)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1518 = SRAMBankedWrite(x1472,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1500)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1519 = SRAMBankedWrite(x1473,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
          Created foreach x1520 = UnrolledForeach(Set(b1463, b561),x1478,Block(Const(())),List(List(b1500)),List(List(b1501)),None)
            x336 duplicate #List(2)/2 = x1520
          [x336] 0: x1521
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x1522 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x1522
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x1523 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x1523
          Unrolling x347 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x347 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x601,List(b27),false,true)
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1524 = SRAMBankedRead(x1465,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x1526 = FixMul(x1525,x1525)
            [x339] 0: x1526
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1527 = SRAMBankedRead(x1466,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x1529 = FixMul(x1528,x1528)
            [x341] 0: x1529
            Unrolling x342 = FixAdd(x339,x341)
            x1530 = FixAdd(x1526,x1529)
            [x342] 0: x1530
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1531 = SRAMBankedRead(x1467,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x1533 = FixMul(x1532,x1532)
            [x344] 0: x1533
            Unrolling x345 = FixAdd(x342,x344)
            x1534 = FixAdd(x1530,x1533)
            [x345] 0: x1534
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1535 = SRAMBankedWrite(x1522,Vector(x1534),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(1)/2 = x1536
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1537 = SRAMBankedRead(x1470,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x1539 = FixMul(x1538,x1538)
            [x339] 0: x1539
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1540 = SRAMBankedRead(x1471,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x1542 = FixMul(x1541,x1541)
            [x341] 0: x1542
            Unrolling x342 = FixAdd(x339,x341)
            x1543 = FixAdd(x1539,x1542)
            [x342] 0: x1543
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1544 = SRAMBankedRead(x1472,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x1546 = FixMul(x1545,x1545)
            [x344] 0: x1546
            Unrolling x345 = FixAdd(x342,x344)
            x1547 = FixAdd(x1543,x1546)
            [x345] 0: x1547
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1548 = SRAMBankedWrite(x1523,Vector(x1547),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(2)/2 = x1549
          [x347] 0: x1550
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x1551 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x1551
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x1552 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x1552
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1553 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x1553
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1554 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x1554
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1555 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x1555
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1556 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x1556
          Unrolling x358 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x358 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x601,List(b27),false,true)
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1557 = SRAMBankedRead(x1522,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x1559 = FixLst(Const(0),x1558)
            [x352] 0: x1559
            Unrolling x353 = FixLst(Const(1),x351)
            x1560 = FixLst(Const(1),x1558)
            [x353] 0: x1560
            Unrolling x354 = And(x352,x353)
            x1561 = And(x1559,x1560)
            [x354] 0: x1561
            Unrolling x355 = Not(x354)
            x1562 = Not(x1561)
            [x355] 0: x1562
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1563 = RegWrite(x1553,x1561,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1564 = RegWrite(x1555,x1562,Set())
            x358 duplicate #List(1)/2 = x1565
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1566 = SRAMBankedRead(x1523,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x1568 = FixLst(Const(0),x1567)
            [x352] 0: x1568
            Unrolling x353 = FixLst(Const(1),x351)
            x1569 = FixLst(Const(1),x1567)
            [x353] 0: x1569
            Unrolling x354 = And(x352,x353)
            x1570 = And(x1568,x1569)
            [x354] 0: x1570
            Unrolling x355 = Not(x354)
            x1571 = Not(x1570)
            [x355] 0: x1571
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1572 = RegWrite(x1554,x1570,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1573 = RegWrite(x1556,x1571,Set())
            x358 duplicate #List(2)/2 = x1574
          [x358] 0: x1575
          Access: x359
          Memory: x350
          Iterators between x359 and x350: 
          Unroll: Map(b20 -> List(4))
          uids:List(List())
          uids:List(List())
          Unrolling x359 = RegRead(x350)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1576 = RegRead(x1556)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1577 = RegRead(x1555)
          Access: x360
          Memory: x349
          Iterators between x360 and x349: 
          Unroll: Map(b20 -> List(4))
          uids:List(List())
          uids:List(List())
          Unrolling x360 = RegRead(x349)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x1578 = RegRead(x1554)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x1579 = RegRead(x1553)
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(4), b27 -> List(0))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1580 = RegRead(x1553)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(4), b27 -> List(0))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1581 = SRAMBankedRead(x1522,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1580)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x1583 = FixDiv(Const(100),x1582)
              [x363] 0: x1583
              Unrolling x364 = FixDiv(x363,x362)
              x1584 = FixDiv(x1583,x1582)
              [x364] 0: x1584
              Unrolling x365 = FixDiv(x364,x362)
              x1585 = FixDiv(x1584,x1582)
              [x365] 0: x1585
              Unrolling x366 = FixDiv(x365,x362)
              x1586 = FixDiv(x1585,x1582)
              [x366] 0: x1586
              Unrolling x367 = FixDiv(x366,x362)
              x1587 = FixDiv(x1586,x1582)
              [x367] 0: x1587
              Unrolling x368 = FixDiv(Const(10),x362)
              x1588 = FixDiv(Const(10),x1582)
              [x368] 0: x1588
              Unrolling x369 = FixDiv(x368,x362)
              x1589 = FixDiv(x1588,x1582)
              [x369] 0: x1589
              Unrolling x370 = FixSub(x367,x369)
              x1590 = FixSub(x1587,x1589)
              [x370] 0: x1590
            [x371] 0: x1591
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x1592
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(4), b27 -> List(1))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1594 = RegRead(x1554)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(4), b27 -> List(1))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1595 = SRAMBankedRead(x1523,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1594)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x1597 = FixDiv(Const(100),x1596)
              [x363] 0: x1597
              Unrolling x364 = FixDiv(x363,x362)
              x1598 = FixDiv(x1597,x1596)
              [x364] 0: x1598
              Unrolling x365 = FixDiv(x364,x362)
              x1599 = FixDiv(x1598,x1596)
              [x365] 0: x1599
              Unrolling x366 = FixDiv(x365,x362)
              x1600 = FixDiv(x1599,x1596)
              [x366] 0: x1600
              Unrolling x367 = FixDiv(x366,x362)
              x1601 = FixDiv(x1600,x1596)
              [x367] 0: x1601
              Unrolling x368 = FixDiv(Const(10),x362)
              x1602 = FixDiv(Const(10),x1596)
              [x368] 0: x1602
              Unrolling x369 = FixDiv(x368,x362)
              x1603 = FixDiv(x1602,x1596)
              [x369] 0: x1603
              Unrolling x370 = FixSub(x367,x369)
              x1604 = FixSub(x1601,x1603)
              [x370] 0: x1604
            [x371] 0: x1605
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x1606
          Unrolling x375 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x375 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x601,List(b27),false,true)
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1608 = SRAMBankedWrite(x1551,Vector(x1593),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(1)/2 = x1609
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1610 = SRAMBankedWrite(x1552,Vector(x1607),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(2)/2 = x1611
          [x375] 0: x1612
          Unrolling x376 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x1613 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x1614 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x376] 0: x1613, 1: x1614
          Unrolling x377 = CounterChainNew(List(x376))
          Lane #List(0): 
          x1615 = CounterChainNew(List(x1613))
          Lane #List(1): 
          x1616 = CounterChainNew(List(x1614))
          [x377] 0: x1615, 1: x1616
          Unrolling x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None)
          Duplicating controller x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None) in lanes PartialUnroller(x388_map,x601,List(b27),false,true)
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1617)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1619 = SRAMBankedRead(x1468,Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x1621 = FixMul(x1620,Const(0.099999904632568359375))
            [x379] 0: x1621
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1622 = SRAMBankedRead(x1551,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x1624 = FixMul(x1621,x1623)
            [x381] 0: x1624
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(4), b27 -> List(0))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1617)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1625 = SRAMBankedWrite(x1469,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1617)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1626 = SRAMBankedWrite(x1465,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1617)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1627 = SRAMBankedWrite(x1466,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1617)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1628 = SRAMBankedWrite(x1467,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1617)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1629 = SRAMBankedWrite(x1468,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
          Created foreach x1630 = UnrolledForeach(Set(b1462, b561),x1615,Block(Const(())),List(List(b1617)),List(List(b1618)),None)
            x383 duplicate #List(1)/2 = x1630
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1631)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1633 = SRAMBankedRead(x1473,Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x1635 = FixMul(x1634,Const(0.099999904632568359375))
            [x379] 0: x1635
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1636 = SRAMBankedRead(x1552,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x1638 = FixMul(x1635,x1637)
            [x381] 0: x1638
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(4), b27 -> List(1))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1631)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1639 = SRAMBankedWrite(x1470,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1631)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1640 = SRAMBankedWrite(x1471,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1631)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1641 = SRAMBankedWrite(x1474,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1631)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1642 = SRAMBankedWrite(x1472,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1631)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1643 = SRAMBankedWrite(x1473,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
          Created foreach x1644 = UnrolledForeach(Set(b1463, b561),x1616,Block(Const(())),List(List(b1631)),List(List(b1632)),None)
            x383 duplicate #List(2)/2 = x1644
          [x383] 0: x1645
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(4), b27 -> List(0))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1461)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1646 = SRAMBankedRead(x1469,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(4), b27 -> List(1))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1461)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1648 = SRAMBankedRead(x1474,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
          Access: x385
          Memory: x324
          Iterators between x385 and x324: b28
          Unroll: Map(b20 -> List(4))
          uids:List(List(0))
          Unrolling x385 = SRAMRead(x324,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1461)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1650 = SRAMBankedRead(x575,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
        Creating Function0 with subst: {b29 -> x1647, b30 -> x1649}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x1657 = FixAdd(x1647,x1649)
          Lane #List(1): 
          x1657 = FixAdd(x1647,x1649)
          Lane #List(2): 
          x1657 = FixAdd(x1647,x1649)
          Lane #List(3): 
          x1657 = FixAdd(x1647,x1649)
          Lane #List(4): 
          x1657 = FixAdd(x1647,x1649)
          Lane #List(5): 
          x1657 = FixAdd(x1647,x1649)
          Lane #List(6): 
          x1657 = FixAdd(x1647,x1649)
          Lane #List(7): 
          x1657 = FixAdd(x1647,x1649)
          Lane #List(8): 
          x1657 = FixAdd(x1647,x1649)
          Lane #List(9): 
          x1657 = FixAdd(x1647,x1649)
          [x386] 0: x1657, 1: x1657, 2: x1657, 3: x1657, 4: x1657, 5: x1657, 6: x1657, 7: x1657, 8: x1657, 9: x1657
        Executing Function2 with inputs: x1658 and x1651
        Creating Function0 with subst: {b29 -> x1658, b30 -> x1651}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x1661 = FixAdd(x1658,x1651)
          Lane #List(1): 
          x1661 = FixAdd(x1658,x1651)
          Lane #List(2): 
          x1661 = FixAdd(x1658,x1651)
          Lane #List(3): 
          x1661 = FixAdd(x1658,x1651)
          Lane #List(4): 
          x1661 = FixAdd(x1658,x1651)
          Lane #List(5): 
          x1661 = FixAdd(x1658,x1651)
          Lane #List(6): 
          x1661 = FixAdd(x1658,x1651)
          Lane #List(7): 
          x1661 = FixAdd(x1658,x1651)
          Lane #List(8): 
          x1661 = FixAdd(x1658,x1651)
          Lane #List(9): 
          x1661 = FixAdd(x1658,x1651)
          [x386] 0: x1661, 1: x1661, 2: x1661, 3: x1661, 4: x1661, 5: x1661, 6: x1661, 7: x1661, 8: x1661, 9: x1661
          Access: x387
          Memory: x324
          Iterators between x387 and x324: b28
          Unroll: Map(b20 -> List(4))
          uids:List(List(0))
          Unrolling x387 = SRAMWrite(x324,x386,List(b28),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1461)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1663 = SRAMBankedWrite(x576,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)))
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1461)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1664 = SRAMBankedWrite(x575,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)))
          x388 duplicate #List(5)/10 = x1666
          x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [x329]
          x330 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x330]
          x331 = CounterChainNew(List(x330)) [x331]
          x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) [x336]
          x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x337]
          x347 = UnitPipe(Set(),Block(Const(())),None) [x347]
          x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x348]
          x349 = RegNew(Const(false)) [x349]
          x350 = RegNew(Const(false)) [x350]
          x358 = UnitPipe(Set(),Block(Const(())),None) [x358]
          x359 = RegRead(x350) [x359]
          x360 = RegRead(x349) [x360]
          x373 = Switch(List(x360, x359),Block(x372)) [x373]
          x375 = UnitPipe(Set(),Block(Const(())),None) [x375]
          x376 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x376]
        
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1673 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1674 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1675 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1676 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x1677 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x1673
            (x329,1) -> x1674
            (x329,2) -> x1675
            (x329,3) -> x1676
            (x329,4) -> x1677
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1678 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1679 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1680 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1681 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x1682 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x1678
            (x329,1) -> x1679
            (x329,2) -> x1680
            (x329,3) -> x1681
            (x329,4) -> x1682
          Unrolling x330 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x1683 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x1684 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x330] 0: x1683, 1: x1684
          Unrolling x331 = CounterChainNew(List(x330))
          Lane #List(0): 
          x1685 = CounterChainNew(List(x1683))
          Lane #List(1): 
          x1686 = CounterChainNew(List(x1684))
          [x331] 0: x1685, 1: x1686
          Unrolling x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None)
          Duplicating controller x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) in lanes PartialUnroller(x388_map,x602,List(b27),false,true)
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List(5, 0, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,5,ArrayBuffer(5),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 5/0) = List(b552, b1687)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(5) broadcast:List(0)
              x1693 = SRAMBankedRead(x471,Vector(List(x1689, Const(0))),Vector(x1692),Vector(Set(b1688, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List(5, 0, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(5))
            a2 = 
              lane 0 (castgrp/broadcast 0/5) = List(b1667, b1687)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(5)
              x1699 = SRAMBankedRead(x472,Vector(List(x1695, Const(0))),Vector(x1698),Vector(Set(b1688, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x1701 = FixSub(x1694,x1700)
            [x334] 0: x1701
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1687)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1702 = SRAMBankedWrite(x1677,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1687)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1703 = SRAMBankedWrite(x1676,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1687)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1704 = SRAMBankedWrite(x1675,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1687)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1705 = SRAMBankedWrite(x1674,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1687)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1706 = SRAMBankedWrite(x1673,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
          Created foreach x1707 = UnrolledForeach(Set(b1670, b562),x1685,Block(Const(())),List(List(b1687)),List(List(b1688)),None)
            x336 duplicate #List(1)/2 = x1707
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List(5, 1, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,5,ArrayBuffer(5),ArrayBuffer(1))
            a2 = 
              lane 0 (castgrp/broadcast 5/1) = List(b552, b1708)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(5) broadcast:List(1)
              x1714 = SRAMBankedRead(x471,Vector(List(x1710, Const(0))),Vector(x1713),Vector(Set(b1709, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List(5, 1, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(5))
            a2 = 
              lane 0 (castgrp/broadcast 1/5) = List(b1668, b1708)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(5)
              x1720 = SRAMBankedRead(x472,Vector(List(x1716, Const(0))),Vector(x1719),Vector(Set(b1709, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x1722 = FixSub(x1715,x1721)
            [x334] 0: x1722
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1708)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1723 = SRAMBankedWrite(x1682,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1708)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1724 = SRAMBankedWrite(x1680,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1708)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1725 = SRAMBankedWrite(x1679,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1708)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1726 = SRAMBankedWrite(x1678,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1708)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1727 = SRAMBankedWrite(x1681,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
          Created foreach x1728 = UnrolledForeach(Set(b1671, b562),x1686,Block(Const(())),List(List(b1708)),List(List(b1709)),None)
            x336 duplicate #List(2)/2 = x1728
          [x336] 0: x1729
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x1730 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x1730
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x1731 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x1731
          Unrolling x347 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x347 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x602,List(b27),false,true)
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1732 = SRAMBankedRead(x1673,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x1734 = FixMul(x1733,x1733)
            [x339] 0: x1734
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1735 = SRAMBankedRead(x1674,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x1737 = FixMul(x1736,x1736)
            [x341] 0: x1737
            Unrolling x342 = FixAdd(x339,x341)
            x1738 = FixAdd(x1734,x1737)
            [x342] 0: x1738
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1739 = SRAMBankedRead(x1675,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x1741 = FixMul(x1740,x1740)
            [x344] 0: x1741
            Unrolling x345 = FixAdd(x342,x344)
            x1742 = FixAdd(x1738,x1741)
            [x345] 0: x1742
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1743 = SRAMBankedWrite(x1730,Vector(x1742),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(1)/2 = x1744
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1745 = SRAMBankedRead(x1678,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x1747 = FixMul(x1746,x1746)
            [x339] 0: x1747
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1748 = SRAMBankedRead(x1679,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x1750 = FixMul(x1749,x1749)
            [x341] 0: x1750
            Unrolling x342 = FixAdd(x339,x341)
            x1751 = FixAdd(x1747,x1750)
            [x342] 0: x1751
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1752 = SRAMBankedRead(x1680,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x1754 = FixMul(x1753,x1753)
            [x344] 0: x1754
            Unrolling x345 = FixAdd(x342,x344)
            x1755 = FixAdd(x1751,x1754)
            [x345] 0: x1755
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1756 = SRAMBankedWrite(x1731,Vector(x1755),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(2)/2 = x1757
          [x347] 0: x1758
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x1759 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x1759
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x1760 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x1760
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1761 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x1761
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1762 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x1762
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1763 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x1763
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1764 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x1764
          Unrolling x358 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x358 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x602,List(b27),false,true)
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1765 = SRAMBankedRead(x1730,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x1767 = FixLst(Const(0),x1766)
            [x352] 0: x1767
            Unrolling x353 = FixLst(Const(1),x351)
            x1768 = FixLst(Const(1),x1766)
            [x353] 0: x1768
            Unrolling x354 = And(x352,x353)
            x1769 = And(x1767,x1768)
            [x354] 0: x1769
            Unrolling x355 = Not(x354)
            x1770 = Not(x1769)
            [x355] 0: x1770
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1771 = RegWrite(x1761,x1769,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1772 = RegWrite(x1763,x1770,Set())
            x358 duplicate #List(1)/2 = x1773
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1774 = SRAMBankedRead(x1731,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x1776 = FixLst(Const(0),x1775)
            [x352] 0: x1776
            Unrolling x353 = FixLst(Const(1),x351)
            x1777 = FixLst(Const(1),x1775)
            [x353] 0: x1777
            Unrolling x354 = And(x352,x353)
            x1778 = And(x1776,x1777)
            [x354] 0: x1778
            Unrolling x355 = Not(x354)
            x1779 = Not(x1778)
            [x355] 0: x1779
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1780 = RegWrite(x1762,x1778,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1781 = RegWrite(x1764,x1779,Set())
            x358 duplicate #List(2)/2 = x1782
          [x358] 0: x1783
          Access: x359
          Memory: x350
          Iterators between x359 and x350: 
          Unroll: Map(b20 -> List(5))
          uids:List(List())
          uids:List(List())
          Unrolling x359 = RegRead(x350)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1784 = RegRead(x1764)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1785 = RegRead(x1763)
          Access: x360
          Memory: x349
          Iterators between x360 and x349: 
          Unroll: Map(b20 -> List(5))
          uids:List(List())
          uids:List(List())
          Unrolling x360 = RegRead(x349)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x1786 = RegRead(x1761)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x1787 = RegRead(x1762)
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(5), b27 -> List(0))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1788 = RegRead(x1761)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(5), b27 -> List(0))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1789 = SRAMBankedRead(x1730,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1788)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x1791 = FixDiv(Const(100),x1790)
              [x363] 0: x1791
              Unrolling x364 = FixDiv(x363,x362)
              x1792 = FixDiv(x1791,x1790)
              [x364] 0: x1792
              Unrolling x365 = FixDiv(x364,x362)
              x1793 = FixDiv(x1792,x1790)
              [x365] 0: x1793
              Unrolling x366 = FixDiv(x365,x362)
              x1794 = FixDiv(x1793,x1790)
              [x366] 0: x1794
              Unrolling x367 = FixDiv(x366,x362)
              x1795 = FixDiv(x1794,x1790)
              [x367] 0: x1795
              Unrolling x368 = FixDiv(Const(10),x362)
              x1796 = FixDiv(Const(10),x1790)
              [x368] 0: x1796
              Unrolling x369 = FixDiv(x368,x362)
              x1797 = FixDiv(x1796,x1790)
              [x369] 0: x1797
              Unrolling x370 = FixSub(x367,x369)
              x1798 = FixSub(x1795,x1797)
              [x370] 0: x1798
            [x371] 0: x1799
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x1800
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(5), b27 -> List(1))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1802 = RegRead(x1762)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(5), b27 -> List(1))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1803 = SRAMBankedRead(x1731,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1802)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x1805 = FixDiv(Const(100),x1804)
              [x363] 0: x1805
              Unrolling x364 = FixDiv(x363,x362)
              x1806 = FixDiv(x1805,x1804)
              [x364] 0: x1806
              Unrolling x365 = FixDiv(x364,x362)
              x1807 = FixDiv(x1806,x1804)
              [x365] 0: x1807
              Unrolling x366 = FixDiv(x365,x362)
              x1808 = FixDiv(x1807,x1804)
              [x366] 0: x1808
              Unrolling x367 = FixDiv(x366,x362)
              x1809 = FixDiv(x1808,x1804)
              [x367] 0: x1809
              Unrolling x368 = FixDiv(Const(10),x362)
              x1810 = FixDiv(Const(10),x1804)
              [x368] 0: x1810
              Unrolling x369 = FixDiv(x368,x362)
              x1811 = FixDiv(x1810,x1804)
              [x369] 0: x1811
              Unrolling x370 = FixSub(x367,x369)
              x1812 = FixSub(x1809,x1811)
              [x370] 0: x1812
            [x371] 0: x1813
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x1814
          Unrolling x375 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x375 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x602,List(b27),false,true)
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1816 = SRAMBankedWrite(x1759,Vector(x1801),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(1)/2 = x1817
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1818 = SRAMBankedWrite(x1760,Vector(x1815),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(2)/2 = x1819
          [x375] 0: x1820
          Unrolling x376 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x1821 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x1822 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x376] 0: x1821, 1: x1822
          Unrolling x377 = CounterChainNew(List(x376))
          Lane #List(0): 
          x1823 = CounterChainNew(List(x1821))
          Lane #List(1): 
          x1824 = CounterChainNew(List(x1822))
          [x377] 0: x1823, 1: x1824
          Unrolling x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None)
          Duplicating controller x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None) in lanes PartialUnroller(x388_map,x602,List(b27),false,true)
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1825)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1827 = SRAMBankedRead(x1676,Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x1829 = FixMul(x1828,Const(0.099999904632568359375))
            [x379] 0: x1829
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1830 = SRAMBankedRead(x1759,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x1832 = FixMul(x1829,x1831)
            [x381] 0: x1832
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(5), b27 -> List(0))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1825)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1833 = SRAMBankedWrite(x1677,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1825)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1834 = SRAMBankedWrite(x1676,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1825)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1835 = SRAMBankedWrite(x1675,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1825)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1836 = SRAMBankedWrite(x1674,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1825)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1837 = SRAMBankedWrite(x1673,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
          Created foreach x1838 = UnrolledForeach(Set(b1670, b562),x1823,Block(Const(())),List(List(b1825)),List(List(b1826)),None)
            x383 duplicate #List(1)/2 = x1838
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1839)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1841 = SRAMBankedRead(x1681,Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x1843 = FixMul(x1842,Const(0.099999904632568359375))
            [x379] 0: x1843
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1844 = SRAMBankedRead(x1760,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x1846 = FixMul(x1843,x1845)
            [x381] 0: x1846
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(5), b27 -> List(1))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1839)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1847 = SRAMBankedWrite(x1682,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1839)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1848 = SRAMBankedWrite(x1680,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1839)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1849 = SRAMBankedWrite(x1679,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1839)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1850 = SRAMBankedWrite(x1678,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1839)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1851 = SRAMBankedWrite(x1681,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
          Created foreach x1852 = UnrolledForeach(Set(b1671, b562),x1824,Block(Const(())),List(List(b1839)),List(List(b1840)),None)
            x383 duplicate #List(2)/2 = x1852
          [x383] 0: x1853
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(5), b27 -> List(0))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1669)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1854 = SRAMBankedRead(x1677,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(5), b27 -> List(1))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1669)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1856 = SRAMBankedRead(x1682,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
          Access: x385
          Memory: x324
          Iterators between x385 and x324: b28
          Unroll: Map(b20 -> List(5))
          uids:List(List(0))
          Unrolling x385 = SRAMRead(x324,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1669)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1858 = SRAMBankedRead(x577,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
        Creating Function0 with subst: {b29 -> x1855, b30 -> x1857}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x1865 = FixAdd(x1855,x1857)
          Lane #List(1): 
          x1865 = FixAdd(x1855,x1857)
          Lane #List(2): 
          x1865 = FixAdd(x1855,x1857)
          Lane #List(3): 
          x1865 = FixAdd(x1855,x1857)
          Lane #List(4): 
          x1865 = FixAdd(x1855,x1857)
          Lane #List(5): 
          x1865 = FixAdd(x1855,x1857)
          Lane #List(6): 
          x1865 = FixAdd(x1855,x1857)
          Lane #List(7): 
          x1865 = FixAdd(x1855,x1857)
          Lane #List(8): 
          x1865 = FixAdd(x1855,x1857)
          Lane #List(9): 
          x1865 = FixAdd(x1855,x1857)
          [x386] 0: x1865, 1: x1865, 2: x1865, 3: x1865, 4: x1865, 5: x1865, 6: x1865, 7: x1865, 8: x1865, 9: x1865
        Executing Function2 with inputs: x1866 and x1859
        Creating Function0 with subst: {b29 -> x1866, b30 -> x1859}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x1869 = FixAdd(x1866,x1859)
          Lane #List(1): 
          x1869 = FixAdd(x1866,x1859)
          Lane #List(2): 
          x1869 = FixAdd(x1866,x1859)
          Lane #List(3): 
          x1869 = FixAdd(x1866,x1859)
          Lane #List(4): 
          x1869 = FixAdd(x1866,x1859)
          Lane #List(5): 
          x1869 = FixAdd(x1866,x1859)
          Lane #List(6): 
          x1869 = FixAdd(x1866,x1859)
          Lane #List(7): 
          x1869 = FixAdd(x1866,x1859)
          Lane #List(8): 
          x1869 = FixAdd(x1866,x1859)
          Lane #List(9): 
          x1869 = FixAdd(x1866,x1859)
          [x386] 0: x1869, 1: x1869, 2: x1869, 3: x1869, 4: x1869, 5: x1869, 6: x1869, 7: x1869, 8: x1869, 9: x1869
          Access: x387
          Memory: x324
          Iterators between x387 and x324: b28
          Unroll: Map(b20 -> List(5))
          uids:List(List(0))
          Unrolling x387 = SRAMWrite(x324,x386,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1669)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1871 = SRAMBankedWrite(x577,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)))
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1669)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1872 = SRAMBankedWrite(x578,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)))
          x388 duplicate #List(6)/10 = x1874
          x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [x329]
          x330 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x330]
          x331 = CounterChainNew(List(x330)) [x331]
          x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) [x336]
          x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x337]
          x347 = UnitPipe(Set(),Block(Const(())),None) [x347]
          x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x348]
          x349 = RegNew(Const(false)) [x349]
          x350 = RegNew(Const(false)) [x350]
          x358 = UnitPipe(Set(),Block(Const(())),None) [x358]
          x359 = RegRead(x350) [x359]
          x360 = RegRead(x349) [x360]
          x373 = Switch(List(x360, x359),Block(x372)) [x373]
          x375 = UnitPipe(Set(),Block(Const(())),None) [x375]
          x376 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x376]
        
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1881 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1882 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1883 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1884 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x1885 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x1881
            (x329,1) -> x1882
            (x329,2) -> x1883
            (x329,3) -> x1884
            (x329,4) -> x1885
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1886 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1887 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1888 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x1889 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x1890 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x1886
            (x329,1) -> x1887
            (x329,2) -> x1888
            (x329,3) -> x1889
            (x329,4) -> x1890
          Unrolling x330 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x1891 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x1892 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x330] 0: x1891, 1: x1892
          Unrolling x331 = CounterChainNew(List(x330))
          Lane #List(0): 
          x1893 = CounterChainNew(List(x1891))
          Lane #List(1): 
          x1894 = CounterChainNew(List(x1892))
          [x331] 0: x1893, 1: x1894
          Unrolling x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None)
          Duplicating controller x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) in lanes PartialUnroller(x388_map,x603,List(b27),false,true)
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List(6, 0, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,6,ArrayBuffer(6),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 6/0) = List(b553, b1895)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(6) broadcast:List(0)
              x1901 = SRAMBankedRead(x471,Vector(List(x1897, Const(0))),Vector(x1900),Vector(Set(b1896, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List(6, 0, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(6))
            a2 = 
              lane 0 (castgrp/broadcast 0/6) = List(b1875, b1895)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(6)
              x1907 = SRAMBankedRead(x472,Vector(List(x1903, Const(0))),Vector(x1906),Vector(Set(b1896, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x1909 = FixSub(x1902,x1908)
            [x334] 0: x1909
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1895)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1910 = SRAMBankedWrite(x1882,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1895)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1911 = SRAMBankedWrite(x1883,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1895)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1912 = SRAMBankedWrite(x1884,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1895)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1913 = SRAMBankedWrite(x1881,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1895)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1914 = SRAMBankedWrite(x1885,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
          Created foreach x1915 = UnrolledForeach(Set(b1878, b563),x1893,Block(Const(())),List(List(b1895)),List(List(b1896)),None)
            x336 duplicate #List(1)/2 = x1915
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List(6, 1, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,6,ArrayBuffer(6),ArrayBuffer(1))
            a2 = 
              lane 0 (castgrp/broadcast 6/1) = List(b553, b1916)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(6) broadcast:List(1)
              x1922 = SRAMBankedRead(x471,Vector(List(x1918, Const(0))),Vector(x1921),Vector(Set(b1917, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List(6, 1, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(6))
            a2 = 
              lane 0 (castgrp/broadcast 1/6) = List(b1876, b1916)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(6)
              x1928 = SRAMBankedRead(x472,Vector(List(x1924, Const(0))),Vector(x1927),Vector(Set(b1917, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x1930 = FixSub(x1923,x1929)
            [x334] 0: x1930
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1916)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1931 = SRAMBankedWrite(x1887,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1916)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1932 = SRAMBankedWrite(x1890,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1916)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1933 = SRAMBankedWrite(x1886,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1916)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1934 = SRAMBankedWrite(x1888,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b1916)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1935 = SRAMBankedWrite(x1889,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
          Created foreach x1936 = UnrolledForeach(Set(b1879, b563),x1894,Block(Const(())),List(List(b1916)),List(List(b1917)),None)
            x336 duplicate #List(2)/2 = x1936
          [x336] 0: x1937
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x1938 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x1938
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x1939 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x1939
          Unrolling x347 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x347 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x603,List(b27),false,true)
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1940 = SRAMBankedRead(x1881,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x1942 = FixMul(x1941,x1941)
            [x339] 0: x1942
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1943 = SRAMBankedRead(x1882,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x1945 = FixMul(x1944,x1944)
            [x341] 0: x1945
            Unrolling x342 = FixAdd(x339,x341)
            x1946 = FixAdd(x1942,x1945)
            [x342] 0: x1946
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1947 = SRAMBankedRead(x1883,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x1949 = FixMul(x1948,x1948)
            [x344] 0: x1949
            Unrolling x345 = FixAdd(x342,x344)
            x1950 = FixAdd(x1946,x1949)
            [x345] 0: x1950
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1951 = SRAMBankedWrite(x1938,Vector(x1950),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(1)/2 = x1952
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1953 = SRAMBankedRead(x1886,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x1955 = FixMul(x1954,x1954)
            [x339] 0: x1955
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1956 = SRAMBankedRead(x1887,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x1958 = FixMul(x1957,x1957)
            [x341] 0: x1958
            Unrolling x342 = FixAdd(x339,x341)
            x1959 = FixAdd(x1955,x1958)
            [x342] 0: x1959
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1960 = SRAMBankedRead(x1888,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x1962 = FixMul(x1961,x1961)
            [x344] 0: x1962
            Unrolling x345 = FixAdd(x342,x344)
            x1963 = FixAdd(x1959,x1962)
            [x345] 0: x1963
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1964 = SRAMBankedWrite(x1939,Vector(x1963),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(2)/2 = x1965
          [x347] 0: x1966
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x1967 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x1967
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x1968 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x1968
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1969 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x1969
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1970 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x1970
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1971 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x1971
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x1972 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x1972
          Unrolling x358 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x358 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x603,List(b27),false,true)
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1973 = SRAMBankedRead(x1938,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x1975 = FixLst(Const(0),x1974)
            [x352] 0: x1975
            Unrolling x353 = FixLst(Const(1),x351)
            x1976 = FixLst(Const(1),x1974)
            [x353] 0: x1976
            Unrolling x354 = And(x352,x353)
            x1977 = And(x1975,x1976)
            [x354] 0: x1977
            Unrolling x355 = Not(x354)
            x1978 = Not(x1977)
            [x355] 0: x1978
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1979 = RegWrite(x1969,x1977,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1980 = RegWrite(x1971,x1978,Set())
            x358 duplicate #List(1)/2 = x1981
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1982 = SRAMBankedRead(x1939,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x1984 = FixLst(Const(0),x1983)
            [x352] 0: x1984
            Unrolling x353 = FixLst(Const(1),x351)
            x1985 = FixLst(Const(1),x1983)
            [x353] 0: x1985
            Unrolling x354 = And(x352,x353)
            x1986 = And(x1984,x1985)
            [x354] 0: x1986
            Unrolling x355 = Not(x354)
            x1987 = Not(x1986)
            [x355] 0: x1987
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1988 = RegWrite(x1970,x1986,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x1989 = RegWrite(x1972,x1987,Set())
            x358 duplicate #List(2)/2 = x1990
          [x358] 0: x1991
          Access: x359
          Memory: x350
          Iterators between x359 and x350: 
          Unroll: Map(b20 -> List(6))
          uids:List(List())
          uids:List(List())
          Unrolling x359 = RegRead(x350)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1992 = RegRead(x1972)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x1993 = RegRead(x1971)
          Access: x360
          Memory: x349
          Iterators between x360 and x349: 
          Unroll: Map(b20 -> List(6))
          uids:List(List())
          uids:List(List())
          Unrolling x360 = RegRead(x349)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x1994 = RegRead(x1970)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x1995 = RegRead(x1969)
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(6), b27 -> List(0))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1996 = RegRead(x1969)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(6), b27 -> List(0))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x1997 = SRAMBankedRead(x1938,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1996)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x1999 = FixDiv(Const(100),x1998)
              [x363] 0: x1999
              Unrolling x364 = FixDiv(x363,x362)
              x2000 = FixDiv(x1999,x1998)
              [x364] 0: x2000
              Unrolling x365 = FixDiv(x364,x362)
              x2001 = FixDiv(x2000,x1998)
              [x365] 0: x2001
              Unrolling x366 = FixDiv(x365,x362)
              x2002 = FixDiv(x2001,x1998)
              [x366] 0: x2002
              Unrolling x367 = FixDiv(x366,x362)
              x2003 = FixDiv(x2002,x1998)
              [x367] 0: x2003
              Unrolling x368 = FixDiv(Const(10),x362)
              x2004 = FixDiv(Const(10),x1998)
              [x368] 0: x2004
              Unrolling x369 = FixDiv(x368,x362)
              x2005 = FixDiv(x2004,x1998)
              [x369] 0: x2005
              Unrolling x370 = FixSub(x367,x369)
              x2006 = FixSub(x2003,x2005)
              [x370] 0: x2006
            [x371] 0: x2007
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x2008
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(6), b27 -> List(1))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2010 = RegRead(x1970)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(6), b27 -> List(1))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2011 = SRAMBankedRead(x1939,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2010)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x2013 = FixDiv(Const(100),x2012)
              [x363] 0: x2013
              Unrolling x364 = FixDiv(x363,x362)
              x2014 = FixDiv(x2013,x2012)
              [x364] 0: x2014
              Unrolling x365 = FixDiv(x364,x362)
              x2015 = FixDiv(x2014,x2012)
              [x365] 0: x2015
              Unrolling x366 = FixDiv(x365,x362)
              x2016 = FixDiv(x2015,x2012)
              [x366] 0: x2016
              Unrolling x367 = FixDiv(x366,x362)
              x2017 = FixDiv(x2016,x2012)
              [x367] 0: x2017
              Unrolling x368 = FixDiv(Const(10),x362)
              x2018 = FixDiv(Const(10),x2012)
              [x368] 0: x2018
              Unrolling x369 = FixDiv(x368,x362)
              x2019 = FixDiv(x2018,x2012)
              [x369] 0: x2019
              Unrolling x370 = FixSub(x367,x369)
              x2020 = FixSub(x2017,x2019)
              [x370] 0: x2020
            [x371] 0: x2021
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x2022
          Unrolling x375 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x375 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x603,List(b27),false,true)
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2024 = SRAMBankedWrite(x1967,Vector(x2009),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(1)/2 = x2025
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2026 = SRAMBankedWrite(x1968,Vector(x2023),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(2)/2 = x2027
          [x375] 0: x2028
          Unrolling x376 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x2029 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x2030 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x376] 0: x2029, 1: x2030
          Unrolling x377 = CounterChainNew(List(x376))
          Lane #List(0): 
          x2031 = CounterChainNew(List(x2029))
          Lane #List(1): 
          x2032 = CounterChainNew(List(x2030))
          [x377] 0: x2031, 1: x2032
          Unrolling x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None)
          Duplicating controller x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None) in lanes PartialUnroller(x388_map,x603,List(b27),false,true)
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2033)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2035 = SRAMBankedRead(x1884,Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x2037 = FixMul(x2036,Const(0.099999904632568359375))
            [x379] 0: x2037
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2038 = SRAMBankedRead(x1967,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x2040 = FixMul(x2037,x2039)
            [x381] 0: x2040
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(6), b27 -> List(0))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2033)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2041 = SRAMBankedWrite(x1882,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2033)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2042 = SRAMBankedWrite(x1883,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2033)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2043 = SRAMBankedWrite(x1884,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2033)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2044 = SRAMBankedWrite(x1881,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2033)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2045 = SRAMBankedWrite(x1885,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
          Created foreach x2046 = UnrolledForeach(Set(b1878, b563),x2031,Block(Const(())),List(List(b2033)),List(List(b2034)),None)
            x383 duplicate #List(1)/2 = x2046
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2047)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2049 = SRAMBankedRead(x1889,Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x2051 = FixMul(x2050,Const(0.099999904632568359375))
            [x379] 0: x2051
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2052 = SRAMBankedRead(x1968,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x2054 = FixMul(x2051,x2053)
            [x381] 0: x2054
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(6), b27 -> List(1))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2047)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2055 = SRAMBankedWrite(x1887,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2047)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2056 = SRAMBankedWrite(x1890,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2047)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2057 = SRAMBankedWrite(x1886,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2047)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2058 = SRAMBankedWrite(x1888,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2047)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2059 = SRAMBankedWrite(x1889,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
          Created foreach x2060 = UnrolledForeach(Set(b1879, b563),x2032,Block(Const(())),List(List(b2047)),List(List(b2048)),None)
            x383 duplicate #List(2)/2 = x2060
          [x383] 0: x2061
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(6), b27 -> List(0))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1877)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2062 = SRAMBankedRead(x1885,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(6), b27 -> List(1))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1877)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2064 = SRAMBankedRead(x1890,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
          Access: x385
          Memory: x324
          Iterators between x385 and x324: b28
          Unroll: Map(b20 -> List(6))
          uids:List(List(0))
          Unrolling x385 = SRAMRead(x324,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1877)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2066 = SRAMBankedRead(x579,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
        Creating Function0 with subst: {b29 -> x2063, b30 -> x2065}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x2073 = FixAdd(x2063,x2065)
          Lane #List(1): 
          x2073 = FixAdd(x2063,x2065)
          Lane #List(2): 
          x2073 = FixAdd(x2063,x2065)
          Lane #List(3): 
          x2073 = FixAdd(x2063,x2065)
          Lane #List(4): 
          x2073 = FixAdd(x2063,x2065)
          Lane #List(5): 
          x2073 = FixAdd(x2063,x2065)
          Lane #List(6): 
          x2073 = FixAdd(x2063,x2065)
          Lane #List(7): 
          x2073 = FixAdd(x2063,x2065)
          Lane #List(8): 
          x2073 = FixAdd(x2063,x2065)
          Lane #List(9): 
          x2073 = FixAdd(x2063,x2065)
          [x386] 0: x2073, 1: x2073, 2: x2073, 3: x2073, 4: x2073, 5: x2073, 6: x2073, 7: x2073, 8: x2073, 9: x2073
        Executing Function2 with inputs: x2074 and x2067
        Creating Function0 with subst: {b29 -> x2074, b30 -> x2067}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x2077 = FixAdd(x2074,x2067)
          Lane #List(1): 
          x2077 = FixAdd(x2074,x2067)
          Lane #List(2): 
          x2077 = FixAdd(x2074,x2067)
          Lane #List(3): 
          x2077 = FixAdd(x2074,x2067)
          Lane #List(4): 
          x2077 = FixAdd(x2074,x2067)
          Lane #List(5): 
          x2077 = FixAdd(x2074,x2067)
          Lane #List(6): 
          x2077 = FixAdd(x2074,x2067)
          Lane #List(7): 
          x2077 = FixAdd(x2074,x2067)
          Lane #List(8): 
          x2077 = FixAdd(x2074,x2067)
          Lane #List(9): 
          x2077 = FixAdd(x2074,x2067)
          [x386] 0: x2077, 1: x2077, 2: x2077, 3: x2077, 4: x2077, 5: x2077, 6: x2077, 7: x2077, 8: x2077, 9: x2077
          Access: x387
          Memory: x324
          Iterators between x387 and x324: b28
          Unroll: Map(b20 -> List(6))
          uids:List(List(0))
          Unrolling x387 = SRAMWrite(x324,x386,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1877)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2079 = SRAMBankedWrite(x579,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)))
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b1877)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2080 = SRAMBankedWrite(x580,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)))
          x388 duplicate #List(7)/10 = x2082
          x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [x329]
          x330 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x330]
          x331 = CounterChainNew(List(x330)) [x331]
          x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) [x336]
          x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x337]
          x347 = UnitPipe(Set(),Block(Const(())),None) [x347]
          x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x348]
          x349 = RegNew(Const(false)) [x349]
          x350 = RegNew(Const(false)) [x350]
          x358 = UnitPipe(Set(),Block(Const(())),None) [x358]
          x359 = RegRead(x350) [x359]
          x360 = RegRead(x349) [x360]
          x373 = Switch(List(x360, x359),Block(x372)) [x373]
          x375 = UnitPipe(Set(),Block(Const(())),None) [x375]
          x376 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x376]
        
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2089 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2090 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2091 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2092 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x2093 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x2089
            (x329,1) -> x2090
            (x329,2) -> x2091
            (x329,3) -> x2092
            (x329,4) -> x2093
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2094 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2095 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2096 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2097 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x2098 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x2094
            (x329,1) -> x2095
            (x329,2) -> x2096
            (x329,3) -> x2097
            (x329,4) -> x2098
          Unrolling x330 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x2099 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x2100 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x330] 0: x2099, 1: x2100
          Unrolling x331 = CounterChainNew(List(x330))
          Lane #List(0): 
          x2101 = CounterChainNew(List(x2099))
          Lane #List(1): 
          x2102 = CounterChainNew(List(x2100))
          [x331] 0: x2101, 1: x2102
          Unrolling x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None)
          Duplicating controller x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) in lanes PartialUnroller(x388_map,x604,List(b27),false,true)
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List(7, 0, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,7,ArrayBuffer(7),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 7/0) = List(b554, b2103)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(7) broadcast:List(0)
              x2109 = SRAMBankedRead(x471,Vector(List(x2105, Const(0))),Vector(x2108),Vector(Set(b2104, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List(7, 0, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(7))
            a2 = 
              lane 0 (castgrp/broadcast 0/7) = List(b2083, b2103)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(7)
              x2115 = SRAMBankedRead(x472,Vector(List(x2111, Const(0))),Vector(x2114),Vector(Set(b2104, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x2117 = FixSub(x2110,x2116)
            [x334] 0: x2117
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2103)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2118 = SRAMBankedWrite(x2090,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2103)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2119 = SRAMBankedWrite(x2093,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2103)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2120 = SRAMBankedWrite(x2089,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2103)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2121 = SRAMBankedWrite(x2092,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2103)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2122 = SRAMBankedWrite(x2091,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
          Created foreach x2123 = UnrolledForeach(Set(b2086, b564),x2101,Block(Const(())),List(List(b2103)),List(List(b2104)),None)
            x336 duplicate #List(1)/2 = x2123
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List(7, 1, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,7,ArrayBuffer(7),ArrayBuffer(1))
            a2 = 
              lane 0 (castgrp/broadcast 7/1) = List(b554, b2124)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(7) broadcast:List(1)
              x2130 = SRAMBankedRead(x471,Vector(List(x2126, Const(0))),Vector(x2129),Vector(Set(b2125, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List(7, 1, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(7))
            a2 = 
              lane 0 (castgrp/broadcast 1/7) = List(b2084, b2124)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(7)
              x2136 = SRAMBankedRead(x472,Vector(List(x2132, Const(0))),Vector(x2135),Vector(Set(b2125, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x2138 = FixSub(x2131,x2137)
            [x334] 0: x2138
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2124)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2139 = SRAMBankedWrite(x2094,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2124)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2140 = SRAMBankedWrite(x2097,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2124)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2141 = SRAMBankedWrite(x2096,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2124)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2142 = SRAMBankedWrite(x2098,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2124)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2143 = SRAMBankedWrite(x2095,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
          Created foreach x2144 = UnrolledForeach(Set(b2087, b564),x2102,Block(Const(())),List(List(b2124)),List(List(b2125)),None)
            x336 duplicate #List(2)/2 = x2144
          [x336] 0: x2145
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x2146 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x2146
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x2147 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x2147
          Unrolling x347 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x347 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x604,List(b27),false,true)
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2148 = SRAMBankedRead(x2089,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x2150 = FixMul(x2149,x2149)
            [x339] 0: x2150
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2151 = SRAMBankedRead(x2090,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x2153 = FixMul(x2152,x2152)
            [x341] 0: x2153
            Unrolling x342 = FixAdd(x339,x341)
            x2154 = FixAdd(x2150,x2153)
            [x342] 0: x2154
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2155 = SRAMBankedRead(x2091,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x2157 = FixMul(x2156,x2156)
            [x344] 0: x2157
            Unrolling x345 = FixAdd(x342,x344)
            x2158 = FixAdd(x2154,x2157)
            [x345] 0: x2158
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2159 = SRAMBankedWrite(x2146,Vector(x2158),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(1)/2 = x2160
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2161 = SRAMBankedRead(x2094,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x2163 = FixMul(x2162,x2162)
            [x339] 0: x2163
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2164 = SRAMBankedRead(x2095,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x2166 = FixMul(x2165,x2165)
            [x341] 0: x2166
            Unrolling x342 = FixAdd(x339,x341)
            x2167 = FixAdd(x2163,x2166)
            [x342] 0: x2167
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2168 = SRAMBankedRead(x2096,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x2170 = FixMul(x2169,x2169)
            [x344] 0: x2170
            Unrolling x345 = FixAdd(x342,x344)
            x2171 = FixAdd(x2167,x2170)
            [x345] 0: x2171
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2172 = SRAMBankedWrite(x2147,Vector(x2171),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(2)/2 = x2173
          [x347] 0: x2174
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x2175 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x2175
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x2176 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x2176
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x2177 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x2177
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x2178 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x2178
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x2179 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x2179
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x2180 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x2180
          Unrolling x358 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x358 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x604,List(b27),false,true)
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2181 = SRAMBankedRead(x2146,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x2183 = FixLst(Const(0),x2182)
            [x352] 0: x2183
            Unrolling x353 = FixLst(Const(1),x351)
            x2184 = FixLst(Const(1),x2182)
            [x353] 0: x2184
            Unrolling x354 = And(x352,x353)
            x2185 = And(x2183,x2184)
            [x354] 0: x2185
            Unrolling x355 = Not(x354)
            x2186 = Not(x2185)
            [x355] 0: x2186
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2187 = RegWrite(x2177,x2185,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2188 = RegWrite(x2179,x2186,Set())
            x358 duplicate #List(1)/2 = x2189
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2190 = SRAMBankedRead(x2147,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x2192 = FixLst(Const(0),x2191)
            [x352] 0: x2192
            Unrolling x353 = FixLst(Const(1),x351)
            x2193 = FixLst(Const(1),x2191)
            [x353] 0: x2193
            Unrolling x354 = And(x352,x353)
            x2194 = And(x2192,x2193)
            [x354] 0: x2194
            Unrolling x355 = Not(x354)
            x2195 = Not(x2194)
            [x355] 0: x2195
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2196 = RegWrite(x2178,x2194,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2197 = RegWrite(x2180,x2195,Set())
            x358 duplicate #List(2)/2 = x2198
          [x358] 0: x2199
          Access: x359
          Memory: x350
          Iterators between x359 and x350: 
          Unroll: Map(b20 -> List(7))
          uids:List(List())
          uids:List(List())
          Unrolling x359 = RegRead(x350)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2200 = RegRead(x2179)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2201 = RegRead(x2180)
          Access: x360
          Memory: x349
          Iterators between x360 and x349: 
          Unroll: Map(b20 -> List(7))
          uids:List(List())
          uids:List(List())
          Unrolling x360 = RegRead(x349)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x2202 = RegRead(x2178)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x2203 = RegRead(x2177)
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(7), b27 -> List(0))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2204 = RegRead(x2177)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(7), b27 -> List(0))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2205 = SRAMBankedRead(x2146,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2204)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x2207 = FixDiv(Const(100),x2206)
              [x363] 0: x2207
              Unrolling x364 = FixDiv(x363,x362)
              x2208 = FixDiv(x2207,x2206)
              [x364] 0: x2208
              Unrolling x365 = FixDiv(x364,x362)
              x2209 = FixDiv(x2208,x2206)
              [x365] 0: x2209
              Unrolling x366 = FixDiv(x365,x362)
              x2210 = FixDiv(x2209,x2206)
              [x366] 0: x2210
              Unrolling x367 = FixDiv(x366,x362)
              x2211 = FixDiv(x2210,x2206)
              [x367] 0: x2211
              Unrolling x368 = FixDiv(Const(10),x362)
              x2212 = FixDiv(Const(10),x2206)
              [x368] 0: x2212
              Unrolling x369 = FixDiv(x368,x362)
              x2213 = FixDiv(x2212,x2206)
              [x369] 0: x2213
              Unrolling x370 = FixSub(x367,x369)
              x2214 = FixSub(x2211,x2213)
              [x370] 0: x2214
            [x371] 0: x2215
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x2216
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(7), b27 -> List(1))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2218 = RegRead(x2178)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(7), b27 -> List(1))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2219 = SRAMBankedRead(x2147,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2218)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x2221 = FixDiv(Const(100),x2220)
              [x363] 0: x2221
              Unrolling x364 = FixDiv(x363,x362)
              x2222 = FixDiv(x2221,x2220)
              [x364] 0: x2222
              Unrolling x365 = FixDiv(x364,x362)
              x2223 = FixDiv(x2222,x2220)
              [x365] 0: x2223
              Unrolling x366 = FixDiv(x365,x362)
              x2224 = FixDiv(x2223,x2220)
              [x366] 0: x2224
              Unrolling x367 = FixDiv(x366,x362)
              x2225 = FixDiv(x2224,x2220)
              [x367] 0: x2225
              Unrolling x368 = FixDiv(Const(10),x362)
              x2226 = FixDiv(Const(10),x2220)
              [x368] 0: x2226
              Unrolling x369 = FixDiv(x368,x362)
              x2227 = FixDiv(x2226,x2220)
              [x369] 0: x2227
              Unrolling x370 = FixSub(x367,x369)
              x2228 = FixSub(x2225,x2227)
              [x370] 0: x2228
            [x371] 0: x2229
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x2230
          Unrolling x375 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x375 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x604,List(b27),false,true)
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2232 = SRAMBankedWrite(x2175,Vector(x2217),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(1)/2 = x2233
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2234 = SRAMBankedWrite(x2176,Vector(x2231),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(2)/2 = x2235
          [x375] 0: x2236
          Unrolling x376 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x2237 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x2238 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x376] 0: x2237, 1: x2238
          Unrolling x377 = CounterChainNew(List(x376))
          Lane #List(0): 
          x2239 = CounterChainNew(List(x2237))
          Lane #List(1): 
          x2240 = CounterChainNew(List(x2238))
          [x377] 0: x2239, 1: x2240
          Unrolling x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None)
          Duplicating controller x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None) in lanes PartialUnroller(x388_map,x604,List(b27),false,true)
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2241)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2243 = SRAMBankedRead(x2092,Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x2245 = FixMul(x2244,Const(0.099999904632568359375))
            [x379] 0: x2245
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2246 = SRAMBankedRead(x2175,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x2248 = FixMul(x2245,x2247)
            [x381] 0: x2248
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(7), b27 -> List(0))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2241)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2249 = SRAMBankedWrite(x2090,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2241)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2250 = SRAMBankedWrite(x2093,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2241)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2251 = SRAMBankedWrite(x2089,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2241)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2252 = SRAMBankedWrite(x2092,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2241)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2253 = SRAMBankedWrite(x2091,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
          Created foreach x2254 = UnrolledForeach(Set(b2086, b564),x2239,Block(Const(())),List(List(b2241)),List(List(b2242)),None)
            x383 duplicate #List(1)/2 = x2254
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2255)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2257 = SRAMBankedRead(x2097,Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x2259 = FixMul(x2258,Const(0.099999904632568359375))
            [x379] 0: x2259
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2260 = SRAMBankedRead(x2176,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x2262 = FixMul(x2259,x2261)
            [x381] 0: x2262
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(7), b27 -> List(1))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2255)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2263 = SRAMBankedWrite(x2094,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2255)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2264 = SRAMBankedWrite(x2097,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2255)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2265 = SRAMBankedWrite(x2096,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2255)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2266 = SRAMBankedWrite(x2098,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2255)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2267 = SRAMBankedWrite(x2095,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
          Created foreach x2268 = UnrolledForeach(Set(b2087, b564),x2240,Block(Const(())),List(List(b2255)),List(List(b2256)),None)
            x383 duplicate #List(2)/2 = x2268
          [x383] 0: x2269
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(7), b27 -> List(0))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2085)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2270 = SRAMBankedRead(x2093,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(7), b27 -> List(1))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2085)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2272 = SRAMBankedRead(x2098,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
          Access: x385
          Memory: x324
          Iterators between x385 and x324: b28
          Unroll: Map(b20 -> List(7))
          uids:List(List(0))
          Unrolling x385 = SRAMRead(x324,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2085)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2274 = SRAMBankedRead(x581,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
        Creating Function0 with subst: {b29 -> x2271, b30 -> x2273}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x2281 = FixAdd(x2271,x2273)
          Lane #List(1): 
          x2281 = FixAdd(x2271,x2273)
          Lane #List(2): 
          x2281 = FixAdd(x2271,x2273)
          Lane #List(3): 
          x2281 = FixAdd(x2271,x2273)
          Lane #List(4): 
          x2281 = FixAdd(x2271,x2273)
          Lane #List(5): 
          x2281 = FixAdd(x2271,x2273)
          Lane #List(6): 
          x2281 = FixAdd(x2271,x2273)
          Lane #List(7): 
          x2281 = FixAdd(x2271,x2273)
          Lane #List(8): 
          x2281 = FixAdd(x2271,x2273)
          Lane #List(9): 
          x2281 = FixAdd(x2271,x2273)
          [x386] 0: x2281, 1: x2281, 2: x2281, 3: x2281, 4: x2281, 5: x2281, 6: x2281, 7: x2281, 8: x2281, 9: x2281
        Executing Function2 with inputs: x2282 and x2275
        Creating Function0 with subst: {b29 -> x2282, b30 -> x2275}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x2285 = FixAdd(x2282,x2275)
          Lane #List(1): 
          x2285 = FixAdd(x2282,x2275)
          Lane #List(2): 
          x2285 = FixAdd(x2282,x2275)
          Lane #List(3): 
          x2285 = FixAdd(x2282,x2275)
          Lane #List(4): 
          x2285 = FixAdd(x2282,x2275)
          Lane #List(5): 
          x2285 = FixAdd(x2282,x2275)
          Lane #List(6): 
          x2285 = FixAdd(x2282,x2275)
          Lane #List(7): 
          x2285 = FixAdd(x2282,x2275)
          Lane #List(8): 
          x2285 = FixAdd(x2282,x2275)
          Lane #List(9): 
          x2285 = FixAdd(x2282,x2275)
          [x386] 0: x2285, 1: x2285, 2: x2285, 3: x2285, 4: x2285, 5: x2285, 6: x2285, 7: x2285, 8: x2285, 9: x2285
          Access: x387
          Memory: x324
          Iterators between x387 and x324: b28
          Unroll: Map(b20 -> List(7))
          uids:List(List(0))
          Unrolling x387 = SRAMWrite(x324,x386,List(b28),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2085)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2287 = SRAMBankedWrite(x582,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)))
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2085)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2288 = SRAMBankedWrite(x581,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)))
          x388 duplicate #List(8)/10 = x2290
          x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [x329]
          x330 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x330]
          x331 = CounterChainNew(List(x330)) [x331]
          x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) [x336]
          x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x337]
          x347 = UnitPipe(Set(),Block(Const(())),None) [x347]
          x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x348]
          x349 = RegNew(Const(false)) [x349]
          x350 = RegNew(Const(false)) [x350]
          x358 = UnitPipe(Set(),Block(Const(())),None) [x358]
          x359 = RegRead(x350) [x359]
          x360 = RegRead(x349) [x360]
          x373 = Switch(List(x360, x359),Block(x372)) [x373]
          x375 = UnitPipe(Set(),Block(Const(())),None) [x375]
          x376 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x376]
        
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2297 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2298 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2299 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2300 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x2301 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x2297
            (x329,1) -> x2298
            (x329,2) -> x2299
            (x329,3) -> x2300
            (x329,4) -> x2301
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2302 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2303 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2304 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2305 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x2306 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x2302
            (x329,1) -> x2303
            (x329,2) -> x2304
            (x329,3) -> x2305
            (x329,4) -> x2306
          Unrolling x330 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x2307 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x2308 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x330] 0: x2307, 1: x2308
          Unrolling x331 = CounterChainNew(List(x330))
          Lane #List(0): 
          x2309 = CounterChainNew(List(x2307))
          Lane #List(1): 
          x2310 = CounterChainNew(List(x2308))
          [x331] 0: x2309, 1: x2310
          Unrolling x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None)
          Duplicating controller x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) in lanes PartialUnroller(x388_map,x605,List(b27),false,true)
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List(8, 0, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,8,ArrayBuffer(8),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 8/0) = List(b555, b2311)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(8) broadcast:List(0)
              x2317 = SRAMBankedRead(x471,Vector(List(x2313, Const(0))),Vector(x2316),Vector(Set(b2312, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List(8, 0, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(8))
            a2 = 
              lane 0 (castgrp/broadcast 0/8) = List(b2291, b2311)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(8)
              x2323 = SRAMBankedRead(x472,Vector(List(x2319, Const(0))),Vector(x2322),Vector(Set(b2312, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x2325 = FixSub(x2318,x2324)
            [x334] 0: x2325
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2311)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2326 = SRAMBankedWrite(x2301,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2311)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2327 = SRAMBankedWrite(x2300,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2311)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2328 = SRAMBankedWrite(x2299,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2311)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2329 = SRAMBankedWrite(x2298,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2311)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2330 = SRAMBankedWrite(x2297,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
          Created foreach x2331 = UnrolledForeach(Set(b2294, b565),x2309,Block(Const(())),List(List(b2311)),List(List(b2312)),None)
            x336 duplicate #List(1)/2 = x2331
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List(8, 1, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,8,ArrayBuffer(8),ArrayBuffer(1))
            a2 = 
              lane 0 (castgrp/broadcast 8/1) = List(b555, b2332)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(8) broadcast:List(1)
              x2338 = SRAMBankedRead(x471,Vector(List(x2334, Const(0))),Vector(x2337),Vector(Set(b2333, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List(8, 1, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(8))
            a2 = 
              lane 0 (castgrp/broadcast 1/8) = List(b2292, b2332)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(8)
              x2344 = SRAMBankedRead(x472,Vector(List(x2340, Const(0))),Vector(x2343),Vector(Set(b2333, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x2346 = FixSub(x2339,x2345)
            [x334] 0: x2346
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2332)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2347 = SRAMBankedWrite(x2306,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2332)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2348 = SRAMBankedWrite(x2304,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2332)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2349 = SRAMBankedWrite(x2303,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2332)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2350 = SRAMBankedWrite(x2305,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2332)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2351 = SRAMBankedWrite(x2302,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
          Created foreach x2352 = UnrolledForeach(Set(b2295, b565),x2310,Block(Const(())),List(List(b2332)),List(List(b2333)),None)
            x336 duplicate #List(2)/2 = x2352
          [x336] 0: x2353
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x2354 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x2354
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x2355 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x2355
          Unrolling x347 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x347 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x605,List(b27),false,true)
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2356 = SRAMBankedRead(x2297,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x2358 = FixMul(x2357,x2357)
            [x339] 0: x2358
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2359 = SRAMBankedRead(x2298,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x2361 = FixMul(x2360,x2360)
            [x341] 0: x2361
            Unrolling x342 = FixAdd(x339,x341)
            x2362 = FixAdd(x2358,x2361)
            [x342] 0: x2362
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2363 = SRAMBankedRead(x2299,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x2365 = FixMul(x2364,x2364)
            [x344] 0: x2365
            Unrolling x345 = FixAdd(x342,x344)
            x2366 = FixAdd(x2362,x2365)
            [x345] 0: x2366
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2367 = SRAMBankedWrite(x2354,Vector(x2366),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(1)/2 = x2368
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2369 = SRAMBankedRead(x2302,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x2371 = FixMul(x2370,x2370)
            [x339] 0: x2371
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2372 = SRAMBankedRead(x2303,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x2374 = FixMul(x2373,x2373)
            [x341] 0: x2374
            Unrolling x342 = FixAdd(x339,x341)
            x2375 = FixAdd(x2371,x2374)
            [x342] 0: x2375
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2376 = SRAMBankedRead(x2304,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x2378 = FixMul(x2377,x2377)
            [x344] 0: x2378
            Unrolling x345 = FixAdd(x342,x344)
            x2379 = FixAdd(x2375,x2378)
            [x345] 0: x2379
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2380 = SRAMBankedWrite(x2355,Vector(x2379),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(2)/2 = x2381
          [x347] 0: x2382
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x2383 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x2383
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x2384 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x2384
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x2385 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x2385
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x2386 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x2386
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x2387 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x2387
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x2388 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x2388
          Unrolling x358 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x358 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x605,List(b27),false,true)
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2389 = SRAMBankedRead(x2354,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x2391 = FixLst(Const(0),x2390)
            [x352] 0: x2391
            Unrolling x353 = FixLst(Const(1),x351)
            x2392 = FixLst(Const(1),x2390)
            [x353] 0: x2392
            Unrolling x354 = And(x352,x353)
            x2393 = And(x2391,x2392)
            [x354] 0: x2393
            Unrolling x355 = Not(x354)
            x2394 = Not(x2393)
            [x355] 0: x2394
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2395 = RegWrite(x2385,x2393,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2396 = RegWrite(x2387,x2394,Set())
            x358 duplicate #List(1)/2 = x2397
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2398 = SRAMBankedRead(x2355,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x2400 = FixLst(Const(0),x2399)
            [x352] 0: x2400
            Unrolling x353 = FixLst(Const(1),x351)
            x2401 = FixLst(Const(1),x2399)
            [x353] 0: x2401
            Unrolling x354 = And(x352,x353)
            x2402 = And(x2400,x2401)
            [x354] 0: x2402
            Unrolling x355 = Not(x354)
            x2403 = Not(x2402)
            [x355] 0: x2403
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2404 = RegWrite(x2386,x2402,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2405 = RegWrite(x2388,x2403,Set())
            x358 duplicate #List(2)/2 = x2406
          [x358] 0: x2407
          Access: x359
          Memory: x350
          Iterators between x359 and x350: 
          Unroll: Map(b20 -> List(8))
          uids:List(List())
          uids:List(List())
          Unrolling x359 = RegRead(x350)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2408 = RegRead(x2388)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2409 = RegRead(x2387)
          Access: x360
          Memory: x349
          Iterators between x360 and x349: 
          Unroll: Map(b20 -> List(8))
          uids:List(List())
          uids:List(List())
          Unrolling x360 = RegRead(x349)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x2410 = RegRead(x2385)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x2411 = RegRead(x2386)
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(8), b27 -> List(0))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2412 = RegRead(x2385)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(8), b27 -> List(0))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2413 = SRAMBankedRead(x2354,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2412)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x2415 = FixDiv(Const(100),x2414)
              [x363] 0: x2415
              Unrolling x364 = FixDiv(x363,x362)
              x2416 = FixDiv(x2415,x2414)
              [x364] 0: x2416
              Unrolling x365 = FixDiv(x364,x362)
              x2417 = FixDiv(x2416,x2414)
              [x365] 0: x2417
              Unrolling x366 = FixDiv(x365,x362)
              x2418 = FixDiv(x2417,x2414)
              [x366] 0: x2418
              Unrolling x367 = FixDiv(x366,x362)
              x2419 = FixDiv(x2418,x2414)
              [x367] 0: x2419
              Unrolling x368 = FixDiv(Const(10),x362)
              x2420 = FixDiv(Const(10),x2414)
              [x368] 0: x2420
              Unrolling x369 = FixDiv(x368,x362)
              x2421 = FixDiv(x2420,x2414)
              [x369] 0: x2421
              Unrolling x370 = FixSub(x367,x369)
              x2422 = FixSub(x2419,x2421)
              [x370] 0: x2422
            [x371] 0: x2423
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x2424
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(8), b27 -> List(1))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2426 = RegRead(x2386)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(8), b27 -> List(1))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2427 = SRAMBankedRead(x2355,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2426)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x2429 = FixDiv(Const(100),x2428)
              [x363] 0: x2429
              Unrolling x364 = FixDiv(x363,x362)
              x2430 = FixDiv(x2429,x2428)
              [x364] 0: x2430
              Unrolling x365 = FixDiv(x364,x362)
              x2431 = FixDiv(x2430,x2428)
              [x365] 0: x2431
              Unrolling x366 = FixDiv(x365,x362)
              x2432 = FixDiv(x2431,x2428)
              [x366] 0: x2432
              Unrolling x367 = FixDiv(x366,x362)
              x2433 = FixDiv(x2432,x2428)
              [x367] 0: x2433
              Unrolling x368 = FixDiv(Const(10),x362)
              x2434 = FixDiv(Const(10),x2428)
              [x368] 0: x2434
              Unrolling x369 = FixDiv(x368,x362)
              x2435 = FixDiv(x2434,x2428)
              [x369] 0: x2435
              Unrolling x370 = FixSub(x367,x369)
              x2436 = FixSub(x2433,x2435)
              [x370] 0: x2436
            [x371] 0: x2437
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x2438
          Unrolling x375 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x375 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x605,List(b27),false,true)
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2440 = SRAMBankedWrite(x2383,Vector(x2425),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(1)/2 = x2441
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2442 = SRAMBankedWrite(x2384,Vector(x2439),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(2)/2 = x2443
          [x375] 0: x2444
          Unrolling x376 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x2445 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x2446 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x376] 0: x2445, 1: x2446
          Unrolling x377 = CounterChainNew(List(x376))
          Lane #List(0): 
          x2447 = CounterChainNew(List(x2445))
          Lane #List(1): 
          x2448 = CounterChainNew(List(x2446))
          [x377] 0: x2447, 1: x2448
          Unrolling x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None)
          Duplicating controller x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None) in lanes PartialUnroller(x388_map,x605,List(b27),false,true)
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2449)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2451 = SRAMBankedRead(x2300,Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x2453 = FixMul(x2452,Const(0.099999904632568359375))
            [x379] 0: x2453
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2454 = SRAMBankedRead(x2383,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x2456 = FixMul(x2453,x2455)
            [x381] 0: x2456
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(8), b27 -> List(0))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2449)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2457 = SRAMBankedWrite(x2301,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2449)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2458 = SRAMBankedWrite(x2300,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2449)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2459 = SRAMBankedWrite(x2299,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2449)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2460 = SRAMBankedWrite(x2298,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2449)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2461 = SRAMBankedWrite(x2297,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
          Created foreach x2462 = UnrolledForeach(Set(b2294, b565),x2447,Block(Const(())),List(List(b2449)),List(List(b2450)),None)
            x383 duplicate #List(1)/2 = x2462
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2463)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2465 = SRAMBankedRead(x2305,Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x2467 = FixMul(x2466,Const(0.099999904632568359375))
            [x379] 0: x2467
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2468 = SRAMBankedRead(x2384,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x2470 = FixMul(x2467,x2469)
            [x381] 0: x2470
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(8), b27 -> List(1))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2463)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2471 = SRAMBankedWrite(x2306,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2463)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2472 = SRAMBankedWrite(x2304,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2463)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2473 = SRAMBankedWrite(x2303,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2463)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2474 = SRAMBankedWrite(x2305,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2463)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2475 = SRAMBankedWrite(x2302,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
          Created foreach x2476 = UnrolledForeach(Set(b2295, b565),x2448,Block(Const(())),List(List(b2463)),List(List(b2464)),None)
            x383 duplicate #List(2)/2 = x2476
          [x383] 0: x2477
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(8), b27 -> List(0))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2293)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2478 = SRAMBankedRead(x2301,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(8), b27 -> List(1))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2293)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2480 = SRAMBankedRead(x2306,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
          Access: x385
          Memory: x324
          Iterators between x385 and x324: b28
          Unroll: Map(b20 -> List(8))
          uids:List(List(0))
          Unrolling x385 = SRAMRead(x324,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2293)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2482 = SRAMBankedRead(x583,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
        Creating Function0 with subst: {b29 -> x2479, b30 -> x2481}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x2489 = FixAdd(x2479,x2481)
          Lane #List(1): 
          x2489 = FixAdd(x2479,x2481)
          Lane #List(2): 
          x2489 = FixAdd(x2479,x2481)
          Lane #List(3): 
          x2489 = FixAdd(x2479,x2481)
          Lane #List(4): 
          x2489 = FixAdd(x2479,x2481)
          Lane #List(5): 
          x2489 = FixAdd(x2479,x2481)
          Lane #List(6): 
          x2489 = FixAdd(x2479,x2481)
          Lane #List(7): 
          x2489 = FixAdd(x2479,x2481)
          Lane #List(8): 
          x2489 = FixAdd(x2479,x2481)
          Lane #List(9): 
          x2489 = FixAdd(x2479,x2481)
          [x386] 0: x2489, 1: x2489, 2: x2489, 3: x2489, 4: x2489, 5: x2489, 6: x2489, 7: x2489, 8: x2489, 9: x2489
        Executing Function2 with inputs: x2490 and x2483
        Creating Function0 with subst: {b29 -> x2490, b30 -> x2483}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x2493 = FixAdd(x2490,x2483)
          Lane #List(1): 
          x2493 = FixAdd(x2490,x2483)
          Lane #List(2): 
          x2493 = FixAdd(x2490,x2483)
          Lane #List(3): 
          x2493 = FixAdd(x2490,x2483)
          Lane #List(4): 
          x2493 = FixAdd(x2490,x2483)
          Lane #List(5): 
          x2493 = FixAdd(x2490,x2483)
          Lane #List(6): 
          x2493 = FixAdd(x2490,x2483)
          Lane #List(7): 
          x2493 = FixAdd(x2490,x2483)
          Lane #List(8): 
          x2493 = FixAdd(x2490,x2483)
          Lane #List(9): 
          x2493 = FixAdd(x2490,x2483)
          [x386] 0: x2493, 1: x2493, 2: x2493, 3: x2493, 4: x2493, 5: x2493, 6: x2493, 7: x2493, 8: x2493, 9: x2493
          Access: x387
          Memory: x324
          Iterators between x387 and x324: b28
          Unroll: Map(b20 -> List(8))
          uids:List(List(0))
          Unrolling x387 = SRAMWrite(x324,x386,List(b28),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2293)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2495 = SRAMBankedWrite(x584,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)))
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2293)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2496 = SRAMBankedWrite(x583,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)))
          x388 duplicate #List(9)/10 = x2498
          x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [x329]
          x330 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x330]
          x331 = CounterChainNew(List(x330)) [x331]
          x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) [x336]
          x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x337]
          x347 = UnitPipe(Set(),Block(Const(())),None) [x347]
          x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]]) [x348]
          x349 = RegNew(Const(false)) [x349]
          x350 = RegNew(Const(false)) [x350]
          x358 = UnitPipe(Set(),Block(Const(())),None) [x358]
          x359 = RegRead(x350) [x359]
          x360 = RegRead(x349) [x360]
          x373 = Switch(List(x360, x359),Block(x372)) [x373]
          x375 = UnitPipe(Set(),Block(Const(())),None) [x375]
          x376 = CounterNew(Const(0),Const(3),Const(1),Const(1)) [x376]
        
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2505 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2506 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2507 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2508 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x2509 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x2505
            (x329,1) -> x2506
            (x329,2) -> x2507
            (x329,3) -> x2508
            (x329,4) -> x2509
          Duplicating x329 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2510 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #1: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2511 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #2: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2512 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #3: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),6,List(0),Fold)
            x2513 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            #4: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),7,List(0),Fold)
            x2514 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x329
            (x329,0) -> x2510
            (x329,1) -> x2511
            (x329,2) -> x2512
            (x329,3) -> x2513
            (x329,4) -> x2514
          Unrolling x330 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x2515 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x2516 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x330] 0: x2515, 1: x2516
          Unrolling x331 = CounterChainNew(List(x330))
          Lane #List(0): 
          x2517 = CounterChainNew(List(x2515))
          Lane #List(1): 
          x2518 = CounterChainNew(List(x2516))
          [x331] 0: x2517, 1: x2518
          Unrolling x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None)
          Duplicating controller x336 = OpForeach(Set(),x331,Block(Const(())),List(b33),None) in lanes PartialUnroller(x388_map,x606,List(b27),false,true)
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List(9, 0, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,9,ArrayBuffer(9),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 9/0) = List(b556, b2519)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(9) broadcast:List(0)
              x2525 = SRAMBankedRead(x471,Vector(List(x2521, Const(0))),Vector(x2524),Vector(Set(b2520, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List(9, 0, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(9))
            a2 = 
              lane 0 (castgrp/broadcast 0/9) = List(b2499, b2519)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(9)
              x2531 = SRAMBankedRead(x472,Vector(List(x2527, Const(0))),Vector(x2530),Vector(Set(b2520, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x2533 = FixSub(x2526,x2532)
            [x334] 0: x2533
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2519)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2534 = SRAMBankedWrite(x2508,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2519)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2535 = SRAMBankedWrite(x2509,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2519)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2536 = SRAMBankedWrite(x2505,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2519)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2537 = SRAMBankedWrite(x2506,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2519)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2538 = SRAMBankedWrite(x2507,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
          Created foreach x2539 = UnrolledForeach(Set(b2502, b566),x2517,Block(Const(())),List(List(b2519)),List(List(b2520)),None)
            x336 duplicate #List(1)/2 = x2539
            x332 = SRAMRead(x268,List(b20, b33),Set()) [x332]
            x333 = SRAMRead(x268,List(b27, b33),Set()) [x333]
            x334 = FixSub(x332,x333) [x334]
            x335 = SRAMWrite(x329,x334,List(b33),Set()) [x335]
          
          Unrolling foreach x336
            Access: x332
            Memory: x268
            Iterators between x332 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List(9, 1, 0))
            Unrolling x332 = SRAMRead(x268,List(b20, b33),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,9,ArrayBuffer(9),ArrayBuffer(1))
            a2 = 
              lane 0 (castgrp/broadcast 9/1) = List(b556, b2540)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(9) broadcast:List(1)
              x2546 = SRAMBankedRead(x471,Vector(List(x2542, Const(0))),Vector(x2545),Vector(Set(b2541, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
            Access: x333
            Memory: x268
            Iterators between x333 and x268: b20, b27, b33
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List(9, 1, 0))
            Unrolling x333 = SRAMRead(x268,List(b27, b33),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(9))
            a2 = 
              lane 0 (castgrp/broadcast 1/9) = List(b2500, b2540)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(9)
              x2552 = SRAMBankedRead(x472,Vector(List(x2548, Const(0))),Vector(x2551),Vector(Set(b2541, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x334 = FixSub(x332,x333)
            x2554 = FixSub(x2547,x2553)
            [x334] 0: x2554
            Access: x335
            Memory: x329
            Iterators between x335 and x329: b33
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List(0))
            Unrolling x335 = SRAMWrite(x329,x334,List(b33),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2540)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2555 = SRAMBankedWrite(x2512,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2540)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2556 = SRAMBankedWrite(x2514,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2540)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2557 = SRAMBankedWrite(x2510,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2540)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2558 = SRAMBankedWrite(x2513,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2540)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2559 = SRAMBankedWrite(x2511,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
          Created foreach x2560 = UnrolledForeach(Set(b2503, b566),x2518,Block(Const(())),List(List(b2540)),List(List(b2541)),None)
            x336 duplicate #List(2)/2 = x2560
          [x336] 0: x2561
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x2562 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x2562
          Duplicating x337 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),3,List(0),None)
            x2563 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x337
            (x337,0) -> x2563
          Unrolling x347 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x347 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x606,List(b27),false,true)
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2564 = SRAMBankedRead(x2505,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x2566 = FixMul(x2565,x2565)
            [x339] 0: x2566
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2567 = SRAMBankedRead(x2506,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x2569 = FixMul(x2568,x2568)
            [x341] 0: x2569
            Unrolling x342 = FixAdd(x339,x341)
            x2570 = FixAdd(x2566,x2569)
            [x342] 0: x2570
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2571 = SRAMBankedRead(x2507,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x2573 = FixMul(x2572,x2572)
            [x344] 0: x2573
            Unrolling x345 = FixAdd(x342,x344)
            x2574 = FixAdd(x2570,x2573)
            [x345] 0: x2574
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2575 = SRAMBankedWrite(x2562,Vector(x2574),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(1)/2 = x2576
            x338 = SRAMRead(x329,List(Const(0)),Set()) [x338]
            x339 = FixMul(x338,x338) [x339]
            x340 = SRAMRead(x329,List(Const(1)),Set()) [x340]
            x341 = FixMul(x340,x340) [x341]
            x342 = FixAdd(x339,x341) [x342]
            x343 = SRAMRead(x329,List(Const(2)),Set()) [x343]
            x344 = FixMul(x343,x343) [x344]
            x345 = FixAdd(x342,x344) [x345]
            x346 = SRAMWrite(x337,x345,List(Const(0)),Set()) [x346]
          
            Access: x338
            Memory: x329
            Iterators between x338 and x329: 
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List())
            Unrolling x338 = SRAMRead(x329,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2577 = SRAMBankedRead(x2510,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x339 = FixMul(x338,x338)
            x2579 = FixMul(x2578,x2578)
            [x339] 0: x2579
            Access: x340
            Memory: x329
            Iterators between x340 and x329: 
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List())
            Unrolling x340 = SRAMRead(x329,List(Const(1)),Set())
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(1))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2580 = SRAMBankedRead(x2511,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x341 = FixMul(x340,x340)
            x2582 = FixMul(x2581,x2581)
            [x341] 0: x2582
            Unrolling x342 = FixAdd(x339,x341)
            x2583 = FixAdd(x2579,x2582)
            [x342] 0: x2583
            Access: x343
            Memory: x329
            Iterators between x343 and x329: 
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List())
            Unrolling x343 = SRAMRead(x329,List(Const(2)),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(2))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2584 = SRAMBankedRead(x2512,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x344 = FixMul(x343,x343)
            x2586 = FixMul(x2585,x2585)
            [x344] 0: x2586
            Unrolling x345 = FixAdd(x342,x344)
            x2587 = FixAdd(x2583,x2586)
            [x345] 0: x2587
            Access: x346
            Memory: x337
            Iterators between x346 and x337: 
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List())
            Unrolling x346 = SRAMWrite(x337,x345,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2588 = SRAMBankedWrite(x2563,Vector(x2587),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x347 duplicate #List(2)/2 = x2589
          [x347] 0: x2590
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x2591 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x2591
          Duplicating x348 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            #0: Memory(List(Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)),2,List(0),None)
            x2592 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
            Registering duplicates for memory: x348
            (x348,0) -> x2592
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x2593 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x2593
          Duplicating x349 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x2594 = RegNew(Const(false))
            Registering duplicates for memory: x349
            (x349,0) -> x2594
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x2595 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x2595
          Duplicating x350 = RegNew(Const(false))
            #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),2,List(),None)
            x2596 = RegNew(Const(false))
            Registering duplicates for memory: x350
            (x350,0) -> x2596
          Unrolling x358 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x358 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x606,List(b27),false,true)
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2597 = SRAMBankedRead(x2562,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x2599 = FixLst(Const(0),x2598)
            [x352] 0: x2599
            Unrolling x353 = FixLst(Const(1),x351)
            x2600 = FixLst(Const(1),x2598)
            [x353] 0: x2600
            Unrolling x354 = And(x352,x353)
            x2601 = And(x2599,x2600)
            [x354] 0: x2601
            Unrolling x355 = Not(x354)
            x2602 = Not(x2601)
            [x355] 0: x2602
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2603 = RegWrite(x2593,x2601,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2604 = RegWrite(x2595,x2602,Set())
            x358 duplicate #List(1)/2 = x2605
            x351 = SRAMRead(x337,List(Const(0)),Set()) [x351]
            x352 = FixLst(Const(0),x351) [x352]
            x353 = FixLst(Const(1),x351) [x353]
            x354 = And(x352,x353) [x354]
            x355 = Not(x354) [x355]
            x356 = RegWrite(x349,x354,Set()) [x356]
            x357 = RegWrite(x350,x355,Set()) [x357]
          
            Access: x351
            Memory: x337
            Iterators between x351 and x337: 
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List())
            Unrolling x351 = SRAMRead(x337,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2606 = SRAMBankedRead(x2563,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
            Unrolling x352 = FixLst(Const(0),x351)
            x2608 = FixLst(Const(0),x2607)
            [x352] 0: x2608
            Unrolling x353 = FixLst(Const(1),x351)
            x2609 = FixLst(Const(1),x2607)
            [x353] 0: x2609
            Unrolling x354 = And(x352,x353)
            x2610 = And(x2608,x2609)
            [x354] 0: x2610
            Unrolling x355 = Not(x354)
            x2611 = Not(x2610)
            [x355] 0: x2611
            Access: x356
            Memory: x349
            Iterators between x356 and x349: 
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List())
            Unrolling x356 = RegWrite(x349,x354,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2612 = RegWrite(x2594,x2610,Set())
            Access: x357
            Memory: x350
            Iterators between x357 and x350: 
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List())
            Unrolling x357 = RegWrite(x350,x355,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2613 = RegWrite(x2596,x2611,Set())
            x358 duplicate #List(2)/2 = x2614
          [x358] 0: x2615
          Access: x359
          Memory: x350
          Iterators between x359 and x350: 
          Unroll: Map(b20 -> List(9))
          uids:List(List())
          uids:List(List())
          Unrolling x359 = RegRead(x350)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2616 = RegRead(x2595)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2617 = RegRead(x2596)
          Access: x360
          Memory: x349
          Iterators between x360 and x349: 
          Unroll: Map(b20 -> List(9))
          uids:List(List())
          uids:List(List())
          Unrolling x360 = RegRead(x349)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(1)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(1) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x2618 = RegRead(x2594)
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,1,ArrayBuffer(1),ArrayBuffer(0))
            Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x2619 = RegRead(x2593)
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(9), b27 -> List(0))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2620 = RegRead(x2593)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(9), b27 -> List(0))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2621 = SRAMBankedRead(x2562,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2620)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x2623 = FixDiv(Const(100),x2622)
              [x363] 0: x2623
              Unrolling x364 = FixDiv(x363,x362)
              x2624 = FixDiv(x2623,x2622)
              [x364] 0: x2624
              Unrolling x365 = FixDiv(x364,x362)
              x2625 = FixDiv(x2624,x2622)
              [x365] 0: x2625
              Unrolling x366 = FixDiv(x365,x362)
              x2626 = FixDiv(x2625,x2622)
              [x366] 0: x2626
              Unrolling x367 = FixDiv(x366,x362)
              x2627 = FixDiv(x2626,x2622)
              [x367] 0: x2627
              Unrolling x368 = FixDiv(Const(10),x362)
              x2628 = FixDiv(Const(10),x2622)
              [x368] 0: x2628
              Unrolling x369 = FixDiv(x368,x362)
              x2629 = FixDiv(x2628,x2622)
              [x369] 0: x2629
              Unrolling x370 = FixSub(x367,x369)
              x2630 = FixSub(x2627,x2629)
              [x370] 0: x2630
            [x371] 0: x2631
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x2632
            Unrolling x371 = SwitchCase(Block(x370))
            x371 = SwitchCase(Block(x370)) [duplicate 1/1] in lanes UnitUnroller(x373,true)
              Access: x361
              Memory: x349
              Iterators between x361 and x349: 
              Unroll: Map(b20 -> List(9), b27 -> List(1))
              uids:List(List())
              Unrolling x361 = RegRead(x349)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2634 = RegRead(x2594)
              Access: x362
              Memory: x337
              Iterators between x362 and x337: 
              Unroll: Map(b20 -> List(9), b27 -> List(1))
              uids:List(List())
              Unrolling x362 = SRAMRead(x337,List(Const(0)),Set(x361))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(2),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(Const(0))
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2635 = SRAMBankedRead(x2563,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2634)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x363 = FixDiv(Const(100),x362)
              x2637 = FixDiv(Const(100),x2636)
              [x363] 0: x2637
              Unrolling x364 = FixDiv(x363,x362)
              x2638 = FixDiv(x2637,x2636)
              [x364] 0: x2638
              Unrolling x365 = FixDiv(x364,x362)
              x2639 = FixDiv(x2638,x2636)
              [x365] 0: x2639
              Unrolling x366 = FixDiv(x365,x362)
              x2640 = FixDiv(x2639,x2636)
              [x366] 0: x2640
              Unrolling x367 = FixDiv(x366,x362)
              x2641 = FixDiv(x2640,x2636)
              [x367] 0: x2641
              Unrolling x368 = FixDiv(Const(10),x362)
              x2642 = FixDiv(Const(10),x2636)
              [x368] 0: x2642
              Unrolling x369 = FixDiv(x368,x362)
              x2643 = FixDiv(x2642,x2636)
              [x369] 0: x2643
              Unrolling x370 = FixSub(x367,x369)
              x2644 = FixSub(x2641,x2643)
              [x370] 0: x2644
            [x371] 0: x2645
            Unrolling x372 = SwitchCase(Block(Const(90)))
            x372 = SwitchCase(Block(Const(90))) [duplicate 1/1] in lanes UnitUnroller(x373,true)
            [x372] 0: x2646
          Unrolling x375 = UnitPipe(Set(),Block(Const(())),None)
          Duplicating controller x375 = UnitPipe(Set(),Block(Const(())),None) in lanes PartialUnroller(x388_map,x606,List(b27),false,true)
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2648 = SRAMBankedWrite(x2591,Vector(x2633),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(1)/2 = x2649
            x374 = SRAMWrite(x348,x373,List(Const(0)),Set()) [x374]
          
            Access: x374
            Memory: x348
            Iterators between x374 and x348: 
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List())
            Unrolling x374 = SRAMWrite(x348,x373,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2650 = SRAMBankedWrite(x2592,Vector(x2647),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
            x375 duplicate #List(2)/2 = x2651
          [x375] 0: x2652
          Unrolling x376 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(0): 
          x2653 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          Lane #List(1): 
          x2654 = CounterNew(Const(0),Const(3),Const(1),Const(1))
          [x376] 0: x2653, 1: x2654
          Unrolling x377 = CounterChainNew(List(x376))
          Lane #List(0): 
          x2655 = CounterChainNew(List(x2653))
          Lane #List(1): 
          x2656 = CounterChainNew(List(x2654))
          [x377] 0: x2655, 1: x2656
          Unrolling x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None)
          Duplicating controller x383 = OpForeach(Set(),x377,Block(Const(())),List(b67),None) in lanes PartialUnroller(x388_map,x606,List(b27),false,true)
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2657)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2659 = SRAMBankedRead(x2508,Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x2661 = FixMul(x2660,Const(0.099999904632568359375))
            [x379] 0: x2661
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2662 = SRAMBankedRead(x2591,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x2664 = FixMul(x2661,x2663)
            [x381] 0: x2664
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(9), b27 -> List(0))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2657)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2665 = SRAMBankedWrite(x2508,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2657)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2666 = SRAMBankedWrite(x2509,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2657)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2667 = SRAMBankedWrite(x2505,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2657)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2668 = SRAMBankedWrite(x2506,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2657)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2669 = SRAMBankedWrite(x2507,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
          Created foreach x2670 = UnrolledForeach(Set(b2502, b566),x2655,Block(Const(())),List(List(b2657)),List(List(b2658)),None)
            x383 duplicate #List(1)/2 = x2670
            x378 = SRAMRead(x329,List(b67),Set()) [x378]
            x379 = FixMul(x378,Const(0.099999904632568359375)) [x379]
            x380 = SRAMRead(x348,List(Const(0)),Set()) [x380]
            x381 = FixMul(x379,x380) [x381]
            x382 = SRAMWrite(x329,x381,List(b67),Set()) [x382]
          
          Unrolling foreach x383
            Access: x378
            Memory: x329
            Iterators between x378 and x329: b67
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List(0))
            Unrolling x378 = SRAMRead(x329,List(b67),Set())
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2671)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2673 = SRAMBankedRead(x2513,Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x379 = FixMul(x378,Const(0.099999904632568359375))
            x2675 = FixMul(x2674,Const(0.099999904632568359375))
            [x379] 0: x2675
            Access: x380
            Memory: x348
            Iterators between x380 and x348: b67
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List(0))
            Unrolling x380 = SRAMRead(x348,List(Const(0)),Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(Const(0))
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2676 = SRAMBankedRead(x2592,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
            Unrolling x381 = FixMul(x379,x380)
            x2678 = FixMul(x2675,x2677)
            [x381] 0: x2678
            Access: x382
            Memory: x329
            Iterators between x382 and x329: b67
            Unroll: Map(b20 -> List(9), b27 -> List(1))
            uids:List(List(0))
            Unrolling x382 = SRAMWrite(x329,x381,List(b67),Set())
              Dispatch: ArrayBuffer(2)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2671)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2679 = SRAMBankedWrite(x2512,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
              Dispatch: ArrayBuffer(4)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2671)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2680 = SRAMBankedWrite(x2514,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2671)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2681 = SRAMBankedWrite(x2510,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
              Dispatch: ArrayBuffer(3)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2671)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2682 = SRAMBankedWrite(x2513,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
              Dispatch: ArrayBuffer(1)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(5),0,0,ArrayBuffer(0),ArrayBuffer(0))
            a2 = 
              lane 0 (castgrp/broadcast 0/0) = List(b2671)
              Masters: Vector(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2683 = SRAMBankedWrite(x2511,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
          Created foreach x2684 = UnrolledForeach(Set(b2503, b566),x2656,Block(Const(())),List(List(b2671)),List(List(b2672)),None)
            x383 duplicate #List(2)/2 = x2684
          [x383] 0: x2685
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(9), b27 -> List(0))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2501)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2686 = SRAMBankedRead(x2509,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
          Access: x384
          Memory: x329
          Iterators between x384 and x329: b28
          Unroll: Map(b20 -> List(9), b27 -> List(1))
          uids:List(List(0))
          Unrolling x384 = SRAMRead(x329,List(b28),Set())
            Dispatch: ArrayBuffer(4)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(6),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2501)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2688 = SRAMBankedRead(x2514,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
          Access: x385
          Memory: x324
          Iterators between x385 and x324: b28
          Unroll: Map(b20 -> List(9))
          uids:List(List(0))
          Unrolling x385 = SRAMRead(x324,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2501)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2690 = SRAMBankedRead(x585,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
        Creating Function0 with subst: {b29 -> x2687, b30 -> x2689}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x2697 = FixAdd(x2687,x2689)
          Lane #List(1): 
          x2697 = FixAdd(x2687,x2689)
          Lane #List(2): 
          x2697 = FixAdd(x2687,x2689)
          Lane #List(3): 
          x2697 = FixAdd(x2687,x2689)
          Lane #List(4): 
          x2697 = FixAdd(x2687,x2689)
          Lane #List(5): 
          x2697 = FixAdd(x2687,x2689)
          Lane #List(6): 
          x2697 = FixAdd(x2687,x2689)
          Lane #List(7): 
          x2697 = FixAdd(x2687,x2689)
          Lane #List(8): 
          x2697 = FixAdd(x2687,x2689)
          Lane #List(9): 
          x2697 = FixAdd(x2687,x2689)
          [x386] 0: x2697, 1: x2697, 2: x2697, 3: x2697, 4: x2697, 5: x2697, 6: x2697, 7: x2697, 8: x2697, 9: x2697
        Executing Function2 with inputs: x2698 and x2691
        Creating Function0 with subst: {b29 -> x2698, b30 -> x2691}
        Executing Function0
          Unrolling x386 = FixAdd(b29,b30)
          Lane #List(0): 
          x2701 = FixAdd(x2698,x2691)
          Lane #List(1): 
          x2701 = FixAdd(x2698,x2691)
          Lane #List(2): 
          x2701 = FixAdd(x2698,x2691)
          Lane #List(3): 
          x2701 = FixAdd(x2698,x2691)
          Lane #List(4): 
          x2701 = FixAdd(x2698,x2691)
          Lane #List(5): 
          x2701 = FixAdd(x2698,x2691)
          Lane #List(6): 
          x2701 = FixAdd(x2698,x2691)
          Lane #List(7): 
          x2701 = FixAdd(x2698,x2691)
          Lane #List(8): 
          x2701 = FixAdd(x2698,x2691)
          Lane #List(9): 
          x2701 = FixAdd(x2698,x2691)
          [x386] 0: x2701, 1: x2701, 2: x2701, 3: x2701, 4: x2701, 5: x2701, 6: x2701, 7: x2701, 8: x2701, 9: x2701
          Access: x387
          Memory: x324
          Iterators between x387 and x324: b28
          Unroll: Map(b20 -> List(9))
          uids:List(List(0))
          Unrolling x387 = SRAMWrite(x324,x386,List(b28),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2501)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2703 = SRAMBankedWrite(x585,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)))
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2501)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2704 = SRAMBankedWrite(x586,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)))
          x388 duplicate #List(10)/10 = x2706
        [x388] 0: x2707
        Unrolling x389 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(0): 
        x2708 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(1): 
        x2709 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(2): 
        x2710 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(3): 
        x2711 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(4): 
        x2712 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(5): 
        x2713 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(6): 
        x2714 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(7): 
        x2715 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(8): 
        x2716 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        Lane #List(9): 
        x2717 = CounterNew(Const(0),Const(3),Const(1),Const(1))
        [x389] 0: x2708, 1: x2709, 2: x2710, 3: x2711, 4: x2712, 5: x2713, 6: x2714, 7: x2715, 8: x2716, 9: x2717
        Unrolling x390 = CounterChainNew(List(x389))
        Lane #List(0): 
        x2718 = CounterChainNew(List(x2708))
        Lane #List(1): 
        x2719 = CounterChainNew(List(x2709))
        Lane #List(2): 
        x2720 = CounterChainNew(List(x2710))
        Lane #List(3): 
        x2721 = CounterChainNew(List(x2711))
        Lane #List(4): 
        x2722 = CounterChainNew(List(x2712))
        Lane #List(5): 
        x2723 = CounterChainNew(List(x2713))
        Lane #List(6): 
        x2724 = CounterChainNew(List(x2714))
        Lane #List(7): 
        x2725 = CounterChainNew(List(x2715))
        Lane #List(8): 
        x2726 = CounterChainNew(List(x2716))
        Lane #List(9): 
        x2727 = CounterChainNew(List(x2717))
        [x390] 0: x2718, 1: x2719, 2: x2720, 3: x2721, 4: x2722, 5: x2723, 6: x2724, 7: x2725, 8: x2726, 9: x2727
        Unrolling x395 = OpForeach(Set(),x390,Block(Const(())),List(b81),None)
        Duplicating controller x395 = OpForeach(Set(),x390,Block(Const(())),List(b81),None) in lanes PartialUnroller(x396,x546,List(b20),false,true)
          x391 = SRAMRead(x324,List(b81),Set()) [x391]
          x392 = SRAMRead(x268,List(b20, b81),Set()) [x392]
          x393 = FixAdd(x391,x392) [x393]
          x394 = SRAMWrite(x321,x393,List(b20, b81),Set()) [x394]
        
        Unrolling foreach x395
          Access: x391
          Memory: x324
          Iterators between x391 and x324: b81
          Unroll: Map(b20 -> List(0))
          uids:List(List(0))
          Unrolling x391 = SRAMRead(x324,List(b81),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2728)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2730 = SRAMBankedRead(x568,Vector(List(Const(0))),Vector(b2728),Vector(Set(b2729, b557)),Vec[Fix[TRUE,_10,_22]])
          Access: x392
          Memory: x268
          Iterators between x392 and x268: b20, b81
          Unroll: Map(b20 -> List(0))
          uids:List(List(0, 0))
          Unrolling x392 = SRAMRead(x268,List(b20, b81),Set())
            Dispatch: ArrayBuffer(2)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b547, b2728)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2736 = SRAMBankedRead(x473,Vector(List(x2732, Const(0))),Vector(x2735),Vector(Set(b2729, b557)),Vec[Fix[TRUE,_10,_22]])
          Unrolling x393 = FixAdd(x391,x392)
          x2738 = FixAdd(x2731,x2737)
          [x393] 0: x2738
          Access: x394
          Memory: x321
          Iterators between x394 and x321: b20, b81
          Unroll: Map(b20 -> List(0))
          uids:List(List(0, 0))
          Unrolling x394 = SRAMWrite(x321,x393,List(b20, b81),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b547, b2728)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2739 = SRAMBankedWrite(x544,Vector(x2738),Vector(List(x2732, Const(0))),Vector(x2735),Vector(Set(b2729, b557)))
        Created foreach x2740 = UnrolledForeach(Set(b557),x2718,Block(Const(())),List(List(b2728)),List(List(b2729)),None)
          x395 duplicate #List(1)/10 = x2740
          x391 = SRAMRead(x324,List(b81),Set()) [x391]
          x392 = SRAMRead(x268,List(b20, b81),Set()) [x392]
          x393 = FixAdd(x391,x392) [x393]
          x394 = SRAMWrite(x321,x393,List(b20, b81),Set()) [x394]
        
        Unrolling foreach x395
          Access: x391
          Memory: x324
          Iterators between x391 and x324: b81
          Unroll: Map(b20 -> List(1))
          uids:List(List(0))
          Unrolling x391 = SRAMRead(x324,List(b81),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2741)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2743 = SRAMBankedRead(x570,Vector(List(Const(0))),Vector(b2741),Vector(Set(b2742, b558)),Vec[Fix[TRUE,_10,_22]])
          Access: x392
          Memory: x268
          Iterators between x392 and x268: b20, b81
          Unroll: Map(b20 -> List(1))
          uids:List(List(1, 0))
          Unrolling x392 = SRAMRead(x268,List(b20, b81),Set())
            Dispatch: ArrayBuffer(2)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 1/0) = List(b548, b2741)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x2749 = SRAMBankedRead(x473,Vector(List(x2745, Const(0))),Vector(x2748),Vector(Set(b2742, b558)),Vec[Fix[TRUE,_10,_22]])
          Unrolling x393 = FixAdd(x391,x392)
          x2751 = FixAdd(x2744,x2750)
          [x393] 0: x2751
          Access: x394
          Memory: x321
          Iterators between x394 and x321: b20, b81
          Unroll: Map(b20 -> List(1))
          uids:List(List(1, 0))
          Unrolling x394 = SRAMWrite(x321,x393,List(b20, b81),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,1,ArrayBuffer(1),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 1/0) = List(b548, b2741)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(1) broadcast:List(0)
            x2752 = SRAMBankedWrite(x544,Vector(x2751),Vector(List(x2745, Const(0))),Vector(x2748),Vector(Set(b2742, b558)))
        Created foreach x2753 = UnrolledForeach(Set(b558),x2719,Block(Const(())),List(List(b2741)),List(List(b2742)),None)
          x395 duplicate #List(2)/10 = x2753
          x391 = SRAMRead(x324,List(b81),Set()) [x391]
          x392 = SRAMRead(x268,List(b20, b81),Set()) [x392]
          x393 = FixAdd(x391,x392) [x393]
          x394 = SRAMWrite(x321,x393,List(b20, b81),Set()) [x394]
        
        Unrolling foreach x395
          Access: x391
          Memory: x324
          Iterators between x391 and x324: b81
          Unroll: Map(b20 -> List(2))
          uids:List(List(0))
          Unrolling x391 = SRAMRead(x324,List(b81),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2754)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2756 = SRAMBankedRead(x572,Vector(List(Const(0))),Vector(b2754),Vector(Set(b2755, b559)),Vec[Fix[TRUE,_10,_22]])
          Access: x392
          Memory: x268
          Iterators between x392 and x268: b20, b81
          Unroll: Map(b20 -> List(2))
          uids:List(List(2, 0))
          Unrolling x392 = SRAMRead(x268,List(b20, b81),Set())
            Dispatch: ArrayBuffer(2)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,2,ArrayBuffer(2),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 2/0) = List(b549, b2754)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(0)
            x2762 = SRAMBankedRead(x473,Vector(List(x2758, Const(0))),Vector(x2761),Vector(Set(b2755, b559)),Vec[Fix[TRUE,_10,_22]])
          Unrolling x393 = FixAdd(x391,x392)
          x2764 = FixAdd(x2757,x2763)
          [x393] 0: x2764
          Access: x394
          Memory: x321
          Iterators between x394 and x321: b20, b81
          Unroll: Map(b20 -> List(2))
          uids:List(List(2, 0))
          Unrolling x394 = SRAMWrite(x321,x393,List(b20, b81),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,2,ArrayBuffer(2),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 2/0) = List(b549, b2754)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(2) broadcast:List(0)
            x2765 = SRAMBankedWrite(x544,Vector(x2764),Vector(List(x2758, Const(0))),Vector(x2761),Vector(Set(b2755, b559)))
        Created foreach x2766 = UnrolledForeach(Set(b559),x2720,Block(Const(())),List(List(b2754)),List(List(b2755)),None)
          x395 duplicate #List(3)/10 = x2766
          x391 = SRAMRead(x324,List(b81),Set()) [x391]
          x392 = SRAMRead(x268,List(b20, b81),Set()) [x392]
          x393 = FixAdd(x391,x392) [x393]
          x394 = SRAMWrite(x321,x393,List(b20, b81),Set()) [x394]
        
        Unrolling foreach x395
          Access: x391
          Memory: x324
          Iterators between x391 and x324: b81
          Unroll: Map(b20 -> List(3))
          uids:List(List(0))
          Unrolling x391 = SRAMRead(x324,List(b81),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2767)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2769 = SRAMBankedRead(x574,Vector(List(Const(0))),Vector(b2767),Vector(Set(b2768, b560)),Vec[Fix[TRUE,_10,_22]])
          Access: x392
          Memory: x268
          Iterators between x392 and x268: b20, b81
          Unroll: Map(b20 -> List(3))
          uids:List(List(3, 0))
          Unrolling x392 = SRAMRead(x268,List(b20, b81),Set())
            Dispatch: ArrayBuffer(2)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,3,ArrayBuffer(3),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 3/0) = List(b550, b2767)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(0)
            x2775 = SRAMBankedRead(x473,Vector(List(x2771, Const(0))),Vector(x2774),Vector(Set(b2768, b560)),Vec[Fix[TRUE,_10,_22]])
          Unrolling x393 = FixAdd(x391,x392)
          x2777 = FixAdd(x2770,x2776)
          [x393] 0: x2777
          Access: x394
          Memory: x321
          Iterators between x394 and x321: b20, b81
          Unroll: Map(b20 -> List(3))
          uids:List(List(3, 0))
          Unrolling x394 = SRAMWrite(x321,x393,List(b20, b81),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,3,ArrayBuffer(3),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 3/0) = List(b550, b2767)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(3) broadcast:List(0)
            x2778 = SRAMBankedWrite(x544,Vector(x2777),Vector(List(x2771, Const(0))),Vector(x2774),Vector(Set(b2768, b560)))
        Created foreach x2779 = UnrolledForeach(Set(b560),x2721,Block(Const(())),List(List(b2767)),List(List(b2768)),None)
          x395 duplicate #List(4)/10 = x2779
          x391 = SRAMRead(x324,List(b81),Set()) [x391]
          x392 = SRAMRead(x268,List(b20, b81),Set()) [x392]
          x393 = FixAdd(x391,x392) [x393]
          x394 = SRAMWrite(x321,x393,List(b20, b81),Set()) [x394]
        
        Unrolling foreach x395
          Access: x391
          Memory: x324
          Iterators between x391 and x324: b81
          Unroll: Map(b20 -> List(4))
          uids:List(List(0))
          Unrolling x391 = SRAMRead(x324,List(b81),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2780)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2782 = SRAMBankedRead(x576,Vector(List(Const(0))),Vector(b2780),Vector(Set(b2781, b561)),Vec[Fix[TRUE,_10,_22]])
          Access: x392
          Memory: x268
          Iterators between x392 and x268: b20, b81
          Unroll: Map(b20 -> List(4))
          uids:List(List(4, 0))
          Unrolling x392 = SRAMRead(x268,List(b20, b81),Set())
            Dispatch: ArrayBuffer(2)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,4,ArrayBuffer(4),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 4/0) = List(b551, b2780)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(4) broadcast:List(0)
            x2788 = SRAMBankedRead(x473,Vector(List(x2784, Const(0))),Vector(x2787),Vector(Set(b2781, b561)),Vec[Fix[TRUE,_10,_22]])
          Unrolling x393 = FixAdd(x391,x392)
          x2790 = FixAdd(x2783,x2789)
          [x393] 0: x2790
          Access: x394
          Memory: x321
          Iterators between x394 and x321: b20, b81
          Unroll: Map(b20 -> List(4))
          uids:List(List(4, 0))
          Unrolling x394 = SRAMWrite(x321,x393,List(b20, b81),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,4,ArrayBuffer(4),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 4/0) = List(b551, b2780)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(4) broadcast:List(0)
            x2791 = SRAMBankedWrite(x544,Vector(x2790),Vector(List(x2784, Const(0))),Vector(x2787),Vector(Set(b2781, b561)))
        Created foreach x2792 = UnrolledForeach(Set(b561),x2722,Block(Const(())),List(List(b2780)),List(List(b2781)),None)
          x395 duplicate #List(5)/10 = x2792
          x391 = SRAMRead(x324,List(b81),Set()) [x391]
          x392 = SRAMRead(x268,List(b20, b81),Set()) [x392]
          x393 = FixAdd(x391,x392) [x393]
          x394 = SRAMWrite(x321,x393,List(b20, b81),Set()) [x394]
        
        Unrolling foreach x395
          Access: x391
          Memory: x324
          Iterators between x391 and x324: b81
          Unroll: Map(b20 -> List(5))
          uids:List(List(0))
          Unrolling x391 = SRAMRead(x324,List(b81),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2793)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2795 = SRAMBankedRead(x578,Vector(List(Const(0))),Vector(b2793),Vector(Set(b2794, b562)),Vec[Fix[TRUE,_10,_22]])
          Access: x392
          Memory: x268
          Iterators between x392 and x268: b20, b81
          Unroll: Map(b20 -> List(5))
          uids:List(List(5, 0))
          Unrolling x392 = SRAMRead(x268,List(b20, b81),Set())
            Dispatch: ArrayBuffer(2)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,5,ArrayBuffer(5),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 5/0) = List(b552, b2793)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(5) broadcast:List(0)
            x2801 = SRAMBankedRead(x473,Vector(List(x2797, Const(0))),Vector(x2800),Vector(Set(b2794, b562)),Vec[Fix[TRUE,_10,_22]])
          Unrolling x393 = FixAdd(x391,x392)
          x2803 = FixAdd(x2796,x2802)
          [x393] 0: x2803
          Access: x394
          Memory: x321
          Iterators between x394 and x321: b20, b81
          Unroll: Map(b20 -> List(5))
          uids:List(List(5, 0))
          Unrolling x394 = SRAMWrite(x321,x393,List(b20, b81),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,5,ArrayBuffer(5),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 5/0) = List(b552, b2793)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(5) broadcast:List(0)
            x2804 = SRAMBankedWrite(x544,Vector(x2803),Vector(List(x2797, Const(0))),Vector(x2800),Vector(Set(b2794, b562)))
        Created foreach x2805 = UnrolledForeach(Set(b562),x2723,Block(Const(())),List(List(b2793)),List(List(b2794)),None)
          x395 duplicate #List(6)/10 = x2805
          x391 = SRAMRead(x324,List(b81),Set()) [x391]
          x392 = SRAMRead(x268,List(b20, b81),Set()) [x392]
          x393 = FixAdd(x391,x392) [x393]
          x394 = SRAMWrite(x321,x393,List(b20, b81),Set()) [x394]
        
        Unrolling foreach x395
          Access: x391
          Memory: x324
          Iterators between x391 and x324: b81
          Unroll: Map(b20 -> List(6))
          uids:List(List(0))
          Unrolling x391 = SRAMRead(x324,List(b81),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2806)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2808 = SRAMBankedRead(x580,Vector(List(Const(0))),Vector(b2806),Vector(Set(b2807, b563)),Vec[Fix[TRUE,_10,_22]])
          Access: x392
          Memory: x268
          Iterators between x392 and x268: b20, b81
          Unroll: Map(b20 -> List(6))
          uids:List(List(6, 0))
          Unrolling x392 = SRAMRead(x268,List(b20, b81),Set())
            Dispatch: ArrayBuffer(2)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,6,ArrayBuffer(6),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 6/0) = List(b553, b2806)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(6) broadcast:List(0)
            x2814 = SRAMBankedRead(x473,Vector(List(x2810, Const(0))),Vector(x2813),Vector(Set(b2807, b563)),Vec[Fix[TRUE,_10,_22]])
          Unrolling x393 = FixAdd(x391,x392)
          x2816 = FixAdd(x2809,x2815)
          [x393] 0: x2816
          Access: x394
          Memory: x321
          Iterators between x394 and x321: b20, b81
          Unroll: Map(b20 -> List(6))
          uids:List(List(6, 0))
          Unrolling x394 = SRAMWrite(x321,x393,List(b20, b81),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,6,ArrayBuffer(6),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 6/0) = List(b553, b2806)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(6) broadcast:List(0)
            x2817 = SRAMBankedWrite(x544,Vector(x2816),Vector(List(x2810, Const(0))),Vector(x2813),Vector(Set(b2807, b563)))
        Created foreach x2818 = UnrolledForeach(Set(b563),x2724,Block(Const(())),List(List(b2806)),List(List(b2807)),None)
          x395 duplicate #List(7)/10 = x2818
          x391 = SRAMRead(x324,List(b81),Set()) [x391]
          x392 = SRAMRead(x268,List(b20, b81),Set()) [x392]
          x393 = FixAdd(x391,x392) [x393]
          x394 = SRAMWrite(x321,x393,List(b20, b81),Set()) [x394]
        
        Unrolling foreach x395
          Access: x391
          Memory: x324
          Iterators between x391 and x324: b81
          Unroll: Map(b20 -> List(7))
          uids:List(List(0))
          Unrolling x391 = SRAMRead(x324,List(b81),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2819)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2821 = SRAMBankedRead(x582,Vector(List(Const(0))),Vector(b2819),Vector(Set(b2820, b564)),Vec[Fix[TRUE,_10,_22]])
          Access: x392
          Memory: x268
          Iterators between x392 and x268: b20, b81
          Unroll: Map(b20 -> List(7))
          uids:List(List(7, 0))
          Unrolling x392 = SRAMRead(x268,List(b20, b81),Set())
            Dispatch: ArrayBuffer(2)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,7,ArrayBuffer(7),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 7/0) = List(b554, b2819)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(7) broadcast:List(0)
            x2827 = SRAMBankedRead(x473,Vector(List(x2823, Const(0))),Vector(x2826),Vector(Set(b2820, b564)),Vec[Fix[TRUE,_10,_22]])
          Unrolling x393 = FixAdd(x391,x392)
          x2829 = FixAdd(x2822,x2828)
          [x393] 0: x2829
          Access: x394
          Memory: x321
          Iterators between x394 and x321: b20, b81
          Unroll: Map(b20 -> List(7))
          uids:List(List(7, 0))
          Unrolling x394 = SRAMWrite(x321,x393,List(b20, b81),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,7,ArrayBuffer(7),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 7/0) = List(b554, b2819)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(7) broadcast:List(0)
            x2830 = SRAMBankedWrite(x544,Vector(x2829),Vector(List(x2823, Const(0))),Vector(x2826),Vector(Set(b2820, b564)))
        Created foreach x2831 = UnrolledForeach(Set(b564),x2725,Block(Const(())),List(List(b2819)),List(List(b2820)),None)
          x395 duplicate #List(8)/10 = x2831
          x391 = SRAMRead(x324,List(b81),Set()) [x391]
          x392 = SRAMRead(x268,List(b20, b81),Set()) [x392]
          x393 = FixAdd(x391,x392) [x393]
          x394 = SRAMWrite(x321,x393,List(b20, b81),Set()) [x394]
        
        Unrolling foreach x395
          Access: x391
          Memory: x324
          Iterators between x391 and x324: b81
          Unroll: Map(b20 -> List(8))
          uids:List(List(0))
          Unrolling x391 = SRAMRead(x324,List(b81),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2832)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2834 = SRAMBankedRead(x584,Vector(List(Const(0))),Vector(b2832),Vector(Set(b2833, b565)),Vec[Fix[TRUE,_10,_22]])
          Access: x392
          Memory: x268
          Iterators between x392 and x268: b20, b81
          Unroll: Map(b20 -> List(8))
          uids:List(List(8, 0))
          Unrolling x392 = SRAMRead(x268,List(b20, b81),Set())
            Dispatch: ArrayBuffer(2)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,8,ArrayBuffer(8),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 8/0) = List(b555, b2832)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(8) broadcast:List(0)
            x2840 = SRAMBankedRead(x473,Vector(List(x2836, Const(0))),Vector(x2839),Vector(Set(b2833, b565)),Vec[Fix[TRUE,_10,_22]])
          Unrolling x393 = FixAdd(x391,x392)
          x2842 = FixAdd(x2835,x2841)
          [x393] 0: x2842
          Access: x394
          Memory: x321
          Iterators between x394 and x321: b20, b81
          Unroll: Map(b20 -> List(8))
          uids:List(List(8, 0))
          Unrolling x394 = SRAMWrite(x321,x393,List(b20, b81),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,8,ArrayBuffer(8),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 8/0) = List(b555, b2832)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(8) broadcast:List(0)
            x2843 = SRAMBankedWrite(x544,Vector(x2842),Vector(List(x2836, Const(0))),Vector(x2839),Vector(Set(b2833, b565)))
        Created foreach x2844 = UnrolledForeach(Set(b565),x2726,Block(Const(())),List(List(b2832)),List(List(b2833)),None)
          x395 duplicate #List(9)/10 = x2844
          x391 = SRAMRead(x324,List(b81),Set()) [x391]
          x392 = SRAMRead(x268,List(b20, b81),Set()) [x392]
          x393 = FixAdd(x391,x392) [x393]
          x394 = SRAMWrite(x321,x393,List(b20, b81),Set()) [x394]
        
        Unrolling foreach x395
          Access: x391
          Memory: x324
          Iterators between x391 and x324: b81
          Unroll: Map(b20 -> List(9))
          uids:List(List(0))
          Unrolling x391 = SRAMRead(x324,List(b81),Set())
            Dispatch: ArrayBuffer(1)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(1),0,0,ArrayBuffer(0),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 0/0) = List(b2845)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
            x2847 = SRAMBankedRead(x586,Vector(List(Const(0))),Vector(b2845),Vector(Set(b2846, b566)),Vec[Fix[TRUE,_10,_22]])
          Access: x392
          Memory: x268
          Iterators between x392 and x268: b20, b81
          Unroll: Map(b20 -> List(9))
          uids:List(List(9, 0))
          Unrolling x392 = SRAMRead(x268,List(b20, b81),Set())
            Dispatch: ArrayBuffer(2)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,9,ArrayBuffer(9),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 9/0) = List(b556, b2845)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(9) broadcast:List(0)
            x2853 = SRAMBankedRead(x473,Vector(List(x2849, Const(0))),Vector(x2852),Vector(Set(b2846, b566)),Vec[Fix[TRUE,_10,_22]])
          Unrolling x393 = FixAdd(x391,x392)
          x2855 = FixAdd(x2848,x2854)
          [x393] 0: x2855
          Access: x394
          Memory: x321
          Iterators between x394 and x321: b20, b81
          Unroll: Map(b20 -> List(9))
          uids:List(List(9, 0))
          Unrolling x394 = SRAMWrite(x321,x393,List(b20, b81),Set())
            Dispatch: ArrayBuffer(0)
            Lane IDs: ArrayBuffer(0)
            Port:     Port(Some(0),0,9,ArrayBuffer(9),ArrayBuffer(0))
          a2 = 
            lane 0 (castgrp/broadcast 9/0) = List(b556, b2845)
            Masters: Vector(0) // Lanes that do not have duplicated address
            Locks: None
          laneid : 0 lanes:List(0) castgroup:List(9) broadcast:List(0)
            x2856 = SRAMBankedWrite(x544,Vector(x2855),Vector(List(x2849, Const(0))),Vector(x2852),Vector(Set(b2846, b566)))
        Created foreach x2857 = UnrolledForeach(Set(b566),x2727,Block(Const(())),List(List(b2845)),List(List(b2846)),None)
          x395 duplicate #List(10)/10 = x2857
        [x395] 0: x2858
      Created foreach x2859 = UnrolledForeach(Set(),x546,Block(Const(())),List(List(b547, b548, b549, b550, b551, b552, b553, b554, b555, b556)),List(List(b557, b558, b559, b560, b561, b562, b563, b564, b565, b566)),None)
      [x396] 0: Const(())
      Unrolling x443 = UnitPipe(Set(),Block(Const(())),None)
      x443 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes UnitUnroller(Accel,false)
        Unrolling x400 = CounterNew(Const(0),Const(100),Const(1),Const(1))
        x2863 = CounterNew(Const(0),Const(100),Const(1),Const(1))
        [x400] 0: x2863
        Unrolling x401 = CounterChainNew(List(x400))
        x2864 = CounterChainNew(List(x2863))
        [x401] 0: x2864
        Unrolling x442 = OpForeach(Set(),x401,Block(Const(())),List(b256),None)
        x442 = OpForeach(Set(),x401,Block(Const(())),List(b256),None) [duplicate 1/1] in lanes UnitUnroller(DenseTransfer (x443),false)
        Unrolling foreach x442
          Unrolling x438 = UnitPipe(Set(),Block(Const(())),None)
          x438 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x442,x2864,List(b256),false,true)
            Duplicating x402 = RegNew(Const(0))
              #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
              x2867 = RegNew(Const(0))
              Registering duplicates for memory: x402
              (x402,0) -> x2867
            Duplicating x403 = RegNew(Const(0))
              #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
              x2868 = RegNew(Const(0))
              Registering duplicates for memory: x403
              (x403,0) -> x2868
            Duplicating x404 = RegNew(Const(0))
              #0: Memory(List(Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)),1,List(),None)
              x2869 = RegNew(Const(0))
              Registering duplicates for memory: x404
              (x404,0) -> x2869
            Unrolling x424 = UnitPipe(Set(),Block(Const(())),None)
            x424 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes UnitUnroller(x438,false)
              Unrolling x405 = FixMul(b256,Const(3))
              x2870 = FixMul(b2865,Const(3))
              [x405] 0: x2870
              Unrolling x406 = FixDivSRA(x405,Const(4))
              x2871 = FixDivSRA(x2870,Const(4))
              [x406] 0: x2871
              Unrolling x407 = FixSLA(x406,Const(4))
              x2872 = FixSLA(x2871,Const(4))
              [x407] 0: x2872
              Unrolling x408 = FixSLA(x407,Const(2))
              x2873 = FixSLA(x2872,Const(2))
              [x408] 0: x2873
              Unrolling x409 = FixSub(x405,x407)
              x2874 = FixSub(x2870,x2872)
              [x409] 0: x2874
              Unrolling x410 = FixAdd(x409,Const(3))
              x2875 = FixAdd(x2874,Const(3))
              [x410] 0: x2875
              Unrolling x411 = FixAdd(x409,Const(18))
              x2876 = FixAdd(x2874,Const(18))
              [x411] 0: x2876
              Unrolling x412 = FixDivSRA(x411,Const(4))
              x2877 = FixDivSRA(x2876,Const(4))
              [x412] 0: x2877
              Unrolling x413 = FixSLA(x412,Const(4))
              x2878 = FixSLA(x2877,Const(4))
              [x413] 0: x2878
              Unrolling x414 = FixSLA(x413,Const(2))
              x2879 = FixSLA(x2878,Const(2))
              [x414] 0: x2879
              Unrolling x415 = FixToFix(x408,TRUE,_64,_0)
              x2880 = FixToFix(x2873,TRUE,_64,_0)
              [x415] 0: x2880
              Unrolling x416 = DRAMAddress(x267)
              x2881 = DRAMAddress(x470)
              [x416] 0: x2881
              Unrolling x417 = FixAdd(x415,x416)
              x2882 = FixAdd(x2880,x2881)
              [x417] 0: x2882
              Unrolling x418 = SimpleStruct(ArrayBuffer((offset,x417), (size,x414), (isLoad,Const(false))))
              x2883 = SimpleStruct(ArrayBuffer((offset,x2882), (size,x2879), (isLoad,Const(false))))
              [x418] 0: x2883
              Unrolling x419 = DRAMIsAlloc(x267)
              x2884 = DRAMIsAlloc(x470)
              [x419] 0: x2884
              Access: x420
              Memory: x397
              Iterators between x420 and x397: b256
              Unroll: Map(b256 -> List(0))
              uids:List(List(0))
              Unrolling x420 = StreamOutWrite(x397,x418,Set(x419))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2885 = StreamOutBankedWrite(x2860,ArrayBuffer(x2883),ArrayBuffer(Set(x2884)))
              Access: x421
              Memory: x402
              Iterators between x421 and x402: 
              Unroll: Map(b256 -> List(0))
              uids:List(List())
              Unrolling x421 = RegWrite(x402,x409,Set())
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2886 = RegWrite(x2867,x2874,Set())
              Access: x422
              Memory: x403
              Iterators between x422 and x403: 
              Unroll: Map(b256 -> List(0))
              uids:List(List())
              Unrolling x422 = RegWrite(x403,x410,Set())
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2887 = RegWrite(x2868,x2875,Set())
              Access: x423
              Memory: x404
              Iterators between x423 and x404: 
              Unroll: Map(b256 -> List(0))
              uids:List(List())
              Unrolling x423 = RegWrite(x404,x413,Set())
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2888 = RegWrite(x2869,x2878,Set())
            [x424] 0: Const(())
            Access: x425
            Memory: x404
            Iterators between x425 and x404: 
            Unroll: Map(b256 -> List(0))
            uids:List(List())
            Unrolling x425 = RegRead(x404)
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2890 = RegRead(x2869)
            Unrolling x426 = CounterNew(Const(0),x425,Const(1),Const(1))
            x2891 = CounterNew(Const(0),x2890,Const(1),Const(1))
            [x426] 0: x2891
            Unrolling x427 = CounterChainNew(List(x426))
            x2892 = CounterChainNew(List(x2891))
            [x427] 0: x2892
            Unrolling x437 = OpForeach(Set(),x427,Block(Const(())),List(b195),None)
            x437 = OpForeach(Set(),x427,Block(Const(())),List(b195),None) [duplicate 1/1] in lanes UnitUnroller(x438,false)
            Unrolling foreach x437
              Access: x428
              Memory: x402
              Iterators between x428 and x402: b195
              Unroll: Map(b256 -> List(0))
              uids:List(List(0))
              Unrolling x428 = RegRead(x402)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2895 = RegRead(x2867)
              Unrolling x429 = FixLeq(x428,b195)
              x2896 = FixLeq(x2895,b2893)
              [x429] 0: x2896
              Access: x430
              Memory: x403
              Iterators between x430 and x403: b195
              Unroll: Map(b256 -> List(0))
              uids:List(List(0))
              Unrolling x430 = RegRead(x403)
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2897 = RegRead(x2868)
              Unrolling x431 = FixLst(b195,x430)
              x2898 = FixLst(b2893,x2897)
              [x431] 0: x2898
              Unrolling x432 = And(x429,x431)
              x2899 = And(x2896,x2898)
              [x432] 0: x2899
              Unrolling x433 = FixSub(b195,x428)
              x2900 = FixSub(b2893,x2895)
              [x433] 0: x2900
              Access: x434
              Memory: x321
              Iterators between x434 and x321: b256, b195
              Unroll: Map(b256 -> List(0))
              uids:List(List(0, 0))
              Unrolling x434 = SRAMRead(x321,List(b256, x433),Set(x432))
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              a2 = 
                lane 0 (castgrp/broadcast 0/0) = List(b2865, x2900)
                Masters: Vector(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2905 = SRAMBankedRead(x544,Vector(List(x2901, Const(0))),Vector(x2904),Vector(Set(x2899, b2894)),Vec[Fix[TRUE,_10,_22]])
              Unrolling x435 = SimpleStruct(ArrayBuffer((_1,x434), (_2,x432)))
              x2907 = SimpleStruct(ArrayBuffer((_1,x2906), (_2,x2899)))
              [x435] 0: x2907
              Access: x436
              Memory: x398
              Iterators between x436 and x398: b256, b195
              Unroll: Map(b256 -> List(0))
              uids:List(List(0, 0))
              Unrolling x436 = StreamOutWrite(x398,x435,Set())
                Dispatch: ArrayBuffer(0)
                Lane IDs: ArrayBuffer(0)
                Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
                Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
                Locks: None
              laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
                x2908 = StreamOutBankedWrite(x2861,ArrayBuffer(x2907),ArrayBuffer(Set(b2894)))
            Created foreach x2909 = UnrolledForeach(Set(),x2892,Block(Const(())),List(List(b2893)),List(List(b2894)),None)
            [x437] 0: Const(())
          [x438] 0: Const(())
          Unrolling x439 = FringeDenseStore(x267,x397,x398,x399)
          x2911 = FringeDenseStore(x470,x2860,x2861,x2862)
          [x439] 0: x2911
          Unrolling x441 = UnitPipe(Set(),Block(Const(())),None)
          x441 = UnitPipe(Set(),Block(Const(())),None) [duplicate 1/1] in lanes PartialUnroller(x442,x2864,List(b256),false,true)
            Access: x440
            Memory: x399
            Iterators between x440 and x399: b256
            Unroll: Map(b256 -> List(0))
            uids:List(List(0))
            Unrolling x440 = StreamInRead(x399,Set())
              Dispatch: ArrayBuffer(0)
              Lane IDs: ArrayBuffer(0)
              Port:     Port(Some(0),0,0,ArrayBuffer(0),ArrayBuffer(0))
              Masters: ArrayBuffer(0) // Lanes that do not have duplicated address
              Locks: None
            laneid : 0 lanes:List(0) castgroup:List(0) broadcast:List(0)
              x2912 = StreamInBankedRead(x2862,ArrayBuffer(Set()))
          [x441] 0: Const(())
        Created foreach x2915 = UnrolledForeach(Set(),x2864,Block(Const(())),List(List(b2865)),List(List(b2866)),None)
        [x442] 0: Const(())
      [x443] 0: Const(())
    Unrolling x445 = ArrayNew(Const(300))
    x2917 = ArrayNew(Const(300))
    [x445] 0: x2917
    Unrolling x446 = GetMem(x267,x445)
    x2918 = GetMem(x470,x2917)
    [x446] 0: x2918
    Unrolling x447 = OpenCSVFile(Const("/home/hhollen/ee109finalHH/output.csv"),true)
    x2919 = OpenCSVFile(Const("/home/hhollen/ee109finalHH/output.csv"),true)
    [x447] 0: x2919
    Unrolling x448 = ArrayLength(x445)
    x2920 = ArrayLength(x2917)
    [x448] 0: x2920
    Unrolling x451 = WriteTokens(x447,Const(","),x448,Block((b95) => x450))
      Unrolling x449 = ArrayApply(x445,b95)
      x2921 = ArrayApply(x2917,b95)
      [x449] 0: x2921
      Unrolling x450 = FixToText(x449,None)
      x2922 = FixToText(x2921,None)
      [x450] 0: x2922
    x2923 = WriteTokens(x2919,Const(","),x2920,Block((b95) => x2922))
    [x451] 0: x2923
    Unrolling x452 = CloseCSVFile(x447)
    x2924 = CloseCSVFile(x2919)
    [x452] 0: x2924
    Unrolling x453 = AssertIf(Set(),Const(true),Some(Const("ProjectTemplate.scala:58:11: Assertion failure")))
    x2925 = AssertIf(Set(),Const(true),Some(Const("ProjectTemplate.scala:58:11: Assertion failure")))
    [x453] 0: x2925
