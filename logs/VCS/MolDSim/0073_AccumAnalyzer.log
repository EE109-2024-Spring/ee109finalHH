  x467 = ArrayMap(x463,Block((x463,b5) => x465),Block((x465) => x466))
  x444 = AccelScope(Block(Const(())))
      x543 = UnitPipe(Set(),Block(Const(())),None)
          x499 = UnrolledForeach(Set(),x478,Block(Const(())),List(List(b479)),List(List(b480)),None)
            Working on pipeLatencies of result Vector(Const(()), x492, x498, x495, x496), schedule Vector(x2968, x2969, x482, x483, x2970, x485, x486, x487, x488, x489, x2971, x491, x492, x493, x494, x495, x496, x497, x498)
            Memories with both reads and writes in this scope: Set()
            Done finding cycles: Vector(), Map()
            ----------------------------------
            Computing pipeLatencies for scope:
              x2968 = FixSLA(b479,Const(1))
              x2969 = FixAdd(x2968,b479)
              x482 = FixDivSRA(x2969,Const(4))
              x483 = FixSLA(x482,Const(4))
              x2970 = FixSLA(x482,Const(6))
              x485 = FixSub(x2969,x483)
              x486 = FixAdd(x485,Const(3))
              x487 = FixAdd(x485,Const(18))
              x488 = FixDivSRA(x487,Const(4))
              x489 = FixSLA(x488,Const(4))
              x2971 = FixSLA(x488,Const(6))
              x491 = FixToFix(x2970,TRUE,_64,_0)
              x492 = DRAMAddress(x468)
              x493 = FixAdd(x491,x492)
              x494 = SimpleStruct(ArrayBuffer((offset,x493), (size,x2971), (isLoad,Const(true))))
              x495 = DRAMIsAlloc(x468)
              x496 = StreamOutBankedWrite(x474,ArrayBuffer(x494),ArrayBuffer(Set(x495, b480)))
              x497 = SimpleStruct(ArrayBuffer((size,x489), (start,x485), (end,x486)))
              x498 = FIFOBankedEnq(x475,ArrayBuffer(x497),ArrayBuffer(Set(Const(true), b480)))
            Computing fullDFS: Const(())
            Computing fullDFS: x492
            cur: x492, inReduce: false, latency: 0.0
            [0.0 = max(0) + 0.0] x492 = DRAMAddress(x468)
            Computing fullDFS: x498
            Computing fullDFS: x497
            Computing fullDFS: x485
            Computing fullDFS: x2969
            Computing fullDFS: x2968
            cur: x2968, inReduce: false, latency: 0.2
            [0.2 = max(0) + 0.2] x2968 = FixSLA(b479,Const(1))
            [1.2 = max(0.2) + 1.0] x2969 = FixAdd(x2968,b479)
            Computing fullDFS: x483
            Computing fullDFS: x482
            [1.4 = max(1.2) + 0.2] x482 = FixDivSRA(x2969,Const(4))
            [1.5999999999999999 = max(1.4) + 0.2] x483 = FixSLA(x482,Const(4))
            [2.6 = max(1.2, 1.6) + 1.0] x485 = FixSub(x2969,x483)
            Computing fullDFS: x486
            [3.6 = max(2.6) + 1.0] x486 = FixAdd(x485,Const(3))
            Computing fullDFS: x489
            Computing fullDFS: x488
            Computing fullDFS: x487
            [3.6 = max(2.6) + 1.0] x487 = FixAdd(x485,Const(18))
            [3.8000000000000003 = max(3.6) + 0.2] x488 = FixDivSRA(x487,Const(4))
            [4.0 = max(3.8) + 0.2] x489 = FixSLA(x488,Const(4))
            [4.0 = max(2.6, 3.6, 4.0) + 0.0] x497 = SimpleStruct(ArrayBuffer((size,x489), (start,x485), (end,x486)))
            [5.0 = max(4.0) + 1.0] x498 = FIFOBankedEnq(x475,ArrayBuffer(x497),ArrayBuffer(Set(Const(true), b480)))
            Computing fullDFS: x495
            cur: x495, inReduce: false, latency: 0.0
            [0.0 = max(0) + 0.0] x495 = DRAMIsAlloc(x468)
            Computing fullDFS: x496
            Computing fullDFS: x494
            Computing fullDFS: x2971
            [4.0 = max(3.8) + 0.2] x2971 = FixSLA(x488,Const(6))
            Computing fullDFS: x493
            Computing fullDFS: x491
            Computing fullDFS: x2970
            [1.5999999999999999 = max(1.4) + 0.2] x2970 = FixSLA(x482,Const(6))
            [1.6 = max(1.6) + 0.0] x491 = FixToFix(x2970,TRUE,_64,_0)
            [3.6 = max(1.6, 0.0) + 2.0] x493 = FixAdd(x491,x492)
            [4.0 = max(4.0, 3.6) + 0.0] x494 = SimpleStruct(ArrayBuffer((offset,x493), (size,x2971), (isLoad,Const(true))))
            [4.0 = max(4.0, 0.0) + 0.0] x496 = StreamOutBankedWrite(x474,ArrayBuffer(x494),ArrayBuffer(Set(x495, b480)))
            Cycles: Map()
              Schedule after pipeLatencies calculation:
              [0.0] x492 = DRAMAddress(x468)
              [0.0] x495 = DRAMIsAlloc(x468)
              [0.2] x2968 = FixSLA(b479,Const(1))
              [1.2] x2969 = FixAdd(x2968,b479)
              [1.4] x482 = FixDivSRA(x2969,Const(4))
              [1.6] x483 = FixSLA(x482,Const(4))
              [1.6] x2970 = FixSLA(x482,Const(6))
              [1.6] x491 = FixToFix(x2970,TRUE,_64,_0)
              [2.6] x485 = FixSub(x2969,x483)
              [3.6] x486 = FixAdd(x485,Const(3))
              [3.6] x487 = FixAdd(x485,Const(18))
              [3.6] x493 = FixAdd(x491,x492)
              [3.8] x488 = FixDivSRA(x487,Const(4))
              [4.0] x489 = FixSLA(x488,Const(4))
              [4.0] x2971 = FixSLA(x488,Const(6))
              [4.0] x494 = SimpleStruct(ArrayBuffer((offset,x493), (size,x2971), (isLoad,Const(true))))
              [4.0] x496 = StreamOutBankedWrite(x474,ArrayBuffer(x494),ArrayBuffer(Set(x495, b480)))
              [4.0] x497 = SimpleStruct(ArrayBuffer((size,x489), (start,x485), (end,x486)))
              [5.0] x498 = FIFOBankedEnq(x475,ArrayBuffer(x497),ArrayBuffer(Set(Const(true), b480)))
          x542 = UnrolledForeach(Set(),x502,Block(Const(())),List(List(b503)),List(List(b504)),None)
              x516 = UnitPipe(Set(b504),Block(Const(())),None)
                Working on pipeLatencies of result Vector(Const(()), x511, x515, x508, x513), schedule Vector(x508, x509, x510, x511, x512, x513, x514, x515)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x508 = FIFOBankedDeq(x475,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  x509 = VecApply(x508,0)
                  x510 = FieldApply(x509,start)
                  x511 = RegWrite(x505,x510,Set())
                  x512 = FieldApply(x509,end)
                  x513 = RegWrite(x506,x512,Set())
                  x514 = FieldApply(x509,size)
                  x515 = RegWrite(x507,x514,Set())
                Computing fullDFS: Const(())
                Computing fullDFS: x511
                Computing fullDFS: x510
                Computing fullDFS: x509
                Computing fullDFS: x508
                cur: x508, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x508 = FIFOBankedDeq(x475,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                [0.0 = max(0.0) + 0.0] x509 = VecApply(x508,0)
                [0.0 = max(0.0) + 0.0] x510 = FieldApply(x509,start)
                [1.0 = max(0.0) + 1.0] x511 = RegWrite(x505,x510,Set())
                Computing fullDFS: x515
                Computing fullDFS: x514
                [0.0 = max(0.0) + 0.0] x514 = FieldApply(x509,size)
                [1.0 = max(0.0) + 1.0] x515 = RegWrite(x507,x514,Set())
                Computing fullDFS: x513
                Computing fullDFS: x512
                [0.0 = max(0.0) + 0.0] x512 = FieldApply(x509,end)
                [1.0 = max(0.0) + 1.0] x513 = RegWrite(x506,x512,Set())
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [0.0] x508 = FIFOBankedDeq(x475,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd])
                  [0.0] x509 = VecApply(x508,0)
                  [0.0] x510 = FieldApply(x509,start)
                  [0.0] x512 = FieldApply(x509,end)
                  [0.0] x514 = FieldApply(x509,size)
                  [1.0] x511 = RegWrite(x505,x510,Set())
                  [1.0] x513 = RegWrite(x506,x512,Set())
                  [1.0] x515 = RegWrite(x507,x514,Set())
              x541 = UnrolledForeach(Set(b504),x519,Block(Const(())),List(List(b520)),List(List(b521)),None)
                Working on pipeLatencies of result Vector(Const(()), x534, x522, x540, x539, x524, x528), schedule Vector(x522, x523, x524, x525, x526, x527, x528, x529, x2972, x531, x2973, x2974, x533, x534, x535, x536, x2975, x2976, x538, x539, x540)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x522 = RegRead(x505)
                  x523 = FixLeq(x522,b520)
                  x524 = RegRead(x506)
                  x525 = FixLst(b520,x524)
                  x526 = And(x523,x525)
                  x527 = FixSub(b520,x522)
                  x528 = StreamInBankedRead(x476,ArrayBuffer(Set(b521, b504)))
                  x529 = VecApply(x528,0)
                  x2972 = FixAnd(b503,Const(1))
                  x531 = FixDivSRA(b503,Const(1))
                  x2973 = FixSLA(x531,Const(1))
                  x2974 = FixAdd(x2973,x531)
                  x533 = FixAdd(x2974,x527)
                  x534 = SRAMBankedWrite(x472,Vector(x529),Vector(List(x2972, Const(0))),Vector(x533),Vector(Set(x526, b521, b504)))
                  x535 = FixMod(b503,Const(10))
                  x536 = FixDiv(b503,Const(10))
                  x2975 = FixSLA(x536,Const(1))
                  x2976 = FixAdd(x2975,x536)
                  x538 = FixAdd(x2976,x527)
                  x539 = SRAMBankedWrite(x471,Vector(x529),Vector(List(x535, Const(0))),Vector(x538),Vector(Set(x526, b521, b504)))
                  x540 = SRAMBankedWrite(x473,Vector(x529),Vector(List(x535, Const(0))),Vector(x538),Vector(Set(x526, b521, b504)))
                Computing fullDFS: Const(())
                Computing fullDFS: x534
                Computing fullDFS: x526
                Computing fullDFS: x523
                Computing fullDFS: x522
                cur: x522, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x522 = RegRead(x505)
                [0.4 = max(0.0) + 0.4] x523 = FixLeq(x522,b520)
                Computing fullDFS: x525
                Computing fullDFS: x524
                cur: x524, inReduce: false, latency: 0.0
                [0.0 = max(0) + 0.0] x524 = RegRead(x506)
                [0.4 = max(0.0) + 0.4] x525 = FixLst(b520,x524)
                [0.6000000000000001 = max(0.4, 0.4) + 0.2] x526 = And(x523,x525)
                Computing fullDFS: x529
                Computing fullDFS: x528
                cur: x528, inReduce: false, latency: 1.0
                [1.0 = max(0) + 1.0] x528 = StreamInBankedRead(x476,ArrayBuffer(Set(b521, b504)))
                [1.0 = max(1.0) + 0.0] x529 = VecApply(x528,0)
                Computing fullDFS: x2972
                cur: x2972, inReduce: false, latency: 0.2
                [0.2 = max(0) + 0.2] x2972 = FixAnd(b503,Const(1))
                Computing fullDFS: x533
                Computing fullDFS: x527
                [1.0 = max(0.0) + 1.0] x527 = FixSub(b520,x522)
                Computing fullDFS: x2974
                Computing fullDFS: x531
                cur: x531, inReduce: false, latency: 0.2
                [0.2 = max(0) + 0.2] x531 = FixDivSRA(b503,Const(1))
                Computing fullDFS: x2973
                [0.4 = max(0.2) + 0.2] x2973 = FixSLA(x531,Const(1))
                [1.4 = max(0.2, 0.4) + 1.0] x2974 = FixAdd(x2973,x531)
                [2.4 = max(1.0, 1.4) + 1.0] x533 = FixAdd(x2974,x527)
                [3.4 = max(0.6, 1.0, 0.2, 2.4) + 1.0] x534 = SRAMBankedWrite(x472,Vector(x529),Vector(List(x2972, Const(0))),Vector(x533),Vector(Set(x526, b521, b504)))
                Computing fullDFS: x540
                Computing fullDFS: x535
                cur: x535, inReduce: false, latency: 16.0
                [16.0 = max(0) + 16.0] x535 = FixMod(b503,Const(10))
                Computing fullDFS: x538
                Computing fullDFS: x2976
                Computing fullDFS: x536
                cur: x536, inReduce: false, latency: 20.0
                [20.0 = max(0) + 20.0] x536 = FixDiv(b503,Const(10))
                Computing fullDFS: x2975
                [20.2 = max(20.0) + 0.2] x2975 = FixSLA(x536,Const(1))
                [21.2 = max(20.0, 20.2) + 1.0] x2976 = FixAdd(x2975,x536)
                [22.2 = max(1.0, 21.2) + 1.0] x538 = FixAdd(x2976,x527)
                [23.2 = max(0.6, 1.0, 16.0, 22.2) + 1.0] x540 = SRAMBankedWrite(x473,Vector(x529),Vector(List(x535, Const(0))),Vector(x538),Vector(Set(x526, b521, b504)))
                Computing fullDFS: x539
                [23.2 = max(0.6, 1.0, 16.0, 22.2) + 1.0] x539 = SRAMBankedWrite(x471,Vector(x529),Vector(List(x535, Const(0))),Vector(x538),Vector(Set(x526, b521, b504)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [0.0] x522 = RegRead(x505)
                  [0.0] x524 = RegRead(x506)
                  [0.2] x2972 = FixAnd(b503,Const(1))
                  [0.2] x531 = FixDivSRA(b503,Const(1))
                  [0.4] x523 = FixLeq(x522,b520)
                  [0.4] x525 = FixLst(b520,x524)
                  [0.4] x2973 = FixSLA(x531,Const(1))
                  [0.6] x526 = And(x523,x525)
                  [1.0] x527 = FixSub(b520,x522)
                  [1.0] x528 = StreamInBankedRead(x476,ArrayBuffer(Set(b521, b504)))
                  [1.0] x529 = VecApply(x528,0)
                  [1.4] x2974 = FixAdd(x2973,x531)
                  [2.4] x533 = FixAdd(x2974,x527)
                  [3.4] x534 = SRAMBankedWrite(x472,Vector(x529),Vector(List(x2972, Const(0))),Vector(x533),Vector(Set(x526, b521, b504)))
                  [16.0] x535 = FixMod(b503,Const(10))
                  [20.0] x536 = FixDiv(b503,Const(10))
                  [20.2] x2975 = FixSLA(x536,Const(1))
                  [21.2] x2976 = FixAdd(x2975,x536)
                  [22.2] x538 = FixAdd(x2976,x527)
                  [23.2] x539 = SRAMBankedWrite(x471,Vector(x529),Vector(List(x535, Const(0))),Vector(x538),Vector(Set(x526, b521, b504)))
                  [23.2] x540 = SRAMBankedWrite(x473,Vector(x529),Vector(List(x535, Const(0))),Vector(x538),Vector(Set(x526, b521, b504)))
      x2859 = UnrolledForeach(Set(),x546,Block(Const(())),List(List(b547, b548, b549, b550, b551, b552, b553, b554, b555, b556)),List(List(b557, b558, b559, b560, b561, b562, b563, b564, b565, b566)),None)
          x2707 = ParallelPipe(Set(),Block(Const(())))
              x834 = UnrolledReduce(Set(b557),x597,Block((x567) => Const(())),List(List(b627, b628)),List(List(b630, b631)),None)
                  x689 = ParallelPipe(Set(b557),Block(Const(())))
                      x667 = UnrolledForeach(Set(b630, b557),x645,Block(Const(())),List(List(b647)),List(List(b648)),None)
                        Working on pipeLatencies of result Vector(Const(()), x666, x665, x662, x653, x663, x664, x659), schedule Vector(x650, x2977, x2978, x652, x653, x654, x656, x2979, x2980, x658, x659, x660, x661, x662, x663, x664, x665, x666)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x650 = FixDiv(b547,Const(10))
                          x2977 = FixSLA(x650,Const(1))
                          x2978 = FixAdd(x2977,x650)
                          x652 = FixAdd(x2978,b647)
                          x653 = SRAMBankedRead(x471,Vector(List(Const(0), Const(0))),Vector(x652),Vector(Set(b648, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                          x654 = VecApply(x653,0)
                          x656 = FixDivSRA(b627,Const(1))
                          x2979 = FixSLA(x656,Const(1))
                          x2980 = FixAdd(x2979,x656)
                          x658 = FixAdd(x2980,b647)
                          x659 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x658),Vector(Set(b648, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                          x660 = VecApply(x659,0)
                          x661 = FixSub(x654,x660)
                          x662 = SRAMBankedWrite(x634,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                          x663 = SRAMBankedWrite(x637,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                          x664 = SRAMBankedWrite(x633,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                          x665 = SRAMBankedWrite(x636,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                          x666 = SRAMBankedWrite(x635,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x666
                        Computing fullDFS: x661
                        Computing fullDFS: x654
                        Computing fullDFS: x653
                        Computing fullDFS: x652
                        Computing fullDFS: x2978
                        Computing fullDFS: x650
                        cur: x650, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x650 = FixDiv(b547,Const(10))
                        Computing fullDFS: x2977
                        [20.2 = max(20.0) + 0.2] x2977 = FixSLA(x650,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x2978 = FixAdd(x2977,x650)
                        [22.2 = max(21.2) + 1.0] x652 = FixAdd(x2978,b647)
                        [24.2 = max(22.2) + 2.0] x653 = SRAMBankedRead(x471,Vector(List(Const(0), Const(0))),Vector(x652),Vector(Set(b648, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x654 = VecApply(x653,0)
                        Computing fullDFS: x660
                        Computing fullDFS: x659
                        Computing fullDFS: x658
                        Computing fullDFS: x2980
                        Computing fullDFS: x656
                        cur: x656, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x656 = FixDivSRA(b627,Const(1))
                        Computing fullDFS: x2979
                        [0.4 = max(0.2) + 0.2] x2979 = FixSLA(x656,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x2980 = FixAdd(x2979,x656)
                        [2.4 = max(1.4) + 1.0] x658 = FixAdd(x2980,b647)
                        [4.4 = max(2.4) + 2.0] x659 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x658),Vector(Set(b648, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x660 = VecApply(x659,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x661 = FixSub(x654,x660)
                        [26.2 = max(25.2) + 1.0] x666 = SRAMBankedWrite(x635,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                        Computing fullDFS: x665
                        [26.2 = max(25.2) + 1.0] x665 = SRAMBankedWrite(x636,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                        Computing fullDFS: x662
                        [26.2 = max(25.2) + 1.0] x662 = SRAMBankedWrite(x634,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                        Computing fullDFS: x663
                        [26.2 = max(25.2) + 1.0] x663 = SRAMBankedWrite(x637,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                        Computing fullDFS: x664
                        [26.2 = max(25.2) + 1.0] x664 = SRAMBankedWrite(x633,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x656 = FixDivSRA(b627,Const(1))
                          [0.4] x2979 = FixSLA(x656,Const(1))
                          [1.4] x2980 = FixAdd(x2979,x656)
                          [2.4] x658 = FixAdd(x2980,b647)
                          [4.4] x659 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x658),Vector(Set(b648, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x660 = VecApply(x659,0)
                          [20.0] x650 = FixDiv(b547,Const(10))
                          [20.2] x2977 = FixSLA(x650,Const(1))
                          [21.2] x2978 = FixAdd(x2977,x650)
                          [22.2] x652 = FixAdd(x2978,b647)
                          [24.2] x653 = SRAMBankedRead(x471,Vector(List(Const(0), Const(0))),Vector(x652),Vector(Set(b648, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x654 = VecApply(x653,0)
                          [25.2] x661 = FixSub(x654,x660)
                          [26.2] x662 = SRAMBankedWrite(x634,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                          [26.2] x663 = SRAMBankedWrite(x637,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                          [26.2] x664 = SRAMBankedWrite(x633,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                          [26.2] x665 = SRAMBankedWrite(x636,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                          [26.2] x666 = SRAMBankedWrite(x635,Vector(x661),Vector(List(Const(0))),Vector(b647),Vector(Set(b648, b630, b557)))
                      x688 = UnrolledForeach(Set(b631, b557),x646,Block(Const(())),List(List(b668)),List(List(b669)),None)
                        Working on pipeLatencies of result Vector(Const(()), x683, x687, x686, x674, x685, x680, x684), schedule Vector(x671, x2981, x2982, x673, x674, x675, x677, x2983, x2984, x679, x680, x681, x682, x683, x684, x685, x686, x687)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x671 = FixDiv(b547,Const(10))
                          x2981 = FixSLA(x671,Const(1))
                          x2982 = FixAdd(x2981,x671)
                          x673 = FixAdd(x2982,b668)
                          x674 = SRAMBankedRead(x471,Vector(List(Const(0), Const(0))),Vector(x673),Vector(Set(b669, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                          x675 = VecApply(x674,0)
                          x677 = FixDivSRA(b628,Const(1))
                          x2983 = FixSLA(x677,Const(1))
                          x2984 = FixAdd(x2983,x677)
                          x679 = FixAdd(x2984,b668)
                          x680 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x679),Vector(Set(b669, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                          x681 = VecApply(x680,0)
                          x682 = FixSub(x675,x681)
                          x683 = SRAMBankedWrite(x638,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                          x684 = SRAMBankedWrite(x642,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                          x685 = SRAMBankedWrite(x641,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                          x686 = SRAMBankedWrite(x640,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                          x687 = SRAMBankedWrite(x639,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x683
                        Computing fullDFS: x682
                        Computing fullDFS: x675
                        Computing fullDFS: x674
                        Computing fullDFS: x673
                        Computing fullDFS: x2982
                        Computing fullDFS: x671
                        cur: x671, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x671 = FixDiv(b547,Const(10))
                        Computing fullDFS: x2981
                        [20.2 = max(20.0) + 0.2] x2981 = FixSLA(x671,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x2982 = FixAdd(x2981,x671)
                        [22.2 = max(21.2) + 1.0] x673 = FixAdd(x2982,b668)
                        [24.2 = max(22.2) + 2.0] x674 = SRAMBankedRead(x471,Vector(List(Const(0), Const(0))),Vector(x673),Vector(Set(b669, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x675 = VecApply(x674,0)
                        Computing fullDFS: x681
                        Computing fullDFS: x680
                        Computing fullDFS: x679
                        Computing fullDFS: x2984
                        Computing fullDFS: x677
                        cur: x677, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x677 = FixDivSRA(b628,Const(1))
                        Computing fullDFS: x2983
                        [0.4 = max(0.2) + 0.2] x2983 = FixSLA(x677,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x2984 = FixAdd(x2983,x677)
                        [2.4 = max(1.4) + 1.0] x679 = FixAdd(x2984,b668)
                        [4.4 = max(2.4) + 2.0] x680 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x679),Vector(Set(b669, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x681 = VecApply(x680,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x682 = FixSub(x675,x681)
                        [26.2 = max(25.2) + 1.0] x683 = SRAMBankedWrite(x638,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                        Computing fullDFS: x687
                        [26.2 = max(25.2) + 1.0] x687 = SRAMBankedWrite(x639,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                        Computing fullDFS: x686
                        [26.2 = max(25.2) + 1.0] x686 = SRAMBankedWrite(x640,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                        Computing fullDFS: x685
                        [26.2 = max(25.2) + 1.0] x685 = SRAMBankedWrite(x641,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                        Computing fullDFS: x684
                        [26.2 = max(25.2) + 1.0] x684 = SRAMBankedWrite(x642,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x677 = FixDivSRA(b628,Const(1))
                          [0.4] x2983 = FixSLA(x677,Const(1))
                          [1.4] x2984 = FixAdd(x2983,x677)
                          [2.4] x679 = FixAdd(x2984,b668)
                          [4.4] x680 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x679),Vector(Set(b669, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x681 = VecApply(x680,0)
                          [20.0] x671 = FixDiv(b547,Const(10))
                          [20.2] x2981 = FixSLA(x671,Const(1))
                          [21.2] x2982 = FixAdd(x2981,x671)
                          [22.2] x673 = FixAdd(x2982,b668)
                          [24.2] x674 = SRAMBankedRead(x471,Vector(List(Const(0), Const(0))),Vector(x673),Vector(Set(b669, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x675 = VecApply(x674,0)
                          [25.2] x682 = FixSub(x675,x681)
                          [26.2] x683 = SRAMBankedWrite(x638,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                          [26.2] x684 = SRAMBankedWrite(x642,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                          [26.2] x685 = SRAMBankedWrite(x641,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                          [26.2] x686 = SRAMBankedWrite(x640,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                          [26.2] x687 = SRAMBankedWrite(x639,Vector(x682),Vector(List(Const(0))),Vector(b668),Vector(Set(b669, b631, b557)))
                  x718 = ParallelPipe(Set(b557),Block(Const(())))
                      x704 = UnitPipe(Set(b630, b557),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x692, x695, x703, x699), schedule Vector(x692, x693, x695, x696, x697, x2985, x699, x700, x2986, x703)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x692 = SRAMBankedRead(x633,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x693 = VecApply(x692,0)
                          x695 = SRAMBankedRead(x634,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x696 = VecApply(x695,0)
                          x697 = FixMul(x696,x696)
                          x2985 = FixFMA(x693,x693,x697)
                          x699 = SRAMBankedRead(x635,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x700 = VecApply(x699,0)
                          x2986 = FixFMA(x700,x700,x2985)
                          x703 = SRAMBankedWrite(x690,Vector(x2986),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x692
                        cur: x692, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x692 = SRAMBankedRead(x633,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x695
                        cur: x695, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x695 = SRAMBankedRead(x634,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x703
                        Computing fullDFS: x2986
                        Computing fullDFS: x2985
                        Computing fullDFS: x693
                        [2.0 = max(2.0) + 0.0] x693 = VecApply(x692,0)
                        Computing fullDFS: x697
                        Computing fullDFS: x696
                        [2.0 = max(2.0) + 0.0] x696 = VecApply(x695,0)
                        [8.0 = max(2.0) + 6.0] x697 = FixMul(x696,x696)
                        [14.0 = max(2.0, 8.0) + 6.0] x2985 = FixFMA(x693,x693,x697)
                        Computing fullDFS: x700
                        Computing fullDFS: x699
                        cur: x699, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x699 = SRAMBankedRead(x635,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x700 = VecApply(x699,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x2986 = FixFMA(x700,x700,x2985)
                        [21.0 = max(20.0) + 1.0] x703 = SRAMBankedWrite(x690,Vector(x2986),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x692 = SRAMBankedRead(x633,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x693 = VecApply(x692,0)
                          [2.0] x695 = SRAMBankedRead(x634,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x696 = VecApply(x695,0)
                          [2.0] x699 = SRAMBankedRead(x635,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x700 = VecApply(x699,0)
                          [8.0] x697 = FixMul(x696,x696)
                          [14.0] x2985 = FixFMA(x693,x693,x697)
                          [20.0] x2986 = FixFMA(x700,x700,x2985)
                          [21.0] x703 = SRAMBankedWrite(x690,Vector(x2986),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x717 = UnitPipe(Set(b631, b557),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x712, x705, x716, x708), schedule Vector(x705, x706, x708, x709, x710, x2987, x712, x713, x2988, x716)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x705 = SRAMBankedRead(x638,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x706 = VecApply(x705,0)
                          x708 = SRAMBankedRead(x639,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x709 = VecApply(x708,0)
                          x710 = FixMul(x709,x709)
                          x2987 = FixFMA(x706,x706,x710)
                          x712 = SRAMBankedRead(x640,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x713 = VecApply(x712,0)
                          x2988 = FixFMA(x713,x713,x2987)
                          x716 = SRAMBankedWrite(x691,Vector(x2988),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x712
                        cur: x712, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x712 = SRAMBankedRead(x640,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x705
                        cur: x705, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x705 = SRAMBankedRead(x638,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x716
                        Computing fullDFS: x2988
                        Computing fullDFS: x2987
                        Computing fullDFS: x706
                        [2.0 = max(2.0) + 0.0] x706 = VecApply(x705,0)
                        Computing fullDFS: x710
                        Computing fullDFS: x709
                        Computing fullDFS: x708
                        cur: x708, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x708 = SRAMBankedRead(x639,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x709 = VecApply(x708,0)
                        [8.0 = max(2.0) + 6.0] x710 = FixMul(x709,x709)
                        [14.0 = max(2.0, 8.0) + 6.0] x2987 = FixFMA(x706,x706,x710)
                        Computing fullDFS: x713
                        [2.0 = max(2.0) + 0.0] x713 = VecApply(x712,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x2988 = FixFMA(x713,x713,x2987)
                        [21.0 = max(20.0) + 1.0] x716 = SRAMBankedWrite(x691,Vector(x2988),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x705 = SRAMBankedRead(x638,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x706 = VecApply(x705,0)
                          [2.0] x708 = SRAMBankedRead(x639,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x709 = VecApply(x708,0)
                          [2.0] x712 = SRAMBankedRead(x640,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x713 = VecApply(x712,0)
                          [8.0] x710 = FixMul(x709,x709)
                          [14.0] x2987 = FixFMA(x706,x706,x710)
                          [20.0] x2988 = FixFMA(x713,x713,x2987)
                          [21.0] x716 = SRAMBankedWrite(x691,Vector(x2988),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x743 = ParallelPipe(Set(b557),Block(Const(())))
                      x733 = UnitPipe(Set(b630, b557),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x725, x731, x732), schedule Vector(x725, x726, x727, x728, x729, x730, x731, x732)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x725 = SRAMBankedRead(x690,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x726 = VecApply(x725,0)
                          x727 = FixLst(Const(0),x726)
                          x728 = FixLst(Const(1),x726)
                          x729 = And(x727,x728)
                          x730 = Not(x729)
                          x731 = RegWrite(x721,x729,Set())
                          x732 = RegWrite(x723,x730,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x725
                        cur: x725, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x725 = SRAMBankedRead(x690,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x731
                        Computing fullDFS: x729
                        Computing fullDFS: x727
                        Computing fullDFS: x726
                        [2.0 = max(2.0) + 0.0] x726 = VecApply(x725,0)
                        [2.4 = max(2.0) + 0.4] x727 = FixLst(Const(0),x726)
                        Computing fullDFS: x728
                        [2.4 = max(2.0) + 0.4] x728 = FixLst(Const(1),x726)
                        [2.6 = max(2.4, 2.4) + 0.2] x729 = And(x727,x728)
                        [3.6 = max(2.6) + 1.0] x731 = RegWrite(x721,x729,Set())
                        Computing fullDFS: x732
                        Computing fullDFS: x730
                        [2.8000000000000003 = max(2.6) + 0.2] x730 = Not(x729)
                        [3.8 = max(2.8) + 1.0] x732 = RegWrite(x723,x730,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x725 = SRAMBankedRead(x690,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x726 = VecApply(x725,0)
                          [2.4] x727 = FixLst(Const(0),x726)
                          [2.4] x728 = FixLst(Const(1),x726)
                          [2.6] x729 = And(x727,x728)
                          [2.8] x730 = Not(x729)
                          [3.6] x731 = RegWrite(x721,x729,Set())
                          [3.8] x732 = RegWrite(x723,x730,Set())
                      x742 = UnitPipe(Set(b631, b557),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x734, x740, x741), schedule Vector(x734, x735, x736, x737, x738, x739, x740, x741)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x734 = SRAMBankedRead(x691,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x735 = VecApply(x734,0)
                          x736 = FixLst(Const(0),x735)
                          x737 = FixLst(Const(1),x735)
                          x738 = And(x736,x737)
                          x739 = Not(x738)
                          x740 = RegWrite(x722,x738,Set())
                          x741 = RegWrite(x724,x739,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x734
                        cur: x734, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x734 = SRAMBankedRead(x691,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x740
                        Computing fullDFS: x738
                        Computing fullDFS: x736
                        Computing fullDFS: x735
                        [2.0 = max(2.0) + 0.0] x735 = VecApply(x734,0)
                        [2.4 = max(2.0) + 0.4] x736 = FixLst(Const(0),x735)
                        Computing fullDFS: x737
                        [2.4 = max(2.0) + 0.4] x737 = FixLst(Const(1),x735)
                        [2.6 = max(2.4, 2.4) + 0.2] x738 = And(x736,x737)
                        [3.6 = max(2.6) + 1.0] x740 = RegWrite(x722,x738,Set())
                        Computing fullDFS: x741
                        Computing fullDFS: x739
                        [2.8000000000000003 = max(2.6) + 0.2] x739 = Not(x738)
                        [3.8 = max(2.8) + 1.0] x741 = RegWrite(x724,x739,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x734 = SRAMBankedRead(x691,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x735 = VecApply(x734,0)
                          [2.4] x736 = FixLst(Const(0),x735)
                          [2.4] x737 = FixLst(Const(1),x735)
                          [2.6] x738 = And(x736,x737)
                          [2.8] x739 = Not(x738)
                          [3.6] x740 = RegWrite(x722,x738,Set())
                          [3.8] x741 = RegWrite(x724,x739,Set())
                  x761 = Switch(List(x2927, x2928),Block(x760))
                    Working on pipeLatencies of result Vector(x760, x759, x758, x748, x749, Const(90)), schedule Vector(x759, x760, x748, x749, x750, x751, x752, x753, x754, x755, x756, x757, x758)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x759 = SwitchCase(Block(x758))
                      x760 = SwitchCase(Block(Const(90)))
                      x748 = RegRead(x721)
                      x749 = SRAMBankedRead(x690,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x748)),Vec[Fix[TRUE,_10,_22]])
                      x750 = VecApply(x749,0)
                      x751 = FixDiv(Const(100),x750)
                      x752 = FixDiv(x751,x750)
                      x753 = FixDiv(x752,x750)
                      x754 = FixDiv(x753,x750)
                      x755 = FixDiv(x754,x750)
                      x756 = FixDiv(Const(10),x750)
                      x757 = FixDiv(x756,x750)
                      x758 = FixSub(x755,x757)
                    Computing fullDFS: x760
                    cur: x760, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x760 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x759
                    Computing fullDFS: x748
                    cur: x748, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x748 = RegRead(x721)
                    Computing fullDFS: x749
                    [2.0 = max(0.0) + 2.0] x749 = SRAMBankedRead(x690,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x748)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x758
                    Computing fullDFS: x755
                    Computing fullDFS: x750
                    [2.0 = max(2.0) + 0.0] x750 = VecApply(x749,0)
                    Computing fullDFS: x754
                    Computing fullDFS: x753
                    Computing fullDFS: x752
                    Computing fullDFS: x751
                    [22.0 = max(2.0) + 20.0] x751 = FixDiv(Const(100),x750)
                    [42.0 = max(2.0, 22.0) + 20.0] x752 = FixDiv(x751,x750)
                    [62.0 = max(2.0, 42.0) + 20.0] x753 = FixDiv(x752,x750)
                    [82.0 = max(2.0, 62.0) + 20.0] x754 = FixDiv(x753,x750)
                    [102.0 = max(2.0, 82.0) + 20.0] x755 = FixDiv(x754,x750)
                    Computing fullDFS: x757
                    Computing fullDFS: x756
                    [22.0 = max(2.0) + 20.0] x756 = FixDiv(Const(10),x750)
                    [42.0 = max(2.0, 22.0) + 20.0] x757 = FixDiv(x756,x750)
                    [103.0 = max(102.0, 42.0) + 1.0] x758 = FixSub(x755,x757)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x759 = SwitchCase(Block(x758))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x760 = SwitchCase(Block(Const(90)))
                      [0.0] x748 = RegRead(x721)
                      [2.0] x749 = SRAMBankedRead(x690,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x748)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x750 = VecApply(x749,0)
                      [22.0] x751 = FixDiv(Const(100),x750)
                      [22.0] x756 = FixDiv(Const(10),x750)
                      [42.0] x752 = FixDiv(x751,x750)
                      [42.0] x757 = FixDiv(x756,x750)
                      [62.0] x753 = FixDiv(x752,x750)
                      [82.0] x754 = FixDiv(x753,x750)
                      [102.0] x755 = FixDiv(x754,x750)
                      [103.0] x759 = SwitchCase(Block(x758))
                      [103.0] x758 = FixSub(x755,x757)
                  x775 = Switch(List(x2929, x2930),Block(x774))
                    Working on pipeLatencies of result Vector(x774, x773, x772, x762, x763, Const(90)), schedule Vector(x773, x774, x762, x763, x764, x765, x766, x767, x768, x769, x770, x771, x772)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x773 = SwitchCase(Block(x772))
                      x774 = SwitchCase(Block(Const(90)))
                      x762 = RegRead(x722)
                      x763 = SRAMBankedRead(x691,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x762)),Vec[Fix[TRUE,_10,_22]])
                      x764 = VecApply(x763,0)
                      x765 = FixDiv(Const(100),x764)
                      x766 = FixDiv(x765,x764)
                      x767 = FixDiv(x766,x764)
                      x768 = FixDiv(x767,x764)
                      x769 = FixDiv(x768,x764)
                      x770 = FixDiv(Const(10),x764)
                      x771 = FixDiv(x770,x764)
                      x772 = FixSub(x769,x771)
                    Computing fullDFS: x774
                    cur: x774, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x774 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x773
                    Computing fullDFS: x762
                    cur: x762, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x762 = RegRead(x722)
                    Computing fullDFS: x763
                    [2.0 = max(0.0) + 2.0] x763 = SRAMBankedRead(x691,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x762)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x772
                    Computing fullDFS: x769
                    Computing fullDFS: x764
                    [2.0 = max(2.0) + 0.0] x764 = VecApply(x763,0)
                    Computing fullDFS: x768
                    Computing fullDFS: x767
                    Computing fullDFS: x766
                    Computing fullDFS: x765
                    [22.0 = max(2.0) + 20.0] x765 = FixDiv(Const(100),x764)
                    [42.0 = max(2.0, 22.0) + 20.0] x766 = FixDiv(x765,x764)
                    [62.0 = max(2.0, 42.0) + 20.0] x767 = FixDiv(x766,x764)
                    [82.0 = max(2.0, 62.0) + 20.0] x768 = FixDiv(x767,x764)
                    [102.0 = max(2.0, 82.0) + 20.0] x769 = FixDiv(x768,x764)
                    Computing fullDFS: x771
                    Computing fullDFS: x770
                    [22.0 = max(2.0) + 20.0] x770 = FixDiv(Const(10),x764)
                    [42.0 = max(2.0, 22.0) + 20.0] x771 = FixDiv(x770,x764)
                    [103.0 = max(102.0, 42.0) + 1.0] x772 = FixSub(x769,x771)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x773 = SwitchCase(Block(x772))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x774 = SwitchCase(Block(Const(90)))
                      [0.0] x762 = RegRead(x722)
                      [2.0] x763 = SRAMBankedRead(x691,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x762)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x764 = VecApply(x763,0)
                      [22.0] x765 = FixDiv(Const(100),x764)
                      [22.0] x770 = FixDiv(Const(10),x764)
                      [42.0] x766 = FixDiv(x765,x764)
                      [42.0] x771 = FixDiv(x770,x764)
                      [62.0] x767 = FixDiv(x766,x764)
                      [82.0] x768 = FixDiv(x767,x764)
                      [102.0] x769 = FixDiv(x768,x764)
                      [103.0] x773 = SwitchCase(Block(x772))
                      [103.0] x772 = FixSub(x769,x771)
                  x780 = ParallelPipe(Set(b557),Block(Const(())))
                      x777 = UnitPipe(Set(b630, b557),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x776), schedule Vector(x776)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x776 = SRAMBankedWrite(x719,Vector(x761),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x776
                        cur: x776, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x776 = SRAMBankedWrite(x719,Vector(x761),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x776 = SRAMBankedWrite(x719,Vector(x761),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x779 = UnitPipe(Set(b631, b557),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x778), schedule Vector(x778)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x778 = SRAMBankedWrite(x720,Vector(x775),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x778
                        cur: x778, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x778 = SRAMBankedWrite(x720,Vector(x775),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x778 = SRAMBankedWrite(x720,Vector(x775),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x813 = ParallelPipe(Set(b557),Block(Const(())))
                      x798 = UnrolledForeach(Set(b630, b557),x783,Block(Const(())),List(List(b785)),List(List(b786)),None)
                        Working on pipeLatencies of result Vector(Const(()), x797, x793, x794, x787, x795, x790, x796), schedule Vector(x787, x788, x789, x790, x791, x792, x793, x794, x795, x796, x797)
                        Memories with both reads and writes in this scope: Set(x636)
                        NonConflictSets(x787, x796): Set()
                        NonConflictSets(x787, x796): Set()
                        Found Cycle: x787, x796
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x796 = SRAMBankedWrite(x636,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          x787 = SRAMBankedRead(x636,Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                            x787 = SRAMBankedRead(x636,Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                            x788 = VecApply(x787,0)
                            x789 = FixMul(x788,Const(0.099999904632568359375))
                            x792 = FixMul(x789,x791)
                            x796 = SRAMBankedWrite(x636,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                        Done finding cycles: Vector(AccumTriple(x636,x787,x796)), Map(x792 -> List(AccumTriple(x636,x787,x796)), x788 -> List(AccumTriple(x636,x787,x796)), x796 -> List(AccumTriple(x636,x787,x796)), x787 -> List(AccumTriple(x636,x787,x796)), x789 -> List(AccumTriple(x636,x787,x796)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x787 = SRAMBankedRead(x636,Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                          x788 = VecApply(x787,0)
                          x789 = FixMul(x788,Const(0.099999904632568359375))
                          x790 = SRAMBankedRead(x719,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                          x791 = VecApply(x790,0)
                          x792 = FixMul(x789,x791)
                          x793 = SRAMBankedWrite(x634,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          x794 = SRAMBankedWrite(x637,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          x795 = SRAMBankedWrite(x633,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          x796 = SRAMBankedWrite(x636,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          x797 = SRAMBankedWrite(x635,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x797
                        Computing fullDFS: x792
                        Computing fullDFS: x789
                        Computing fullDFS: x788
                        Computing fullDFS: x787
                        cur: x787, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x636,x787,x796))
                        [2.0 = max(0) + 2.0] x787 = SRAMBankedRead(x636,Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        cycle deps of x788: Vector(x787, x788)
                        [2.0 = max(2.0) + 0.0] x788 = VecApply(x787,0)[cycle]
                        cycle deps of x789: Vector(x787, x788, x789)
                        [8.0 = max(2.0) + 6.0] x789 = FixMul(x788,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x791
                        Computing fullDFS: x790
                        cur: x790, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x790 = SRAMBankedRead(x719,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x791 = VecApply(x790,0)
                        cycle deps of x792: Vector(x787, x788, x789, x792)
                        [14.0 = max(8.0, 2.0) + 6.0] x792 = FixMul(x789,x791)[cycle]
                        cycle deps of x797: Vector(x787, x788, x789, x792, x797)
                        [15.0 = max(14.0) + 1.0] x797 = SRAMBankedWrite(x635,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                        Computing fullDFS: x793
                        cycle deps of x793: Vector(x787, x788, x789, x792, x793)
                        [15.0 = max(14.0) + 1.0] x793 = SRAMBankedWrite(x634,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                        Computing fullDFS: x794
                        cycle deps of x794: Vector(x787, x788, x789, x792, x794)
                        [15.0 = max(14.0) + 1.0] x794 = SRAMBankedWrite(x637,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                        Computing fullDFS: x795
                        cycle deps of x795: Vector(x787, x788, x789, x792, x795)
                        [15.0 = max(14.0) + 1.0] x795 = SRAMBankedWrite(x633,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                        Computing fullDFS: x796
                        cycle deps of x796: Vector(x787, x787, x788, x789, x792, x796)
                        [15.0 = max(2.0, 14.0) + 1.0] x796 = SRAMBankedWrite(x636,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))[cycle]
                        Cycle #0: write: x796, cycle: x787, x787, x788, x789, x792, x796
                        x792 = FixMul(x789,x791) [14.0]
                          [14.0 = 15.0 - 1.0] x793 = SRAMBankedWrite(x634,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          [14.0 = 15.0 - 1.0] x794 = SRAMBankedWrite(x637,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          [14.0 = 15.0 - 1.0] x795 = SRAMBankedWrite(x633,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          [14.0 = 15.0 - 1.0] x796 = SRAMBankedWrite(x636,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          [14.0 = 15.0 - 1.0] x797 = SRAMBankedWrite(x635,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          [14.0]
                        x789 = FixMul(x788,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x792 = FixMul(x789,x791)
                          [8.0]
                        x788 = VecApply(x787,0) [2.0]
                          [2.0 = 8.0 - 6.0] x789 = FixMul(x788,Const(0.099999904632568359375))
                          [2.0]
                        x787 = SRAMBankedRead(x636,Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x788 = VecApply(x787,0)
                          [2.0]
                        x787 = SRAMBankedRead(x636,Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x788 = VecApply(x787,0)
                          [2.0]
                        Cycles: Map(x792 -> Vector(x787, x788, x789, x792), x795 -> Vector(x787, x788, x789, x792, x795), x797 -> Vector(x787, x788, x789, x792, x797), x788 -> Vector(x787, x788), x794 -> Vector(x787, x788, x789, x792, x794), x793 -> Vector(x787, x788, x789, x792, x793), x796 -> Vector(x787, x787, x788, x789, x792, x796), x787 -> List(x787), x789 -> Vector(x787, x788, x789))
                        pseudo cycles for x636:
                        Multiplexed accesses for memory x636: 
                          x787 = SRAMBankedRead(x636,Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                        Access: x787 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x787 = SRAMBankedRead(x636,Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x636: 
                          x796 = SRAMBankedWrite(x636,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                        Access: x796 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x796 = SRAMBankedWrite(x636,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x787),x636,1.0)
                        AAACycle(Vector(x796),x636,1.0)
                        WARCycle(x787,x796,x636,Vector(x787, x787, x788, x789, x792, x796),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x787 = SRAMBankedRead(x636,Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x788 = VecApply(x787,0)
                          [2.0] x790 = SRAMBankedRead(x719,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x791 = VecApply(x790,0)
                          [8.0] x789 = FixMul(x788,Const(0.099999904632568359375))
                          [14.0] x792 = FixMul(x789,x791)
                          [15.0] x793 = SRAMBankedWrite(x634,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          [15.0] x794 = SRAMBankedWrite(x637,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          [15.0] x795 = SRAMBankedWrite(x633,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          [15.0] x796 = SRAMBankedWrite(x636,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                          [15.0] x797 = SRAMBankedWrite(x635,Vector(x792),Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)))
                        Cycle #0 on x636: 
                          x636 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                      x812 = UnrolledForeach(Set(b631, b557),x784,Block(Const(())),List(List(b799)),List(List(b800)),None)
                        Working on pipeLatencies of result Vector(x809, Const(()), x810, x804, x811, x808, x801, x807), schedule Vector(x801, x802, x803, x804, x805, x806, x807, x808, x809, x810, x811)
                        Memories with both reads and writes in this scope: Set(x641)
                        NonConflictSets(x801, x809): Set()
                        NonConflictSets(x801, x809): Set()
                        Found Cycle: x801, x809
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x809 = SRAMBankedWrite(x641,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          x801 = SRAMBankedRead(x641,Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                            x801 = SRAMBankedRead(x641,Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                            x802 = VecApply(x801,0)
                            x803 = FixMul(x802,Const(0.099999904632568359375))
                            x806 = FixMul(x803,x805)
                            x809 = SRAMBankedWrite(x641,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                        Done finding cycles: Vector(AccumTriple(x641,x801,x809)), Map(x801 -> List(AccumTriple(x641,x801,x809)), x803 -> List(AccumTriple(x641,x801,x809)), x806 -> List(AccumTriple(x641,x801,x809)), x809 -> List(AccumTriple(x641,x801,x809)), x802 -> List(AccumTriple(x641,x801,x809)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x801 = SRAMBankedRead(x641,Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                          x802 = VecApply(x801,0)
                          x803 = FixMul(x802,Const(0.099999904632568359375))
                          x804 = SRAMBankedRead(x720,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                          x805 = VecApply(x804,0)
                          x806 = FixMul(x803,x805)
                          x807 = SRAMBankedWrite(x638,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          x808 = SRAMBankedWrite(x642,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          x809 = SRAMBankedWrite(x641,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          x810 = SRAMBankedWrite(x640,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          x811 = SRAMBankedWrite(x639,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                        Computing fullDFS: x809
                        Computing fullDFS: x801
                        cur: x801, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x641,x801,x809))
                        [2.0 = max(0) + 2.0] x801 = SRAMBankedRead(x641,Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        Computing fullDFS: x806
                        Computing fullDFS: x803
                        Computing fullDFS: x802
                        cycle deps of x802: Vector(x801, x802)
                        [2.0 = max(2.0) + 0.0] x802 = VecApply(x801,0)[cycle]
                        cycle deps of x803: Vector(x801, x802, x803)
                        [8.0 = max(2.0) + 6.0] x803 = FixMul(x802,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x805
                        Computing fullDFS: x804
                        cur: x804, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x804 = SRAMBankedRead(x720,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x805 = VecApply(x804,0)
                        cycle deps of x806: Vector(x801, x802, x803, x806)
                        [14.0 = max(8.0, 2.0) + 6.0] x806 = FixMul(x803,x805)[cycle]
                        cycle deps of x809: Vector(x801, x801, x802, x803, x806, x809)
                        [15.0 = max(2.0, 14.0) + 1.0] x809 = SRAMBankedWrite(x641,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))[cycle]
                        Computing fullDFS: Const(())
                        Computing fullDFS: x810
                        cycle deps of x810: Vector(x801, x802, x803, x806, x810)
                        [15.0 = max(14.0) + 1.0] x810 = SRAMBankedWrite(x640,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                        Computing fullDFS: x811
                        cycle deps of x811: Vector(x801, x802, x803, x806, x811)
                        [15.0 = max(14.0) + 1.0] x811 = SRAMBankedWrite(x639,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                        Computing fullDFS: x808
                        cycle deps of x808: Vector(x801, x802, x803, x806, x808)
                        [15.0 = max(14.0) + 1.0] x808 = SRAMBankedWrite(x642,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                        Computing fullDFS: x807
                        cycle deps of x807: Vector(x801, x802, x803, x806, x807)
                        [15.0 = max(14.0) + 1.0] x807 = SRAMBankedWrite(x638,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                        Cycle #0: write: x809, cycle: x801, x801, x802, x803, x806, x809
                        x806 = FixMul(x803,x805) [14.0]
                          [14.0 = 15.0 - 1.0] x807 = SRAMBankedWrite(x638,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          [14.0 = 15.0 - 1.0] x808 = SRAMBankedWrite(x642,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          [14.0 = 15.0 - 1.0] x809 = SRAMBankedWrite(x641,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          [14.0 = 15.0 - 1.0] x810 = SRAMBankedWrite(x640,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          [14.0 = 15.0 - 1.0] x811 = SRAMBankedWrite(x639,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          [14.0]
                        x803 = FixMul(x802,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x806 = FixMul(x803,x805)
                          [8.0]
                        x802 = VecApply(x801,0) [2.0]
                          [2.0 = 8.0 - 6.0] x803 = FixMul(x802,Const(0.099999904632568359375))
                          [2.0]
                        x801 = SRAMBankedRead(x641,Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x802 = VecApply(x801,0)
                          [2.0]
                        x801 = SRAMBankedRead(x641,Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x802 = VecApply(x801,0)
                          [2.0]
                        Cycles: Map(x810 -> Vector(x801, x802, x803, x806, x810), x801 -> List(x801), x803 -> Vector(x801, x802, x803), x806 -> Vector(x801, x802, x803, x806), x809 -> Vector(x801, x801, x802, x803, x806, x809), x811 -> Vector(x801, x802, x803, x806, x811), x802 -> Vector(x801, x802), x808 -> Vector(x801, x802, x803, x806, x808), x807 -> Vector(x801, x802, x803, x806, x807))
                        pseudo cycles for x641:
                        Multiplexed accesses for memory x641: 
                          x801 = SRAMBankedRead(x641,Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                        Access: x801 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x801 = SRAMBankedRead(x641,Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x641: 
                          x809 = SRAMBankedWrite(x641,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                        Access: x809 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x809 = SRAMBankedWrite(x641,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x801),x641,1.0)
                        AAACycle(Vector(x809),x641,1.0)
                        WARCycle(x801,x809,x641,Vector(x801, x801, x802, x803, x806, x809),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x801 = SRAMBankedRead(x641,Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x802 = VecApply(x801,0)
                          [2.0] x804 = SRAMBankedRead(x720,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x805 = VecApply(x804,0)
                          [8.0] x803 = FixMul(x802,Const(0.099999904632568359375))
                          [14.0] x806 = FixMul(x803,x805)
                          [15.0] x807 = SRAMBankedWrite(x638,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          [15.0] x808 = SRAMBankedWrite(x642,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          [15.0] x809 = SRAMBankedWrite(x641,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          [15.0] x810 = SRAMBankedWrite(x640,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                          [15.0] x811 = SRAMBankedWrite(x639,Vector(x806),Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)))
                        Cycle #0 on x641: 
                          x641 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                  x833 = UnrolledForeach(Set(),x617,Block(Const(())),Vector(List(b629)),Vector(List(b632)),None)
                    Working on pipeLatencies of result Vector(Const(()), x814, x831, x816, x832, x818), schedule Vector(x814, x815, x816, x817, x818, x819, x820, x822, x824, x825, x826, x828, x829, x830, x831, x832)
                    Memories with both reads and writes in this scope: Set(x567)
                    NonConflictSets(x818, x832): Set()
                    NonConflictSets(x818, x832): Set()
                    Found Cycle: x818, x832
                    Exclusions: Set() Set() 
                    Found cycle between: 
                      x832 = SRAMBankedWrite(x567,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)))
                      x818 = SRAMBankedRead(x567,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
                        x818 = SRAMBankedRead(x567,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
                        x819 = VecApply(x818,0)
                        x829 = FixAdd(x826,x819)
                        x830 = Mux(x828,x826,x829)
                        x832 = SRAMBankedWrite(x567,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)))
                    Done finding cycles: Vector(AccumTriple(x567,x818,x832)), Map(x819 -> List(AccumTriple(x567,x818,x832)), x830 -> List(AccumTriple(x567,x818,x832)), x818 -> List(AccumTriple(x567,x818,x832)), x829 -> List(AccumTriple(x567,x818,x832)), x832 -> List(AccumTriple(x567,x818,x832)))
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x814 = SRAMBankedRead(x637,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
                      x815 = VecApply(x814,0)
                      x816 = SRAMBankedRead(x642,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
                      x817 = VecApply(x816,0)
                      x818 = SRAMBankedRead(x567,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
                      x819 = VecApply(x818,0)
                      x820 = And(b632,b557)
                      x822 = And(b631,b557)
                      x824 = And(x822,x820)
                      x825 = FixAdd(x815,x817)
                      x826 = Mux(x824,x825,x815)
                      x828 = FixEql(b627,Const(0))
                      x829 = FixAdd(x826,x819)
                      x830 = Mux(x828,x826,x829)
                      x831 = SRAMBankedWrite(x568,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)))
                      x832 = SRAMBankedWrite(x567,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)))
                    Computing fullDFS: Const(())
                    Computing fullDFS: x814
                    cur: x814, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x814 = SRAMBankedRead(x637,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x831
                    Computing fullDFS: x830
                    Computing fullDFS: x826
                    Computing fullDFS: x815
                    [2.0 = max(2.0) + 0.0] x815 = VecApply(x814,0)
                    Computing fullDFS: x824
                    Computing fullDFS: x820
                    cur: x820, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x820 = And(b632,b557)
                    Computing fullDFS: x822
                    cur: x822, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x822 = And(b631,b557)
                    [0.4 = max(0.2, 0.2) + 0.2] x824 = And(x822,x820)
                    Computing fullDFS: x825
                    Computing fullDFS: x817
                    Computing fullDFS: x816
                    cur: x816, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x816 = SRAMBankedRead(x642,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x817 = VecApply(x816,0)
                    [3.0 = max(2.0, 2.0) + 1.0] x825 = FixAdd(x815,x817)
                    [3.5 = max(2.0, 0.4, 3.0) + 0.5] x826 = Mux(x824,x825,x815)
                    Computing fullDFS: x828
                    cur: x828, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x828 = FixEql(b627,Const(0))
                    Computing fullDFS: x829
                    Computing fullDFS: x819
                    Computing fullDFS: x818
                    cur: x818, inReduce: true, latency: 2.0
                    Known Cycles: List(AccumTriple(x567,x818,x832))
                    [2.0 = max(0) + 2.0] x818 = SRAMBankedRead(x567,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])[cycle]
                    cycle deps of x819: Vector(x818, x819)
                    [2.0 = max(2.0) + 0.0] x819 = VecApply(x818,0)[cycle]
                    cycle deps of x829: Vector(x818, x819, x829)
                    [4.5 = max(2.0, 3.5) + 1.0] x829 = FixAdd(x826,x819)[cycle]
                    cycle deps of x830: Vector(x818, x819, x829, x830)
                    [5.0 = max(3.5, 0.2, 4.5) + 0.5] x830 = Mux(x828,x826,x829)[cycle]
                    cycle deps of x831: Vector(x818, x819, x829, x830, x831)
                    [6.0 = max(5.0) + 1.0] x831 = SRAMBankedWrite(x568,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)))
                    Computing fullDFS: x832
                    cycle deps of x832: Vector(x818, x818, x819, x829, x830, x832)
                    [6.0 = max(2.0, 5.0) + 1.0] x832 = SRAMBankedWrite(x567,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)))[cycle]
                    Cycle #0: write: x832, cycle: x818, x818, x819, x829, x830, x832
                    x830 = Mux(x828,x826,x829) [5.0]
                      [5.0 = 6.0 - 1.0] x831 = SRAMBankedWrite(x568,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)))
                      [5.0 = 6.0 - 1.0] x832 = SRAMBankedWrite(x567,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)))
                      [5.0]
                    x829 = FixAdd(x826,x819) [4.5]
                      [4.5 = 5.0 - 0.5] x830 = Mux(x828,x826,x829)
                      [4.5]
                    x819 = VecApply(x818,0) [2.0]
                      [3.5 = 4.5 - 1.0] x829 = FixAdd(x826,x819)
                      [3.5]
                    x818 = SRAMBankedRead(x567,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                      [3.5 = 3.5 - 0.0] x819 = VecApply(x818,0)
                      [3.5]
                    x818 = SRAMBankedRead(x567,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]]) [3.5]
                      [3.5 = 3.5 - 0.0] x819 = VecApply(x818,0)
                      [3.5]
                    Cycles: Map(x819 -> Vector(x818, x819), x831 -> Vector(x818, x819, x829, x830, x831), x830 -> Vector(x818, x819, x829, x830), x818 -> List(x818), x829 -> Vector(x818, x819, x829), x832 -> Vector(x818, x818, x819, x829, x830, x832))
                    pseudo cycles for x567:
                    Multiplexed accesses for memory x567: 
                      x818 = SRAMBankedRead(x567,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
                    Access: x818 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x818 = SRAMBankedRead(x567,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 3.5 due to muxing.
                    Multiplexed accesses for memory x567: 
                      x832 = SRAMBankedWrite(x567,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)))
                    Access: x832 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x832 = SRAMBankedWrite(x567,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557))) by 0.0 to 6.0 due to muxing.
                    Found cycles: 
                    AAACycle(Vector(x818),x567,1.0)
                    AAACycle(Vector(x832),x567,1.0)
                    WARCycle(x818,x832,x567,Vector(x818, x818, x819, x829, x830, x832),5.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                      Schedule after pipeLatencies calculation:
                      [0.2] x820 = And(b632,b557)
                      [0.2] x822 = And(b631,b557)
                      [0.2] x828 = FixEql(b627,Const(0))
                      [0.4] x824 = And(x822,x820)
                      [2.0] x814 = SRAMBankedRead(x637,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x815 = VecApply(x814,0)
                      [2.0] x816 = SRAMBankedRead(x642,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x817 = VecApply(x816,0)
                      [3.0] x825 = FixAdd(x815,x817)
                      [3.5] x818 = SRAMBankedRead(x567,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]])
                      [3.5] x819 = VecApply(x818,0)
                      [3.5] x826 = Mux(x824,x825,x815)
                      [4.5] x829 = FixAdd(x826,x819)
                      [5.0] x830 = Mux(x828,x826,x829)
                      [6.0] x831 = SRAMBankedWrite(x568,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)))
                      [6.0] x832 = SRAMBankedWrite(x567,Vector(x830),Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)))
                    Cycle #0 on x567: 
                      x567 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [accum_0]
                      disjoint:     true
                      no visible intermediates:
                        closed cycle:     false
                        no intermediates: true
                        is local mem:     true
                        number of writers:  1
                        outer reduce:     false
                        accum type:       Fold (if reduce, overrides no intermediates)
              x1042 = UnrolledReduce(Set(b558),x598,Block((x569) => Const(())),List(List(b835, b836)),List(List(b838, b839)),None)
                  x897 = ParallelPipe(Set(b558),Block(Const(())))
                      x875 = UnrolledForeach(Set(b838, b558),x853,Block(Const(())),List(List(b855)),List(List(b856)),None)
                        Working on pipeLatencies of result Vector(Const(()), x873, x861, x870, x874, x872, x867, x871), schedule Vector(x858, x2989, x2990, x860, x861, x862, x864, x2991, x2992, x866, x867, x868, x869, x870, x871, x872, x873, x874)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x858 = FixDiv(b548,Const(10))
                          x2989 = FixSLA(x858,Const(1))
                          x2990 = FixAdd(x2989,x858)
                          x860 = FixAdd(x2990,b855)
                          x861 = SRAMBankedRead(x471,Vector(List(Const(1), Const(0))),Vector(x860),Vector(Set(b856, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                          x862 = VecApply(x861,0)
                          x864 = FixDivSRA(b835,Const(1))
                          x2991 = FixSLA(x864,Const(1))
                          x2992 = FixAdd(x2991,x864)
                          x866 = FixAdd(x2992,b855)
                          x867 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x866),Vector(Set(b856, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                          x868 = VecApply(x867,0)
                          x869 = FixSub(x862,x868)
                          x870 = SRAMBankedWrite(x841,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                          x871 = SRAMBankedWrite(x842,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                          x872 = SRAMBankedWrite(x843,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                          x873 = SRAMBankedWrite(x845,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                          x874 = SRAMBankedWrite(x844,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x873
                        Computing fullDFS: x869
                        Computing fullDFS: x862
                        Computing fullDFS: x861
                        Computing fullDFS: x860
                        Computing fullDFS: x2990
                        Computing fullDFS: x858
                        cur: x858, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x858 = FixDiv(b548,Const(10))
                        Computing fullDFS: x2989
                        [20.2 = max(20.0) + 0.2] x2989 = FixSLA(x858,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x2990 = FixAdd(x2989,x858)
                        [22.2 = max(21.2) + 1.0] x860 = FixAdd(x2990,b855)
                        [24.2 = max(22.2) + 2.0] x861 = SRAMBankedRead(x471,Vector(List(Const(1), Const(0))),Vector(x860),Vector(Set(b856, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x862 = VecApply(x861,0)
                        Computing fullDFS: x868
                        Computing fullDFS: x867
                        Computing fullDFS: x866
                        Computing fullDFS: x2992
                        Computing fullDFS: x864
                        cur: x864, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x864 = FixDivSRA(b835,Const(1))
                        Computing fullDFS: x2991
                        [0.4 = max(0.2) + 0.2] x2991 = FixSLA(x864,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x2992 = FixAdd(x2991,x864)
                        [2.4 = max(1.4) + 1.0] x866 = FixAdd(x2992,b855)
                        [4.4 = max(2.4) + 2.0] x867 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x866),Vector(Set(b856, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x868 = VecApply(x867,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x869 = FixSub(x862,x868)
                        [26.2 = max(25.2) + 1.0] x873 = SRAMBankedWrite(x845,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                        Computing fullDFS: x870
                        [26.2 = max(25.2) + 1.0] x870 = SRAMBankedWrite(x841,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                        Computing fullDFS: x874
                        [26.2 = max(25.2) + 1.0] x874 = SRAMBankedWrite(x844,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                        Computing fullDFS: x872
                        [26.2 = max(25.2) + 1.0] x872 = SRAMBankedWrite(x843,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                        Computing fullDFS: x871
                        [26.2 = max(25.2) + 1.0] x871 = SRAMBankedWrite(x842,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x864 = FixDivSRA(b835,Const(1))
                          [0.4] x2991 = FixSLA(x864,Const(1))
                          [1.4] x2992 = FixAdd(x2991,x864)
                          [2.4] x866 = FixAdd(x2992,b855)
                          [4.4] x867 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x866),Vector(Set(b856, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x868 = VecApply(x867,0)
                          [20.0] x858 = FixDiv(b548,Const(10))
                          [20.2] x2989 = FixSLA(x858,Const(1))
                          [21.2] x2990 = FixAdd(x2989,x858)
                          [22.2] x860 = FixAdd(x2990,b855)
                          [24.2] x861 = SRAMBankedRead(x471,Vector(List(Const(1), Const(0))),Vector(x860),Vector(Set(b856, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x862 = VecApply(x861,0)
                          [25.2] x869 = FixSub(x862,x868)
                          [26.2] x870 = SRAMBankedWrite(x841,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                          [26.2] x871 = SRAMBankedWrite(x842,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                          [26.2] x872 = SRAMBankedWrite(x843,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                          [26.2] x873 = SRAMBankedWrite(x845,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                          [26.2] x874 = SRAMBankedWrite(x844,Vector(x869),Vector(List(Const(0))),Vector(b855),Vector(Set(b856, b838, b558)))
                      x896 = UnrolledForeach(Set(b839, b558),x854,Block(Const(())),List(List(b876)),List(List(b877)),None)
                        Working on pipeLatencies of result Vector(x892, x893, Const(()), x894, x888, x895, x891, x882), schedule Vector(x879, x2993, x2994, x881, x882, x883, x885, x2995, x2996, x887, x888, x889, x890, x891, x892, x893, x894, x895)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x879 = FixDiv(b548,Const(10))
                          x2993 = FixSLA(x879,Const(1))
                          x2994 = FixAdd(x2993,x879)
                          x881 = FixAdd(x2994,b876)
                          x882 = SRAMBankedRead(x471,Vector(List(Const(1), Const(0))),Vector(x881),Vector(Set(b877, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                          x883 = VecApply(x882,0)
                          x885 = FixDivSRA(b836,Const(1))
                          x2995 = FixSLA(x885,Const(1))
                          x2996 = FixAdd(x2995,x885)
                          x887 = FixAdd(x2996,b876)
                          x888 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x887),Vector(Set(b877, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                          x889 = VecApply(x888,0)
                          x890 = FixSub(x883,x889)
                          x891 = SRAMBankedWrite(x846,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                          x892 = SRAMBankedWrite(x849,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                          x893 = SRAMBankedWrite(x847,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                          x894 = SRAMBankedWrite(x848,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                          x895 = SRAMBankedWrite(x850,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                        Computing fullDFS: x892
                        Computing fullDFS: x890
                        Computing fullDFS: x883
                        Computing fullDFS: x882
                        Computing fullDFS: x881
                        Computing fullDFS: x2994
                        Computing fullDFS: x879
                        cur: x879, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x879 = FixDiv(b548,Const(10))
                        Computing fullDFS: x2993
                        [20.2 = max(20.0) + 0.2] x2993 = FixSLA(x879,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x2994 = FixAdd(x2993,x879)
                        [22.2 = max(21.2) + 1.0] x881 = FixAdd(x2994,b876)
                        [24.2 = max(22.2) + 2.0] x882 = SRAMBankedRead(x471,Vector(List(Const(1), Const(0))),Vector(x881),Vector(Set(b877, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x883 = VecApply(x882,0)
                        Computing fullDFS: x889
                        Computing fullDFS: x888
                        Computing fullDFS: x887
                        Computing fullDFS: x2996
                        Computing fullDFS: x885
                        cur: x885, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x885 = FixDivSRA(b836,Const(1))
                        Computing fullDFS: x2995
                        [0.4 = max(0.2) + 0.2] x2995 = FixSLA(x885,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x2996 = FixAdd(x2995,x885)
                        [2.4 = max(1.4) + 1.0] x887 = FixAdd(x2996,b876)
                        [4.4 = max(2.4) + 2.0] x888 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x887),Vector(Set(b877, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x889 = VecApply(x888,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x890 = FixSub(x883,x889)
                        [26.2 = max(25.2) + 1.0] x892 = SRAMBankedWrite(x849,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                        Computing fullDFS: x893
                        [26.2 = max(25.2) + 1.0] x893 = SRAMBankedWrite(x847,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x894
                        [26.2 = max(25.2) + 1.0] x894 = SRAMBankedWrite(x848,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                        Computing fullDFS: x895
                        [26.2 = max(25.2) + 1.0] x895 = SRAMBankedWrite(x850,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                        Computing fullDFS: x891
                        [26.2 = max(25.2) + 1.0] x891 = SRAMBankedWrite(x846,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x885 = FixDivSRA(b836,Const(1))
                          [0.4] x2995 = FixSLA(x885,Const(1))
                          [1.4] x2996 = FixAdd(x2995,x885)
                          [2.4] x887 = FixAdd(x2996,b876)
                          [4.4] x888 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x887),Vector(Set(b877, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x889 = VecApply(x888,0)
                          [20.0] x879 = FixDiv(b548,Const(10))
                          [20.2] x2993 = FixSLA(x879,Const(1))
                          [21.2] x2994 = FixAdd(x2993,x879)
                          [22.2] x881 = FixAdd(x2994,b876)
                          [24.2] x882 = SRAMBankedRead(x471,Vector(List(Const(1), Const(0))),Vector(x881),Vector(Set(b877, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x883 = VecApply(x882,0)
                          [25.2] x890 = FixSub(x883,x889)
                          [26.2] x891 = SRAMBankedWrite(x846,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                          [26.2] x892 = SRAMBankedWrite(x849,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                          [26.2] x893 = SRAMBankedWrite(x847,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                          [26.2] x894 = SRAMBankedWrite(x848,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                          [26.2] x895 = SRAMBankedWrite(x850,Vector(x890),Vector(List(Const(0))),Vector(b876),Vector(Set(b877, b839, b558)))
                  x926 = ParallelPipe(Set(b558),Block(Const(())))
                      x912 = UnitPipe(Set(b838, b558),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x911, x900, x907, x903), schedule Vector(x900, x901, x903, x904, x905, x2997, x907, x908, x2998, x911)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x900 = SRAMBankedRead(x841,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x901 = VecApply(x900,0)
                          x903 = SRAMBankedRead(x842,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x904 = VecApply(x903,0)
                          x905 = FixMul(x904,x904)
                          x2997 = FixFMA(x901,x901,x905)
                          x907 = SRAMBankedRead(x843,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x908 = VecApply(x907,0)
                          x2998 = FixFMA(x908,x908,x2997)
                          x911 = SRAMBankedWrite(x898,Vector(x2998),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x911
                        Computing fullDFS: x2998
                        Computing fullDFS: x2997
                        Computing fullDFS: x901
                        Computing fullDFS: x900
                        cur: x900, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x900 = SRAMBankedRead(x841,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x901 = VecApply(x900,0)
                        Computing fullDFS: x905
                        Computing fullDFS: x904
                        Computing fullDFS: x903
                        cur: x903, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x903 = SRAMBankedRead(x842,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x904 = VecApply(x903,0)
                        [8.0 = max(2.0) + 6.0] x905 = FixMul(x904,x904)
                        [14.0 = max(2.0, 8.0) + 6.0] x2997 = FixFMA(x901,x901,x905)
                        Computing fullDFS: x908
                        Computing fullDFS: x907
                        cur: x907, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x907 = SRAMBankedRead(x843,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x908 = VecApply(x907,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x2998 = FixFMA(x908,x908,x2997)
                        [21.0 = max(20.0) + 1.0] x911 = SRAMBankedWrite(x898,Vector(x2998),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x900 = SRAMBankedRead(x841,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x901 = VecApply(x900,0)
                          [2.0] x903 = SRAMBankedRead(x842,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x904 = VecApply(x903,0)
                          [2.0] x907 = SRAMBankedRead(x843,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x908 = VecApply(x907,0)
                          [8.0] x905 = FixMul(x904,x904)
                          [14.0] x2997 = FixFMA(x901,x901,x905)
                          [20.0] x2998 = FixFMA(x908,x908,x2997)
                          [21.0] x911 = SRAMBankedWrite(x898,Vector(x2998),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x925 = UnitPipe(Set(b839, b558),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x913, x924, x920, x916), schedule Vector(x913, x914, x916, x917, x918, x2999, x920, x921, x3000, x924)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x913 = SRAMBankedRead(x846,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x914 = VecApply(x913,0)
                          x916 = SRAMBankedRead(x847,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x917 = VecApply(x916,0)
                          x918 = FixMul(x917,x917)
                          x2999 = FixFMA(x914,x914,x918)
                          x920 = SRAMBankedRead(x848,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x921 = VecApply(x920,0)
                          x3000 = FixFMA(x921,x921,x2999)
                          x924 = SRAMBankedWrite(x899,Vector(x3000),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x913
                        cur: x913, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x913 = SRAMBankedRead(x846,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x924
                        Computing fullDFS: x3000
                        Computing fullDFS: x2999
                        Computing fullDFS: x914
                        [2.0 = max(2.0) + 0.0] x914 = VecApply(x913,0)
                        Computing fullDFS: x918
                        Computing fullDFS: x917
                        Computing fullDFS: x916
                        cur: x916, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x916 = SRAMBankedRead(x847,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x917 = VecApply(x916,0)
                        [8.0 = max(2.0) + 6.0] x918 = FixMul(x917,x917)
                        [14.0 = max(2.0, 8.0) + 6.0] x2999 = FixFMA(x914,x914,x918)
                        Computing fullDFS: x921
                        Computing fullDFS: x920
                        cur: x920, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x920 = SRAMBankedRead(x848,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x921 = VecApply(x920,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3000 = FixFMA(x921,x921,x2999)
                        [21.0 = max(20.0) + 1.0] x924 = SRAMBankedWrite(x899,Vector(x3000),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x913 = SRAMBankedRead(x846,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x914 = VecApply(x913,0)
                          [2.0] x916 = SRAMBankedRead(x847,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x917 = VecApply(x916,0)
                          [2.0] x920 = SRAMBankedRead(x848,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x921 = VecApply(x920,0)
                          [8.0] x918 = FixMul(x917,x917)
                          [14.0] x2999 = FixFMA(x914,x914,x918)
                          [20.0] x3000 = FixFMA(x921,x921,x2999)
                          [21.0] x924 = SRAMBankedWrite(x899,Vector(x3000),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x951 = ParallelPipe(Set(b558),Block(Const(())))
                      x941 = UnitPipe(Set(b838, b558),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x933, x939, x940), schedule Vector(x933, x934, x935, x936, x937, x938, x939, x940)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x933 = SRAMBankedRead(x898,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x934 = VecApply(x933,0)
                          x935 = FixLst(Const(0),x934)
                          x936 = FixLst(Const(1),x934)
                          x937 = And(x935,x936)
                          x938 = Not(x937)
                          x939 = RegWrite(x929,x937,Set())
                          x940 = RegWrite(x931,x938,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x933
                        cur: x933, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x933 = SRAMBankedRead(x898,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x939
                        Computing fullDFS: x937
                        Computing fullDFS: x935
                        Computing fullDFS: x934
                        [2.0 = max(2.0) + 0.0] x934 = VecApply(x933,0)
                        [2.4 = max(2.0) + 0.4] x935 = FixLst(Const(0),x934)
                        Computing fullDFS: x936
                        [2.4 = max(2.0) + 0.4] x936 = FixLst(Const(1),x934)
                        [2.6 = max(2.4, 2.4) + 0.2] x937 = And(x935,x936)
                        [3.6 = max(2.6) + 1.0] x939 = RegWrite(x929,x937,Set())
                        Computing fullDFS: x940
                        Computing fullDFS: x938
                        [2.8000000000000003 = max(2.6) + 0.2] x938 = Not(x937)
                        [3.8 = max(2.8) + 1.0] x940 = RegWrite(x931,x938,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x933 = SRAMBankedRead(x898,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x934 = VecApply(x933,0)
                          [2.4] x935 = FixLst(Const(0),x934)
                          [2.4] x936 = FixLst(Const(1),x934)
                          [2.6] x937 = And(x935,x936)
                          [2.8] x938 = Not(x937)
                          [3.6] x939 = RegWrite(x929,x937,Set())
                          [3.8] x940 = RegWrite(x931,x938,Set())
                      x950 = UnitPipe(Set(b839, b558),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x942, x948, x949), schedule Vector(x942, x943, x944, x945, x946, x947, x948, x949)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x942 = SRAMBankedRead(x899,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x943 = VecApply(x942,0)
                          x944 = FixLst(Const(0),x943)
                          x945 = FixLst(Const(1),x943)
                          x946 = And(x944,x945)
                          x947 = Not(x946)
                          x948 = RegWrite(x930,x946,Set())
                          x949 = RegWrite(x932,x947,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x942
                        cur: x942, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x942 = SRAMBankedRead(x899,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x948
                        Computing fullDFS: x946
                        Computing fullDFS: x944
                        Computing fullDFS: x943
                        [2.0 = max(2.0) + 0.0] x943 = VecApply(x942,0)
                        [2.4 = max(2.0) + 0.4] x944 = FixLst(Const(0),x943)
                        Computing fullDFS: x945
                        [2.4 = max(2.0) + 0.4] x945 = FixLst(Const(1),x943)
                        [2.6 = max(2.4, 2.4) + 0.2] x946 = And(x944,x945)
                        [3.6 = max(2.6) + 1.0] x948 = RegWrite(x930,x946,Set())
                        Computing fullDFS: x949
                        Computing fullDFS: x947
                        [2.8000000000000003 = max(2.6) + 0.2] x947 = Not(x946)
                        [3.8 = max(2.8) + 1.0] x949 = RegWrite(x932,x947,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x942 = SRAMBankedRead(x899,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x943 = VecApply(x942,0)
                          [2.4] x944 = FixLst(Const(0),x943)
                          [2.4] x945 = FixLst(Const(1),x943)
                          [2.6] x946 = And(x944,x945)
                          [2.8] x947 = Not(x946)
                          [3.6] x948 = RegWrite(x930,x946,Set())
                          [3.8] x949 = RegWrite(x932,x947,Set())
                  x969 = Switch(List(x2931, x2932),Block(x968))
                    Working on pipeLatencies of result Vector(x968, x967, x966, x956, x957, Const(90)), schedule Vector(x967, x968, x956, x957, x958, x959, x960, x961, x962, x963, x964, x965, x966)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x967 = SwitchCase(Block(x966))
                      x968 = SwitchCase(Block(Const(90)))
                      x956 = RegRead(x929)
                      x957 = SRAMBankedRead(x898,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x956)),Vec[Fix[TRUE,_10,_22]])
                      x958 = VecApply(x957,0)
                      x959 = FixDiv(Const(100),x958)
                      x960 = FixDiv(x959,x958)
                      x961 = FixDiv(x960,x958)
                      x962 = FixDiv(x961,x958)
                      x963 = FixDiv(x962,x958)
                      x964 = FixDiv(Const(10),x958)
                      x965 = FixDiv(x964,x958)
                      x966 = FixSub(x963,x965)
                    Computing fullDFS: x968
                    cur: x968, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x968 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x967
                    Computing fullDFS: x956
                    cur: x956, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x956 = RegRead(x929)
                    Computing fullDFS: x957
                    [2.0 = max(0.0) + 2.0] x957 = SRAMBankedRead(x898,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x956)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x966
                    Computing fullDFS: x963
                    Computing fullDFS: x958
                    [2.0 = max(2.0) + 0.0] x958 = VecApply(x957,0)
                    Computing fullDFS: x962
                    Computing fullDFS: x961
                    Computing fullDFS: x960
                    Computing fullDFS: x959
                    [22.0 = max(2.0) + 20.0] x959 = FixDiv(Const(100),x958)
                    [42.0 = max(2.0, 22.0) + 20.0] x960 = FixDiv(x959,x958)
                    [62.0 = max(2.0, 42.0) + 20.0] x961 = FixDiv(x960,x958)
                    [82.0 = max(2.0, 62.0) + 20.0] x962 = FixDiv(x961,x958)
                    [102.0 = max(2.0, 82.0) + 20.0] x963 = FixDiv(x962,x958)
                    Computing fullDFS: x965
                    Computing fullDFS: x964
                    [22.0 = max(2.0) + 20.0] x964 = FixDiv(Const(10),x958)
                    [42.0 = max(2.0, 22.0) + 20.0] x965 = FixDiv(x964,x958)
                    [103.0 = max(102.0, 42.0) + 1.0] x966 = FixSub(x963,x965)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x967 = SwitchCase(Block(x966))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x968 = SwitchCase(Block(Const(90)))
                      [0.0] x956 = RegRead(x929)
                      [2.0] x957 = SRAMBankedRead(x898,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x956)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x958 = VecApply(x957,0)
                      [22.0] x959 = FixDiv(Const(100),x958)
                      [22.0] x964 = FixDiv(Const(10),x958)
                      [42.0] x960 = FixDiv(x959,x958)
                      [42.0] x965 = FixDiv(x964,x958)
                      [62.0] x961 = FixDiv(x960,x958)
                      [82.0] x962 = FixDiv(x961,x958)
                      [102.0] x963 = FixDiv(x962,x958)
                      [103.0] x967 = SwitchCase(Block(x966))
                      [103.0] x966 = FixSub(x963,x965)
                  x983 = Switch(List(x2933, x2934),Block(x982))
                    Working on pipeLatencies of result Vector(x982, x981, x980, x970, x971, Const(90)), schedule Vector(x981, x982, x970, x971, x972, x973, x974, x975, x976, x977, x978, x979, x980)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x981 = SwitchCase(Block(x980))
                      x982 = SwitchCase(Block(Const(90)))
                      x970 = RegRead(x930)
                      x971 = SRAMBankedRead(x899,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x970)),Vec[Fix[TRUE,_10,_22]])
                      x972 = VecApply(x971,0)
                      x973 = FixDiv(Const(100),x972)
                      x974 = FixDiv(x973,x972)
                      x975 = FixDiv(x974,x972)
                      x976 = FixDiv(x975,x972)
                      x977 = FixDiv(x976,x972)
                      x978 = FixDiv(Const(10),x972)
                      x979 = FixDiv(x978,x972)
                      x980 = FixSub(x977,x979)
                    Computing fullDFS: x982
                    cur: x982, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x982 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x981
                    Computing fullDFS: x970
                    cur: x970, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x970 = RegRead(x930)
                    Computing fullDFS: x971
                    [2.0 = max(0.0) + 2.0] x971 = SRAMBankedRead(x899,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x970)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x980
                    Computing fullDFS: x977
                    Computing fullDFS: x972
                    [2.0 = max(2.0) + 0.0] x972 = VecApply(x971,0)
                    Computing fullDFS: x976
                    Computing fullDFS: x975
                    Computing fullDFS: x974
                    Computing fullDFS: x973
                    [22.0 = max(2.0) + 20.0] x973 = FixDiv(Const(100),x972)
                    [42.0 = max(2.0, 22.0) + 20.0] x974 = FixDiv(x973,x972)
                    [62.0 = max(2.0, 42.0) + 20.0] x975 = FixDiv(x974,x972)
                    [82.0 = max(2.0, 62.0) + 20.0] x976 = FixDiv(x975,x972)
                    [102.0 = max(2.0, 82.0) + 20.0] x977 = FixDiv(x976,x972)
                    Computing fullDFS: x979
                    Computing fullDFS: x978
                    [22.0 = max(2.0) + 20.0] x978 = FixDiv(Const(10),x972)
                    [42.0 = max(2.0, 22.0) + 20.0] x979 = FixDiv(x978,x972)
                    [103.0 = max(102.0, 42.0) + 1.0] x980 = FixSub(x977,x979)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x981 = SwitchCase(Block(x980))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x982 = SwitchCase(Block(Const(90)))
                      [0.0] x970 = RegRead(x930)
                      [2.0] x971 = SRAMBankedRead(x899,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x970)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x972 = VecApply(x971,0)
                      [22.0] x973 = FixDiv(Const(100),x972)
                      [22.0] x978 = FixDiv(Const(10),x972)
                      [42.0] x974 = FixDiv(x973,x972)
                      [42.0] x979 = FixDiv(x978,x972)
                      [62.0] x975 = FixDiv(x974,x972)
                      [82.0] x976 = FixDiv(x975,x972)
                      [102.0] x977 = FixDiv(x976,x972)
                      [103.0] x981 = SwitchCase(Block(x980))
                      [103.0] x980 = FixSub(x977,x979)
                  x988 = ParallelPipe(Set(b558),Block(Const(())))
                      x985 = UnitPipe(Set(b838, b558),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x984), schedule Vector(x984)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x984 = SRAMBankedWrite(x927,Vector(x969),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x984
                        cur: x984, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x984 = SRAMBankedWrite(x927,Vector(x969),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x984 = SRAMBankedWrite(x927,Vector(x969),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x987 = UnitPipe(Set(b839, b558),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x986), schedule Vector(x986)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x986 = SRAMBankedWrite(x928,Vector(x983),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x986
                        cur: x986, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x986 = SRAMBankedWrite(x928,Vector(x983),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x986 = SRAMBankedWrite(x928,Vector(x983),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x1021 = ParallelPipe(Set(b558),Block(Const(())))
                      x1006 = UnrolledForeach(Set(b838, b558),x991,Block(Const(())),List(List(b993)),List(List(b994)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1005, x1001, x998, x1002, x1003, x995, x1004), schedule Vector(x995, x996, x997, x998, x999, x1000, x1001, x1002, x1003, x1004, x1005)
                        Memories with both reads and writes in this scope: Set(x844)
                        NonConflictSets(x995, x1005): Set()
                        NonConflictSets(x995, x1005): Set()
                        Found Cycle: x995, x1005
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x1005 = SRAMBankedWrite(x844,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          x995 = SRAMBankedRead(x844,Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                            x995 = SRAMBankedRead(x844,Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                            x996 = VecApply(x995,0)
                            x997 = FixMul(x996,Const(0.099999904632568359375))
                            x1000 = FixMul(x997,x999)
                            x1005 = SRAMBankedWrite(x844,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                        Done finding cycles: Vector(AccumTriple(x844,x995,x1005)), Map(x995 -> List(AccumTriple(x844,x995,x1005)), x997 -> List(AccumTriple(x844,x995,x1005)), x1000 -> List(AccumTriple(x844,x995,x1005)), x1005 -> List(AccumTriple(x844,x995,x1005)), x996 -> List(AccumTriple(x844,x995,x1005)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x995 = SRAMBankedRead(x844,Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                          x996 = VecApply(x995,0)
                          x997 = FixMul(x996,Const(0.099999904632568359375))
                          x998 = SRAMBankedRead(x927,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                          x999 = VecApply(x998,0)
                          x1000 = FixMul(x997,x999)
                          x1001 = SRAMBankedWrite(x841,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          x1002 = SRAMBankedWrite(x842,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          x1003 = SRAMBankedWrite(x843,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          x1004 = SRAMBankedWrite(x845,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          x1005 = SRAMBankedWrite(x844,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1005
                        Computing fullDFS: x995
                        cur: x995, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x844,x995,x1005))
                        [2.0 = max(0) + 2.0] x995 = SRAMBankedRead(x844,Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        Computing fullDFS: x1000
                        Computing fullDFS: x997
                        Computing fullDFS: x996
                        cycle deps of x996: Vector(x995, x996)
                        [2.0 = max(2.0) + 0.0] x996 = VecApply(x995,0)[cycle]
                        cycle deps of x997: Vector(x995, x996, x997)
                        [8.0 = max(2.0) + 6.0] x997 = FixMul(x996,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x999
                        Computing fullDFS: x998
                        cur: x998, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x998 = SRAMBankedRead(x927,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x999 = VecApply(x998,0)
                        cycle deps of x1000: Vector(x995, x996, x997, x1000)
                        [14.0 = max(8.0, 2.0) + 6.0] x1000 = FixMul(x997,x999)[cycle]
                        cycle deps of x1005: Vector(x995, x995, x996, x997, x1000, x1005)
                        [15.0 = max(2.0, 14.0) + 1.0] x1005 = SRAMBankedWrite(x844,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))[cycle]
                        Computing fullDFS: x1001
                        cycle deps of x1001: Vector(x995, x996, x997, x1000, x1001)
                        [15.0 = max(14.0) + 1.0] x1001 = SRAMBankedWrite(x841,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                        Computing fullDFS: x1002
                        cycle deps of x1002: Vector(x995, x996, x997, x1000, x1002)
                        [15.0 = max(14.0) + 1.0] x1002 = SRAMBankedWrite(x842,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                        Computing fullDFS: x1003
                        cycle deps of x1003: Vector(x995, x996, x997, x1000, x1003)
                        [15.0 = max(14.0) + 1.0] x1003 = SRAMBankedWrite(x843,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                        Computing fullDFS: x1004
                        cycle deps of x1004: Vector(x995, x996, x997, x1000, x1004)
                        [15.0 = max(14.0) + 1.0] x1004 = SRAMBankedWrite(x845,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                        Cycle #0: write: x1005, cycle: x995, x995, x996, x997, x1000, x1005
                        x1000 = FixMul(x997,x999) [14.0]
                          [14.0 = 15.0 - 1.0] x1001 = SRAMBankedWrite(x841,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          [14.0 = 15.0 - 1.0] x1002 = SRAMBankedWrite(x842,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          [14.0 = 15.0 - 1.0] x1003 = SRAMBankedWrite(x843,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          [14.0 = 15.0 - 1.0] x1004 = SRAMBankedWrite(x845,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          [14.0 = 15.0 - 1.0] x1005 = SRAMBankedWrite(x844,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          [14.0]
                        x997 = FixMul(x996,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x1000 = FixMul(x997,x999)
                          [8.0]
                        x996 = VecApply(x995,0) [2.0]
                          [2.0 = 8.0 - 6.0] x997 = FixMul(x996,Const(0.099999904632568359375))
                          [2.0]
                        x995 = SRAMBankedRead(x844,Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x996 = VecApply(x995,0)
                          [2.0]
                        x995 = SRAMBankedRead(x844,Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x996 = VecApply(x995,0)
                          [2.0]
                        Cycles: Map(x1001 -> Vector(x995, x996, x997, x1000, x1001), x1004 -> Vector(x995, x996, x997, x1000, x1004), x995 -> List(x995), x997 -> Vector(x995, x996, x997), x1000 -> Vector(x995, x996, x997, x1000), x1003 -> Vector(x995, x996, x997, x1000, x1003), x1005 -> Vector(x995, x995, x996, x997, x1000, x1005), x996 -> Vector(x995, x996), x1002 -> Vector(x995, x996, x997, x1000, x1002))
                        pseudo cycles for x844:
                        Multiplexed accesses for memory x844: 
                          x995 = SRAMBankedRead(x844,Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                        Access: x995 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x995 = SRAMBankedRead(x844,Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x844: 
                          x1005 = SRAMBankedWrite(x844,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                        Access: x1005 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1005 = SRAMBankedWrite(x844,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x995),x844,1.0)
                        AAACycle(Vector(x1005),x844,1.0)
                        WARCycle(x995,x1005,x844,Vector(x995, x995, x996, x997, x1000, x1005),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x995 = SRAMBankedRead(x844,Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x996 = VecApply(x995,0)
                          [2.0] x998 = SRAMBankedRead(x927,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x999 = VecApply(x998,0)
                          [8.0] x997 = FixMul(x996,Const(0.099999904632568359375))
                          [14.0] x1000 = FixMul(x997,x999)
                          [15.0] x1001 = SRAMBankedWrite(x841,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          [15.0] x1002 = SRAMBankedWrite(x842,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          [15.0] x1003 = SRAMBankedWrite(x843,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          [15.0] x1004 = SRAMBankedWrite(x845,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                          [15.0] x1005 = SRAMBankedWrite(x844,Vector(x1000),Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)))
                        Cycle #0 on x844: 
                          x844 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                      x1020 = UnrolledForeach(Set(b839, b558),x992,Block(Const(())),List(List(b1007)),List(List(b1008)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1012, x1017, x1016, x1015, x1018, x1019, x1009), schedule Vector(x1009, x1010, x1011, x1012, x1013, x1014, x1015, x1016, x1017, x1018, x1019)
                        Memories with both reads and writes in this scope: Set(x849)
                        NonConflictSets(x1009, x1016): Set()
                        NonConflictSets(x1009, x1016): Set()
                        Found Cycle: x1009, x1016
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x1016 = SRAMBankedWrite(x849,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          x1009 = SRAMBankedRead(x849,Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                            x1009 = SRAMBankedRead(x849,Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                            x1010 = VecApply(x1009,0)
                            x1011 = FixMul(x1010,Const(0.099999904632568359375))
                            x1014 = FixMul(x1011,x1013)
                            x1016 = SRAMBankedWrite(x849,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                        Done finding cycles: Vector(AccumTriple(x849,x1009,x1016)), Map(x1010 -> List(AccumTriple(x849,x1009,x1016)), x1016 -> List(AccumTriple(x849,x1009,x1016)), x1009 -> List(AccumTriple(x849,x1009,x1016)), x1014 -> List(AccumTriple(x849,x1009,x1016)), x1011 -> List(AccumTriple(x849,x1009,x1016)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1009 = SRAMBankedRead(x849,Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                          x1010 = VecApply(x1009,0)
                          x1011 = FixMul(x1010,Const(0.099999904632568359375))
                          x1012 = SRAMBankedRead(x928,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                          x1013 = VecApply(x1012,0)
                          x1014 = FixMul(x1011,x1013)
                          x1015 = SRAMBankedWrite(x846,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          x1016 = SRAMBankedWrite(x849,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          x1017 = SRAMBankedWrite(x847,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          x1018 = SRAMBankedWrite(x848,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          x1019 = SRAMBankedWrite(x850,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1012
                        cur: x1012, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1012 = SRAMBankedRead(x928,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1017
                        Computing fullDFS: x1014
                        Computing fullDFS: x1011
                        Computing fullDFS: x1010
                        Computing fullDFS: x1009
                        cur: x1009, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x849,x1009,x1016))
                        [2.0 = max(0) + 2.0] x1009 = SRAMBankedRead(x849,Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        cycle deps of x1010: Vector(x1009, x1010)
                        [2.0 = max(2.0) + 0.0] x1010 = VecApply(x1009,0)[cycle]
                        cycle deps of x1011: Vector(x1009, x1010, x1011)
                        [8.0 = max(2.0) + 6.0] x1011 = FixMul(x1010,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x1013
                        [2.0 = max(2.0) + 0.0] x1013 = VecApply(x1012,0)
                        cycle deps of x1014: Vector(x1009, x1010, x1011, x1014)
                        [14.0 = max(8.0, 2.0) + 6.0] x1014 = FixMul(x1011,x1013)[cycle]
                        cycle deps of x1017: Vector(x1009, x1010, x1011, x1014, x1017)
                        [15.0 = max(14.0) + 1.0] x1017 = SRAMBankedWrite(x847,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                        Computing fullDFS: x1016
                        cycle deps of x1016: Vector(x1009, x1009, x1010, x1011, x1014, x1016)
                        [15.0 = max(2.0, 14.0) + 1.0] x1016 = SRAMBankedWrite(x849,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))[cycle]
                        Computing fullDFS: x1015
                        cycle deps of x1015: Vector(x1009, x1010, x1011, x1014, x1015)
                        [15.0 = max(14.0) + 1.0] x1015 = SRAMBankedWrite(x846,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                        Computing fullDFS: x1018
                        cycle deps of x1018: Vector(x1009, x1010, x1011, x1014, x1018)
                        [15.0 = max(14.0) + 1.0] x1018 = SRAMBankedWrite(x848,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                        Computing fullDFS: x1019
                        cycle deps of x1019: Vector(x1009, x1010, x1011, x1014, x1019)
                        [15.0 = max(14.0) + 1.0] x1019 = SRAMBankedWrite(x850,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                        Cycle #0: write: x1016, cycle: x1009, x1009, x1010, x1011, x1014, x1016
                        x1014 = FixMul(x1011,x1013) [14.0]
                          [14.0 = 15.0 - 1.0] x1015 = SRAMBankedWrite(x846,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          [14.0 = 15.0 - 1.0] x1016 = SRAMBankedWrite(x849,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          [14.0 = 15.0 - 1.0] x1017 = SRAMBankedWrite(x847,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          [14.0 = 15.0 - 1.0] x1018 = SRAMBankedWrite(x848,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          [14.0 = 15.0 - 1.0] x1019 = SRAMBankedWrite(x850,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          [14.0]
                        x1011 = FixMul(x1010,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x1014 = FixMul(x1011,x1013)
                          [8.0]
                        x1010 = VecApply(x1009,0) [2.0]
                          [2.0 = 8.0 - 6.0] x1011 = FixMul(x1010,Const(0.099999904632568359375))
                          [2.0]
                        x1009 = SRAMBankedRead(x849,Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1010 = VecApply(x1009,0)
                          [2.0]
                        x1009 = SRAMBankedRead(x849,Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1010 = VecApply(x1009,0)
                          [2.0]
                        Cycles: Map(x1019 -> Vector(x1009, x1010, x1011, x1014, x1019), x1010 -> Vector(x1009, x1010), x1016 -> Vector(x1009, x1009, x1010, x1011, x1014, x1016), x1015 -> Vector(x1009, x1010, x1011, x1014, x1015), x1018 -> Vector(x1009, x1010, x1011, x1014, x1018), x1009 -> List(x1009), x1014 -> Vector(x1009, x1010, x1011, x1014), x1017 -> Vector(x1009, x1010, x1011, x1014, x1017), x1011 -> Vector(x1009, x1010, x1011))
                        pseudo cycles for x849:
                        Multiplexed accesses for memory x849: 
                          x1009 = SRAMBankedRead(x849,Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                        Access: x1009 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1009 = SRAMBankedRead(x849,Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x849: 
                          x1016 = SRAMBankedWrite(x849,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                        Access: x1016 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1016 = SRAMBankedWrite(x849,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x1009),x849,1.0)
                        AAACycle(Vector(x1016),x849,1.0)
                        WARCycle(x1009,x1016,x849,Vector(x1009, x1009, x1010, x1011, x1014, x1016),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x1009 = SRAMBankedRead(x849,Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1010 = VecApply(x1009,0)
                          [2.0] x1012 = SRAMBankedRead(x928,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1013 = VecApply(x1012,0)
                          [8.0] x1011 = FixMul(x1010,Const(0.099999904632568359375))
                          [14.0] x1014 = FixMul(x1011,x1013)
                          [15.0] x1015 = SRAMBankedWrite(x846,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          [15.0] x1016 = SRAMBankedWrite(x849,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          [15.0] x1017 = SRAMBankedWrite(x847,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          [15.0] x1018 = SRAMBankedWrite(x848,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                          [15.0] x1019 = SRAMBankedWrite(x850,Vector(x1014),Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)))
                        Cycle #0 on x849: 
                          x849 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                  x1041 = UnrolledForeach(Set(),x618,Block(Const(())),Vector(List(b837)),Vector(List(b840)),None)
                    Working on pipeLatencies of result Vector(x1024, Const(()), x1040, x1039, x1026, x1022), schedule Vector(x1022, x1023, x1024, x1025, x1026, x1027, x1028, x1030, x1032, x1033, x1034, x1036, x1037, x1038, x1039, x1040)
                    Memories with both reads and writes in this scope: Set(x569)
                    NonConflictSets(x1026, x1040): Set()
                    NonConflictSets(x1026, x1040): Set()
                    Found Cycle: x1026, x1040
                    Exclusions: Set() Set() 
                    Found cycle between: 
                      x1040 = SRAMBankedWrite(x569,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)))
                      x1026 = SRAMBankedRead(x569,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
                        x1026 = SRAMBankedRead(x569,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
                        x1027 = VecApply(x1026,0)
                        x1037 = FixAdd(x1034,x1027)
                        x1038 = Mux(x1036,x1034,x1037)
                        x1040 = SRAMBankedWrite(x569,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)))
                    Done finding cycles: Vector(AccumTriple(x569,x1026,x1040)), Map(x1037 -> List(AccumTriple(x569,x1026,x1040)), x1040 -> List(AccumTriple(x569,x1026,x1040)), x1027 -> List(AccumTriple(x569,x1026,x1040)), x1038 -> List(AccumTriple(x569,x1026,x1040)), x1026 -> List(AccumTriple(x569,x1026,x1040)))
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1022 = SRAMBankedRead(x845,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
                      x1023 = VecApply(x1022,0)
                      x1024 = SRAMBankedRead(x850,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
                      x1025 = VecApply(x1024,0)
                      x1026 = SRAMBankedRead(x569,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
                      x1027 = VecApply(x1026,0)
                      x1028 = And(b840,b558)
                      x1030 = And(b839,b558)
                      x1032 = And(x1030,x1028)
                      x1033 = FixAdd(x1023,x1025)
                      x1034 = Mux(x1032,x1033,x1023)
                      x1036 = FixEql(b835,Const(0))
                      x1037 = FixAdd(x1034,x1027)
                      x1038 = Mux(x1036,x1034,x1037)
                      x1039 = SRAMBankedWrite(x570,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)))
                      x1040 = SRAMBankedWrite(x569,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)))
                    Computing fullDFS: x1024
                    cur: x1024, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x1024 = SRAMBankedRead(x850,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: Const(())
                    Computing fullDFS: x1040
                    Computing fullDFS: x1026
                    cur: x1026, inReduce: true, latency: 2.0
                    Known Cycles: List(AccumTriple(x569,x1026,x1040))
                    [2.0 = max(0) + 2.0] x1026 = SRAMBankedRead(x569,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])[cycle]
                    Computing fullDFS: x1038
                    Computing fullDFS: x1034
                    Computing fullDFS: x1023
                    Computing fullDFS: x1022
                    cur: x1022, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x1022 = SRAMBankedRead(x845,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x1023 = VecApply(x1022,0)
                    Computing fullDFS: x1032
                    Computing fullDFS: x1028
                    cur: x1028, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1028 = And(b840,b558)
                    Computing fullDFS: x1030
                    cur: x1030, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1030 = And(b839,b558)
                    [0.4 = max(0.2, 0.2) + 0.2] x1032 = And(x1030,x1028)
                    Computing fullDFS: x1033
                    Computing fullDFS: x1025
                    [2.0 = max(2.0) + 0.0] x1025 = VecApply(x1024,0)
                    [3.0 = max(2.0, 2.0) + 1.0] x1033 = FixAdd(x1023,x1025)
                    [3.5 = max(2.0, 0.4, 3.0) + 0.5] x1034 = Mux(x1032,x1033,x1023)
                    Computing fullDFS: x1036
                    cur: x1036, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1036 = FixEql(b835,Const(0))
                    Computing fullDFS: x1037
                    Computing fullDFS: x1027
                    cycle deps of x1027: Vector(x1026, x1027)
                    [2.0 = max(2.0) + 0.0] x1027 = VecApply(x1026,0)[cycle]
                    cycle deps of x1037: Vector(x1026, x1027, x1037)
                    [4.5 = max(2.0, 3.5) + 1.0] x1037 = FixAdd(x1034,x1027)[cycle]
                    cycle deps of x1038: Vector(x1026, x1027, x1037, x1038)
                    [5.0 = max(3.5, 0.2, 4.5) + 0.5] x1038 = Mux(x1036,x1034,x1037)[cycle]
                    cycle deps of x1040: Vector(x1026, x1026, x1027, x1037, x1038, x1040)
                    [6.0 = max(2.0, 5.0) + 1.0] x1040 = SRAMBankedWrite(x569,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)))[cycle]
                    Computing fullDFS: x1039
                    cycle deps of x1039: Vector(x1026, x1027, x1037, x1038, x1039)
                    [6.0 = max(5.0) + 1.0] x1039 = SRAMBankedWrite(x570,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)))
                    Cycle #0: write: x1040, cycle: x1026, x1026, x1027, x1037, x1038, x1040
                    x1038 = Mux(x1036,x1034,x1037) [5.0]
                      [5.0 = 6.0 - 1.0] x1039 = SRAMBankedWrite(x570,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)))
                      [5.0 = 6.0 - 1.0] x1040 = SRAMBankedWrite(x569,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)))
                      [5.0]
                    x1037 = FixAdd(x1034,x1027) [4.5]
                      [4.5 = 5.0 - 0.5] x1038 = Mux(x1036,x1034,x1037)
                      [4.5]
                    x1027 = VecApply(x1026,0) [2.0]
                      [3.5 = 4.5 - 1.0] x1037 = FixAdd(x1034,x1027)
                      [3.5]
                    x1026 = SRAMBankedRead(x569,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                      [3.5 = 3.5 - 0.0] x1027 = VecApply(x1026,0)
                      [3.5]
                    x1026 = SRAMBankedRead(x569,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]]) [3.5]
                      [3.5 = 3.5 - 0.0] x1027 = VecApply(x1026,0)
                      [3.5]
                    Cycles: Map(x1037 -> Vector(x1026, x1027, x1037), x1040 -> Vector(x1026, x1026, x1027, x1037, x1038, x1040), x1027 -> Vector(x1026, x1027), x1039 -> Vector(x1026, x1027, x1037, x1038, x1039), x1038 -> Vector(x1026, x1027, x1037, x1038), x1026 -> List(x1026))
                    pseudo cycles for x569:
                    Multiplexed accesses for memory x569: 
                      x1026 = SRAMBankedRead(x569,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
                    Access: x1026 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x1026 = SRAMBankedRead(x569,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 3.5 due to muxing.
                    Multiplexed accesses for memory x569: 
                      x1040 = SRAMBankedWrite(x569,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)))
                    Access: x1040 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x1040 = SRAMBankedWrite(x569,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558))) by 0.0 to 6.0 due to muxing.
                    Found cycles: 
                    AAACycle(Vector(x1026),x569,1.0)
                    AAACycle(Vector(x1040),x569,1.0)
                    WARCycle(x1026,x1040,x569,Vector(x1026, x1026, x1027, x1037, x1038, x1040),5.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                      Schedule after pipeLatencies calculation:
                      [0.2] x1028 = And(b840,b558)
                      [0.2] x1030 = And(b839,b558)
                      [0.2] x1036 = FixEql(b835,Const(0))
                      [0.4] x1032 = And(x1030,x1028)
                      [2.0] x1022 = SRAMBankedRead(x845,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1023 = VecApply(x1022,0)
                      [2.0] x1024 = SRAMBankedRead(x850,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1025 = VecApply(x1024,0)
                      [3.0] x1033 = FixAdd(x1023,x1025)
                      [3.5] x1026 = SRAMBankedRead(x569,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]])
                      [3.5] x1027 = VecApply(x1026,0)
                      [3.5] x1034 = Mux(x1032,x1033,x1023)
                      [4.5] x1037 = FixAdd(x1034,x1027)
                      [5.0] x1038 = Mux(x1036,x1034,x1037)
                      [6.0] x1039 = SRAMBankedWrite(x570,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)))
                      [6.0] x1040 = SRAMBankedWrite(x569,Vector(x1038),Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)))
                    Cycle #0 on x569: 
                      x569 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [accum_0]
                      disjoint:     true
                      no visible intermediates:
                        closed cycle:     false
                        no intermediates: true
                        is local mem:     true
                        number of writers:  1
                        outer reduce:     false
                        accum type:       Fold (if reduce, overrides no intermediates)
              x1250 = UnrolledReduce(Set(b559),x599,Block((x571) => Const(())),List(List(b1043, b1044)),List(List(b1046, b1047)),None)
                  x1105 = ParallelPipe(Set(b559),Block(Const(())))
                      x1083 = UnrolledForeach(Set(b1046, b559),x1061,Block(Const(())),List(List(b1063)),List(List(b1064)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1078, x1079, x1082, x1075, x1080, x1081, x1069), schedule Vector(x1066, x3001, x3002, x1068, x1069, x1070, x1072, x3003, x3004, x1074, x1075, x1076, x1077, x1078, x1079, x1080, x1081, x1082)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1066 = FixDiv(b549,Const(10))
                          x3001 = FixSLA(x1066,Const(1))
                          x3002 = FixAdd(x3001,x1066)
                          x1068 = FixAdd(x3002,b1063)
                          x1069 = SRAMBankedRead(x471,Vector(List(Const(2), Const(0))),Vector(x1068),Vector(Set(b1064, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                          x1070 = VecApply(x1069,0)
                          x1072 = FixDivSRA(b1043,Const(1))
                          x3003 = FixSLA(x1072,Const(1))
                          x3004 = FixAdd(x3003,x1072)
                          x1074 = FixAdd(x3004,b1063)
                          x1075 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1074),Vector(Set(b1064, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                          x1076 = VecApply(x1075,0)
                          x1077 = FixSub(x1070,x1076)
                          x1078 = SRAMBankedWrite(x1051,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                          x1079 = SRAMBankedWrite(x1050,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                          x1080 = SRAMBankedWrite(x1049,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                          x1081 = SRAMBankedWrite(x1053,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                          x1082 = SRAMBankedWrite(x1052,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1078
                        Computing fullDFS: x1077
                        Computing fullDFS: x1070
                        Computing fullDFS: x1069
                        Computing fullDFS: x1068
                        Computing fullDFS: x3002
                        Computing fullDFS: x1066
                        cur: x1066, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x1066 = FixDiv(b549,Const(10))
                        Computing fullDFS: x3001
                        [20.2 = max(20.0) + 0.2] x3001 = FixSLA(x1066,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3002 = FixAdd(x3001,x1066)
                        [22.2 = max(21.2) + 1.0] x1068 = FixAdd(x3002,b1063)
                        [24.2 = max(22.2) + 2.0] x1069 = SRAMBankedRead(x471,Vector(List(Const(2), Const(0))),Vector(x1068),Vector(Set(b1064, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x1070 = VecApply(x1069,0)
                        Computing fullDFS: x1076
                        Computing fullDFS: x1075
                        Computing fullDFS: x1074
                        Computing fullDFS: x3004
                        Computing fullDFS: x1072
                        cur: x1072, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x1072 = FixDivSRA(b1043,Const(1))
                        Computing fullDFS: x3003
                        [0.4 = max(0.2) + 0.2] x3003 = FixSLA(x1072,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3004 = FixAdd(x3003,x1072)
                        [2.4 = max(1.4) + 1.0] x1074 = FixAdd(x3004,b1063)
                        [4.4 = max(2.4) + 2.0] x1075 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1074),Vector(Set(b1064, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x1076 = VecApply(x1075,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x1077 = FixSub(x1070,x1076)
                        [26.2 = max(25.2) + 1.0] x1078 = SRAMBankedWrite(x1051,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                        Computing fullDFS: x1079
                        [26.2 = max(25.2) + 1.0] x1079 = SRAMBankedWrite(x1050,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                        Computing fullDFS: x1082
                        [26.2 = max(25.2) + 1.0] x1082 = SRAMBankedWrite(x1052,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                        Computing fullDFS: x1080
                        [26.2 = max(25.2) + 1.0] x1080 = SRAMBankedWrite(x1049,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                        Computing fullDFS: x1081
                        [26.2 = max(25.2) + 1.0] x1081 = SRAMBankedWrite(x1053,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x1072 = FixDivSRA(b1043,Const(1))
                          [0.4] x3003 = FixSLA(x1072,Const(1))
                          [1.4] x3004 = FixAdd(x3003,x1072)
                          [2.4] x1074 = FixAdd(x3004,b1063)
                          [4.4] x1075 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1074),Vector(Set(b1064, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x1076 = VecApply(x1075,0)
                          [20.0] x1066 = FixDiv(b549,Const(10))
                          [20.2] x3001 = FixSLA(x1066,Const(1))
                          [21.2] x3002 = FixAdd(x3001,x1066)
                          [22.2] x1068 = FixAdd(x3002,b1063)
                          [24.2] x1069 = SRAMBankedRead(x471,Vector(List(Const(2), Const(0))),Vector(x1068),Vector(Set(b1064, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x1070 = VecApply(x1069,0)
                          [25.2] x1077 = FixSub(x1070,x1076)
                          [26.2] x1078 = SRAMBankedWrite(x1051,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                          [26.2] x1079 = SRAMBankedWrite(x1050,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                          [26.2] x1080 = SRAMBankedWrite(x1049,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                          [26.2] x1081 = SRAMBankedWrite(x1053,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                          [26.2] x1082 = SRAMBankedWrite(x1052,Vector(x1077),Vector(List(Const(0))),Vector(b1063),Vector(Set(b1064, b1046, b559)))
                      x1104 = UnrolledForeach(Set(b1047, b559),x1062,Block(Const(())),List(List(b1084)),List(List(b1085)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1100, x1096, x1099, x1103, x1090, x1102, x1101), schedule Vector(x1087, x3005, x3006, x1089, x1090, x1091, x1093, x3007, x3008, x1095, x1096, x1097, x1098, x1099, x1100, x1101, x1102, x1103)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1087 = FixDiv(b549,Const(10))
                          x3005 = FixSLA(x1087,Const(1))
                          x3006 = FixAdd(x3005,x1087)
                          x1089 = FixAdd(x3006,b1084)
                          x1090 = SRAMBankedRead(x471,Vector(List(Const(2), Const(0))),Vector(x1089),Vector(Set(b1085, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                          x1091 = VecApply(x1090,0)
                          x1093 = FixDivSRA(b1044,Const(1))
                          x3007 = FixSLA(x1093,Const(1))
                          x3008 = FixAdd(x3007,x1093)
                          x1095 = FixAdd(x3008,b1084)
                          x1096 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1095),Vector(Set(b1085, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                          x1097 = VecApply(x1096,0)
                          x1098 = FixSub(x1091,x1097)
                          x1099 = SRAMBankedWrite(x1055,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                          x1100 = SRAMBankedWrite(x1057,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                          x1101 = SRAMBankedWrite(x1054,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                          x1102 = SRAMBankedWrite(x1058,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                          x1103 = SRAMBankedWrite(x1056,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1100
                        Computing fullDFS: x1098
                        Computing fullDFS: x1091
                        Computing fullDFS: x1090
                        Computing fullDFS: x1089
                        Computing fullDFS: x3006
                        Computing fullDFS: x1087
                        cur: x1087, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x1087 = FixDiv(b549,Const(10))
                        Computing fullDFS: x3005
                        [20.2 = max(20.0) + 0.2] x3005 = FixSLA(x1087,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3006 = FixAdd(x3005,x1087)
                        [22.2 = max(21.2) + 1.0] x1089 = FixAdd(x3006,b1084)
                        [24.2 = max(22.2) + 2.0] x1090 = SRAMBankedRead(x471,Vector(List(Const(2), Const(0))),Vector(x1089),Vector(Set(b1085, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x1091 = VecApply(x1090,0)
                        Computing fullDFS: x1097
                        Computing fullDFS: x1096
                        Computing fullDFS: x1095
                        Computing fullDFS: x3008
                        Computing fullDFS: x1093
                        cur: x1093, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x1093 = FixDivSRA(b1044,Const(1))
                        Computing fullDFS: x3007
                        [0.4 = max(0.2) + 0.2] x3007 = FixSLA(x1093,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3008 = FixAdd(x3007,x1093)
                        [2.4 = max(1.4) + 1.0] x1095 = FixAdd(x3008,b1084)
                        [4.4 = max(2.4) + 2.0] x1096 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1095),Vector(Set(b1085, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x1097 = VecApply(x1096,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x1098 = FixSub(x1091,x1097)
                        [26.2 = max(25.2) + 1.0] x1100 = SRAMBankedWrite(x1057,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                        Computing fullDFS: x1099
                        [26.2 = max(25.2) + 1.0] x1099 = SRAMBankedWrite(x1055,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                        Computing fullDFS: x1103
                        [26.2 = max(25.2) + 1.0] x1103 = SRAMBankedWrite(x1056,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                        Computing fullDFS: x1102
                        [26.2 = max(25.2) + 1.0] x1102 = SRAMBankedWrite(x1058,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                        Computing fullDFS: x1101
                        [26.2 = max(25.2) + 1.0] x1101 = SRAMBankedWrite(x1054,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x1093 = FixDivSRA(b1044,Const(1))
                          [0.4] x3007 = FixSLA(x1093,Const(1))
                          [1.4] x3008 = FixAdd(x3007,x1093)
                          [2.4] x1095 = FixAdd(x3008,b1084)
                          [4.4] x1096 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1095),Vector(Set(b1085, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x1097 = VecApply(x1096,0)
                          [20.0] x1087 = FixDiv(b549,Const(10))
                          [20.2] x3005 = FixSLA(x1087,Const(1))
                          [21.2] x3006 = FixAdd(x3005,x1087)
                          [22.2] x1089 = FixAdd(x3006,b1084)
                          [24.2] x1090 = SRAMBankedRead(x471,Vector(List(Const(2), Const(0))),Vector(x1089),Vector(Set(b1085, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x1091 = VecApply(x1090,0)
                          [25.2] x1098 = FixSub(x1091,x1097)
                          [26.2] x1099 = SRAMBankedWrite(x1055,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                          [26.2] x1100 = SRAMBankedWrite(x1057,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                          [26.2] x1101 = SRAMBankedWrite(x1054,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                          [26.2] x1102 = SRAMBankedWrite(x1058,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                          [26.2] x1103 = SRAMBankedWrite(x1056,Vector(x1098),Vector(List(Const(0))),Vector(b1084),Vector(Set(b1085, b1047, b559)))
                  x1134 = ParallelPipe(Set(b559),Block(Const(())))
                      x1120 = UnitPipe(Set(b1046, b559),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1115, x1119, x1111, x1108), schedule Vector(x1108, x1109, x1111, x1112, x1113, x3009, x1115, x1116, x3010, x1119)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1108 = SRAMBankedRead(x1049,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1109 = VecApply(x1108,0)
                          x1111 = SRAMBankedRead(x1050,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1112 = VecApply(x1111,0)
                          x1113 = FixMul(x1112,x1112)
                          x3009 = FixFMA(x1109,x1109,x1113)
                          x1115 = SRAMBankedRead(x1051,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1116 = VecApply(x1115,0)
                          x3010 = FixFMA(x1116,x1116,x3009)
                          x1119 = SRAMBankedWrite(x1106,Vector(x3010),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1115
                        cur: x1115, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1115 = SRAMBankedRead(x1051,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1119
                        Computing fullDFS: x3010
                        Computing fullDFS: x3009
                        Computing fullDFS: x1109
                        Computing fullDFS: x1108
                        cur: x1108, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1108 = SRAMBankedRead(x1049,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1109 = VecApply(x1108,0)
                        Computing fullDFS: x1113
                        Computing fullDFS: x1112
                        Computing fullDFS: x1111
                        cur: x1111, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1111 = SRAMBankedRead(x1050,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1112 = VecApply(x1111,0)
                        [8.0 = max(2.0) + 6.0] x1113 = FixMul(x1112,x1112)
                        [14.0 = max(2.0, 8.0) + 6.0] x3009 = FixFMA(x1109,x1109,x1113)
                        Computing fullDFS: x1116
                        [2.0 = max(2.0) + 0.0] x1116 = VecApply(x1115,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3010 = FixFMA(x1116,x1116,x3009)
                        [21.0 = max(20.0) + 1.0] x1119 = SRAMBankedWrite(x1106,Vector(x3010),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1108 = SRAMBankedRead(x1049,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1109 = VecApply(x1108,0)
                          [2.0] x1111 = SRAMBankedRead(x1050,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1112 = VecApply(x1111,0)
                          [2.0] x1115 = SRAMBankedRead(x1051,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1116 = VecApply(x1115,0)
                          [8.0] x1113 = FixMul(x1112,x1112)
                          [14.0] x3009 = FixFMA(x1109,x1109,x1113)
                          [20.0] x3010 = FixFMA(x1116,x1116,x3009)
                          [21.0] x1119 = SRAMBankedWrite(x1106,Vector(x3010),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x1133 = UnitPipe(Set(b1047, b559),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1132, x1128, x1121, x1124), schedule Vector(x1121, x1122, x1124, x1125, x1126, x3011, x1128, x1129, x3012, x1132)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1121 = SRAMBankedRead(x1054,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1122 = VecApply(x1121,0)
                          x1124 = SRAMBankedRead(x1055,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1125 = VecApply(x1124,0)
                          x1126 = FixMul(x1125,x1125)
                          x3011 = FixFMA(x1122,x1122,x1126)
                          x1128 = SRAMBankedRead(x1056,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1129 = VecApply(x1128,0)
                          x3012 = FixFMA(x1129,x1129,x3011)
                          x1132 = SRAMBankedWrite(x1107,Vector(x3012),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1132
                        Computing fullDFS: x3012
                        Computing fullDFS: x3011
                        Computing fullDFS: x1122
                        Computing fullDFS: x1121
                        cur: x1121, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1121 = SRAMBankedRead(x1054,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1122 = VecApply(x1121,0)
                        Computing fullDFS: x1126
                        Computing fullDFS: x1125
                        Computing fullDFS: x1124
                        cur: x1124, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1124 = SRAMBankedRead(x1055,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1125 = VecApply(x1124,0)
                        [8.0 = max(2.0) + 6.0] x1126 = FixMul(x1125,x1125)
                        [14.0 = max(2.0, 8.0) + 6.0] x3011 = FixFMA(x1122,x1122,x1126)
                        Computing fullDFS: x1129
                        Computing fullDFS: x1128
                        cur: x1128, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1128 = SRAMBankedRead(x1056,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1129 = VecApply(x1128,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3012 = FixFMA(x1129,x1129,x3011)
                        [21.0 = max(20.0) + 1.0] x1132 = SRAMBankedWrite(x1107,Vector(x3012),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1121 = SRAMBankedRead(x1054,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1122 = VecApply(x1121,0)
                          [2.0] x1124 = SRAMBankedRead(x1055,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1125 = VecApply(x1124,0)
                          [2.0] x1128 = SRAMBankedRead(x1056,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1129 = VecApply(x1128,0)
                          [8.0] x1126 = FixMul(x1125,x1125)
                          [14.0] x3011 = FixFMA(x1122,x1122,x1126)
                          [20.0] x3012 = FixFMA(x1129,x1129,x3011)
                          [21.0] x1132 = SRAMBankedWrite(x1107,Vector(x3012),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x1159 = ParallelPipe(Set(b559),Block(Const(())))
                      x1149 = UnitPipe(Set(b1046, b559),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1141, x1147, x1148), schedule Vector(x1141, x1142, x1143, x1144, x1145, x1146, x1147, x1148)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1141 = SRAMBankedRead(x1106,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1142 = VecApply(x1141,0)
                          x1143 = FixLst(Const(0),x1142)
                          x1144 = FixLst(Const(1),x1142)
                          x1145 = And(x1143,x1144)
                          x1146 = Not(x1145)
                          x1147 = RegWrite(x1137,x1145,Set())
                          x1148 = RegWrite(x1139,x1146,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1141
                        cur: x1141, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1141 = SRAMBankedRead(x1106,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1147
                        Computing fullDFS: x1145
                        Computing fullDFS: x1143
                        Computing fullDFS: x1142
                        [2.0 = max(2.0) + 0.0] x1142 = VecApply(x1141,0)
                        [2.4 = max(2.0) + 0.4] x1143 = FixLst(Const(0),x1142)
                        Computing fullDFS: x1144
                        [2.4 = max(2.0) + 0.4] x1144 = FixLst(Const(1),x1142)
                        [2.6 = max(2.4, 2.4) + 0.2] x1145 = And(x1143,x1144)
                        [3.6 = max(2.6) + 1.0] x1147 = RegWrite(x1137,x1145,Set())
                        Computing fullDFS: x1148
                        Computing fullDFS: x1146
                        [2.8000000000000003 = max(2.6) + 0.2] x1146 = Not(x1145)
                        [3.8 = max(2.8) + 1.0] x1148 = RegWrite(x1139,x1146,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1141 = SRAMBankedRead(x1106,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1142 = VecApply(x1141,0)
                          [2.4] x1143 = FixLst(Const(0),x1142)
                          [2.4] x1144 = FixLst(Const(1),x1142)
                          [2.6] x1145 = And(x1143,x1144)
                          [2.8] x1146 = Not(x1145)
                          [3.6] x1147 = RegWrite(x1137,x1145,Set())
                          [3.8] x1148 = RegWrite(x1139,x1146,Set())
                      x1158 = UnitPipe(Set(b1047, b559),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1150, x1156, x1157), schedule Vector(x1150, x1151, x1152, x1153, x1154, x1155, x1156, x1157)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1150 = SRAMBankedRead(x1107,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1151 = VecApply(x1150,0)
                          x1152 = FixLst(Const(0),x1151)
                          x1153 = FixLst(Const(1),x1151)
                          x1154 = And(x1152,x1153)
                          x1155 = Not(x1154)
                          x1156 = RegWrite(x1138,x1154,Set())
                          x1157 = RegWrite(x1140,x1155,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1150
                        cur: x1150, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1150 = SRAMBankedRead(x1107,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1156
                        Computing fullDFS: x1154
                        Computing fullDFS: x1152
                        Computing fullDFS: x1151
                        [2.0 = max(2.0) + 0.0] x1151 = VecApply(x1150,0)
                        [2.4 = max(2.0) + 0.4] x1152 = FixLst(Const(0),x1151)
                        Computing fullDFS: x1153
                        [2.4 = max(2.0) + 0.4] x1153 = FixLst(Const(1),x1151)
                        [2.6 = max(2.4, 2.4) + 0.2] x1154 = And(x1152,x1153)
                        [3.6 = max(2.6) + 1.0] x1156 = RegWrite(x1138,x1154,Set())
                        Computing fullDFS: x1157
                        Computing fullDFS: x1155
                        [2.8000000000000003 = max(2.6) + 0.2] x1155 = Not(x1154)
                        [3.8 = max(2.8) + 1.0] x1157 = RegWrite(x1140,x1155,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1150 = SRAMBankedRead(x1107,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1151 = VecApply(x1150,0)
                          [2.4] x1152 = FixLst(Const(0),x1151)
                          [2.4] x1153 = FixLst(Const(1),x1151)
                          [2.6] x1154 = And(x1152,x1153)
                          [2.8] x1155 = Not(x1154)
                          [3.6] x1156 = RegWrite(x1138,x1154,Set())
                          [3.8] x1157 = RegWrite(x1140,x1155,Set())
                  x1177 = Switch(List(x2935, x2936),Block(x1176))
                    Working on pipeLatencies of result Vector(x1176, x1175, x1174, x1164, x1165, Const(90)), schedule Vector(x1175, x1176, x1164, x1165, x1166, x1167, x1168, x1169, x1170, x1171, x1172, x1173, x1174)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1175 = SwitchCase(Block(x1174))
                      x1176 = SwitchCase(Block(Const(90)))
                      x1164 = RegRead(x1137)
                      x1165 = SRAMBankedRead(x1106,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1164)),Vec[Fix[TRUE,_10,_22]])
                      x1166 = VecApply(x1165,0)
                      x1167 = FixDiv(Const(100),x1166)
                      x1168 = FixDiv(x1167,x1166)
                      x1169 = FixDiv(x1168,x1166)
                      x1170 = FixDiv(x1169,x1166)
                      x1171 = FixDiv(x1170,x1166)
                      x1172 = FixDiv(Const(10),x1166)
                      x1173 = FixDiv(x1172,x1166)
                      x1174 = FixSub(x1171,x1173)
                    Computing fullDFS: x1176
                    cur: x1176, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1176 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x1175
                    Computing fullDFS: x1164
                    cur: x1164, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1164 = RegRead(x1137)
                    Computing fullDFS: x1165
                    [2.0 = max(0.0) + 2.0] x1165 = SRAMBankedRead(x1106,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1164)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x1174
                    Computing fullDFS: x1171
                    Computing fullDFS: x1166
                    [2.0 = max(2.0) + 0.0] x1166 = VecApply(x1165,0)
                    Computing fullDFS: x1170
                    Computing fullDFS: x1169
                    Computing fullDFS: x1168
                    Computing fullDFS: x1167
                    [22.0 = max(2.0) + 20.0] x1167 = FixDiv(Const(100),x1166)
                    [42.0 = max(2.0, 22.0) + 20.0] x1168 = FixDiv(x1167,x1166)
                    [62.0 = max(2.0, 42.0) + 20.0] x1169 = FixDiv(x1168,x1166)
                    [82.0 = max(2.0, 62.0) + 20.0] x1170 = FixDiv(x1169,x1166)
                    [102.0 = max(2.0, 82.0) + 20.0] x1171 = FixDiv(x1170,x1166)
                    Computing fullDFS: x1173
                    Computing fullDFS: x1172
                    [22.0 = max(2.0) + 20.0] x1172 = FixDiv(Const(10),x1166)
                    [42.0 = max(2.0, 22.0) + 20.0] x1173 = FixDiv(x1172,x1166)
                    [103.0 = max(102.0, 42.0) + 1.0] x1174 = FixSub(x1171,x1173)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x1175 = SwitchCase(Block(x1174))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x1176 = SwitchCase(Block(Const(90)))
                      [0.0] x1164 = RegRead(x1137)
                      [2.0] x1165 = SRAMBankedRead(x1106,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1164)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1166 = VecApply(x1165,0)
                      [22.0] x1167 = FixDiv(Const(100),x1166)
                      [22.0] x1172 = FixDiv(Const(10),x1166)
                      [42.0] x1168 = FixDiv(x1167,x1166)
                      [42.0] x1173 = FixDiv(x1172,x1166)
                      [62.0] x1169 = FixDiv(x1168,x1166)
                      [82.0] x1170 = FixDiv(x1169,x1166)
                      [102.0] x1171 = FixDiv(x1170,x1166)
                      [103.0] x1175 = SwitchCase(Block(x1174))
                      [103.0] x1174 = FixSub(x1171,x1173)
                  x1191 = Switch(List(x2937, x2938),Block(x1190))
                    Working on pipeLatencies of result Vector(x1190, x1189, x1188, x1178, x1179, Const(90)), schedule Vector(x1189, x1190, x1178, x1179, x1180, x1181, x1182, x1183, x1184, x1185, x1186, x1187, x1188)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1189 = SwitchCase(Block(x1188))
                      x1190 = SwitchCase(Block(Const(90)))
                      x1178 = RegRead(x1138)
                      x1179 = SRAMBankedRead(x1107,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1178)),Vec[Fix[TRUE,_10,_22]])
                      x1180 = VecApply(x1179,0)
                      x1181 = FixDiv(Const(100),x1180)
                      x1182 = FixDiv(x1181,x1180)
                      x1183 = FixDiv(x1182,x1180)
                      x1184 = FixDiv(x1183,x1180)
                      x1185 = FixDiv(x1184,x1180)
                      x1186 = FixDiv(Const(10),x1180)
                      x1187 = FixDiv(x1186,x1180)
                      x1188 = FixSub(x1185,x1187)
                    Computing fullDFS: x1190
                    cur: x1190, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1190 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x1189
                    Computing fullDFS: x1178
                    cur: x1178, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1178 = RegRead(x1138)
                    Computing fullDFS: x1179
                    [2.0 = max(0.0) + 2.0] x1179 = SRAMBankedRead(x1107,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1178)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x1188
                    Computing fullDFS: x1185
                    Computing fullDFS: x1180
                    [2.0 = max(2.0) + 0.0] x1180 = VecApply(x1179,0)
                    Computing fullDFS: x1184
                    Computing fullDFS: x1183
                    Computing fullDFS: x1182
                    Computing fullDFS: x1181
                    [22.0 = max(2.0) + 20.0] x1181 = FixDiv(Const(100),x1180)
                    [42.0 = max(2.0, 22.0) + 20.0] x1182 = FixDiv(x1181,x1180)
                    [62.0 = max(2.0, 42.0) + 20.0] x1183 = FixDiv(x1182,x1180)
                    [82.0 = max(2.0, 62.0) + 20.0] x1184 = FixDiv(x1183,x1180)
                    [102.0 = max(2.0, 82.0) + 20.0] x1185 = FixDiv(x1184,x1180)
                    Computing fullDFS: x1187
                    Computing fullDFS: x1186
                    [22.0 = max(2.0) + 20.0] x1186 = FixDiv(Const(10),x1180)
                    [42.0 = max(2.0, 22.0) + 20.0] x1187 = FixDiv(x1186,x1180)
                    [103.0 = max(102.0, 42.0) + 1.0] x1188 = FixSub(x1185,x1187)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x1189 = SwitchCase(Block(x1188))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x1190 = SwitchCase(Block(Const(90)))
                      [0.0] x1178 = RegRead(x1138)
                      [2.0] x1179 = SRAMBankedRead(x1107,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1178)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1180 = VecApply(x1179,0)
                      [22.0] x1181 = FixDiv(Const(100),x1180)
                      [22.0] x1186 = FixDiv(Const(10),x1180)
                      [42.0] x1182 = FixDiv(x1181,x1180)
                      [42.0] x1187 = FixDiv(x1186,x1180)
                      [62.0] x1183 = FixDiv(x1182,x1180)
                      [82.0] x1184 = FixDiv(x1183,x1180)
                      [102.0] x1185 = FixDiv(x1184,x1180)
                      [103.0] x1189 = SwitchCase(Block(x1188))
                      [103.0] x1188 = FixSub(x1185,x1187)
                  x1196 = ParallelPipe(Set(b559),Block(Const(())))
                      x1193 = UnitPipe(Set(b1046, b559),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1192), schedule Vector(x1192)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1192 = SRAMBankedWrite(x1135,Vector(x1177),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1192
                        cur: x1192, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x1192 = SRAMBankedWrite(x1135,Vector(x1177),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x1192 = SRAMBankedWrite(x1135,Vector(x1177),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x1195 = UnitPipe(Set(b1047, b559),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1194), schedule Vector(x1194)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1194 = SRAMBankedWrite(x1136,Vector(x1191),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1194
                        cur: x1194, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x1194 = SRAMBankedWrite(x1136,Vector(x1191),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x1194 = SRAMBankedWrite(x1136,Vector(x1191),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x1229 = ParallelPipe(Set(b559),Block(Const(())))
                      x1214 = UnrolledForeach(Set(b1046, b559),x1199,Block(Const(())),List(List(b1201)),List(List(b1202)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1211, x1206, x1210, x1209, x1213, x1203, x1212), schedule Vector(x1203, x1204, x1205, x1206, x1207, x1208, x1209, x1210, x1211, x1212, x1213)
                        Memories with both reads and writes in this scope: Set(x1052)
                        NonConflictSets(x1203, x1213): Set()
                        NonConflictSets(x1203, x1213): Set()
                        Found Cycle: x1203, x1213
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x1213 = SRAMBankedWrite(x1052,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          x1203 = SRAMBankedRead(x1052,Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                            x1203 = SRAMBankedRead(x1052,Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                            x1204 = VecApply(x1203,0)
                            x1205 = FixMul(x1204,Const(0.099999904632568359375))
                            x1208 = FixMul(x1205,x1207)
                            x1213 = SRAMBankedWrite(x1052,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                        Done finding cycles: Vector(AccumTriple(x1052,x1203,x1213)), Map(x1205 -> List(AccumTriple(x1052,x1203,x1213)), x1213 -> List(AccumTriple(x1052,x1203,x1213)), x1204 -> List(AccumTriple(x1052,x1203,x1213)), x1203 -> List(AccumTriple(x1052,x1203,x1213)), x1208 -> List(AccumTriple(x1052,x1203,x1213)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1203 = SRAMBankedRead(x1052,Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                          x1204 = VecApply(x1203,0)
                          x1205 = FixMul(x1204,Const(0.099999904632568359375))
                          x1206 = SRAMBankedRead(x1135,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                          x1207 = VecApply(x1206,0)
                          x1208 = FixMul(x1205,x1207)
                          x1209 = SRAMBankedWrite(x1051,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          x1210 = SRAMBankedWrite(x1050,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          x1211 = SRAMBankedWrite(x1049,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          x1212 = SRAMBankedWrite(x1053,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          x1213 = SRAMBankedWrite(x1052,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1211
                        Computing fullDFS: x1208
                        Computing fullDFS: x1205
                        Computing fullDFS: x1204
                        Computing fullDFS: x1203
                        cur: x1203, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x1052,x1203,x1213))
                        [2.0 = max(0) + 2.0] x1203 = SRAMBankedRead(x1052,Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        cycle deps of x1204: Vector(x1203, x1204)
                        [2.0 = max(2.0) + 0.0] x1204 = VecApply(x1203,0)[cycle]
                        cycle deps of x1205: Vector(x1203, x1204, x1205)
                        [8.0 = max(2.0) + 6.0] x1205 = FixMul(x1204,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x1207
                        Computing fullDFS: x1206
                        cur: x1206, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1206 = SRAMBankedRead(x1135,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1207 = VecApply(x1206,0)
                        cycle deps of x1208: Vector(x1203, x1204, x1205, x1208)
                        [14.0 = max(8.0, 2.0) + 6.0] x1208 = FixMul(x1205,x1207)[cycle]
                        cycle deps of x1211: Vector(x1203, x1204, x1205, x1208, x1211)
                        [15.0 = max(14.0) + 1.0] x1211 = SRAMBankedWrite(x1049,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                        Computing fullDFS: x1210
                        cycle deps of x1210: Vector(x1203, x1204, x1205, x1208, x1210)
                        [15.0 = max(14.0) + 1.0] x1210 = SRAMBankedWrite(x1050,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                        Computing fullDFS: x1209
                        cycle deps of x1209: Vector(x1203, x1204, x1205, x1208, x1209)
                        [15.0 = max(14.0) + 1.0] x1209 = SRAMBankedWrite(x1051,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                        Computing fullDFS: x1213
                        cycle deps of x1213: Vector(x1203, x1203, x1204, x1205, x1208, x1213)
                        [15.0 = max(2.0, 14.0) + 1.0] x1213 = SRAMBankedWrite(x1052,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))[cycle]
                        Computing fullDFS: x1212
                        cycle deps of x1212: Vector(x1203, x1204, x1205, x1208, x1212)
                        [15.0 = max(14.0) + 1.0] x1212 = SRAMBankedWrite(x1053,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                        Cycle #0: write: x1213, cycle: x1203, x1203, x1204, x1205, x1208, x1213
                        x1208 = FixMul(x1205,x1207) [14.0]
                          [14.0 = 15.0 - 1.0] x1209 = SRAMBankedWrite(x1051,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          [14.0 = 15.0 - 1.0] x1210 = SRAMBankedWrite(x1050,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          [14.0 = 15.0 - 1.0] x1211 = SRAMBankedWrite(x1049,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          [14.0 = 15.0 - 1.0] x1212 = SRAMBankedWrite(x1053,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          [14.0 = 15.0 - 1.0] x1213 = SRAMBankedWrite(x1052,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          [14.0]
                        x1205 = FixMul(x1204,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x1208 = FixMul(x1205,x1207)
                          [8.0]
                        x1204 = VecApply(x1203,0) [2.0]
                          [2.0 = 8.0 - 6.0] x1205 = FixMul(x1204,Const(0.099999904632568359375))
                          [2.0]
                        x1203 = SRAMBankedRead(x1052,Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1204 = VecApply(x1203,0)
                          [2.0]
                        x1203 = SRAMBankedRead(x1052,Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1204 = VecApply(x1203,0)
                          [2.0]
                        Cycles: Map(x1205 -> Vector(x1203, x1204, x1205), x1213 -> Vector(x1203, x1203, x1204, x1205, x1208, x1213), x1204 -> Vector(x1203, x1204), x1210 -> Vector(x1203, x1204, x1205, x1208, x1210), x1209 -> Vector(x1203, x1204, x1205, x1208, x1209), x1212 -> Vector(x1203, x1204, x1205, x1208, x1212), x1203 -> List(x1203), x1208 -> Vector(x1203, x1204, x1205, x1208), x1211 -> Vector(x1203, x1204, x1205, x1208, x1211))
                        pseudo cycles for x1052:
                        Multiplexed accesses for memory x1052: 
                          x1203 = SRAMBankedRead(x1052,Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                        Access: x1203 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1203 = SRAMBankedRead(x1052,Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x1052: 
                          x1213 = SRAMBankedWrite(x1052,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                        Access: x1213 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1213 = SRAMBankedWrite(x1052,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x1203),x1052,1.0)
                        AAACycle(Vector(x1213),x1052,1.0)
                        WARCycle(x1203,x1213,x1052,Vector(x1203, x1203, x1204, x1205, x1208, x1213),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x1203 = SRAMBankedRead(x1052,Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1204 = VecApply(x1203,0)
                          [2.0] x1206 = SRAMBankedRead(x1135,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1207 = VecApply(x1206,0)
                          [8.0] x1205 = FixMul(x1204,Const(0.099999904632568359375))
                          [14.0] x1208 = FixMul(x1205,x1207)
                          [15.0] x1209 = SRAMBankedWrite(x1051,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          [15.0] x1210 = SRAMBankedWrite(x1050,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          [15.0] x1211 = SRAMBankedWrite(x1049,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          [15.0] x1212 = SRAMBankedWrite(x1053,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                          [15.0] x1213 = SRAMBankedWrite(x1052,Vector(x1208),Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)))
                        Cycle #0 on x1052: 
                          x1052 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                      x1228 = UnrolledForeach(Set(b1047, b559),x1200,Block(Const(())),List(List(b1215)),List(List(b1216)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1223, x1217, x1227, x1226, x1224, x1225, x1220), schedule Vector(x1217, x1218, x1219, x1220, x1221, x1222, x1223, x1224, x1225, x1226, x1227)
                        Memories with both reads and writes in this scope: Set(x1057)
                        NonConflictSets(x1217, x1224): Set()
                        NonConflictSets(x1217, x1224): Set()
                        Found Cycle: x1217, x1224
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x1224 = SRAMBankedWrite(x1057,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          x1217 = SRAMBankedRead(x1057,Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                            x1217 = SRAMBankedRead(x1057,Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                            x1218 = VecApply(x1217,0)
                            x1219 = FixMul(x1218,Const(0.099999904632568359375))
                            x1222 = FixMul(x1219,x1221)
                            x1224 = SRAMBankedWrite(x1057,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                        Done finding cycles: Vector(AccumTriple(x1057,x1217,x1224)), Map(x1222 -> List(AccumTriple(x1057,x1217,x1224)), x1219 -> List(AccumTriple(x1057,x1217,x1224)), x1218 -> List(AccumTriple(x1057,x1217,x1224)), x1224 -> List(AccumTriple(x1057,x1217,x1224)), x1217 -> List(AccumTriple(x1057,x1217,x1224)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1217 = SRAMBankedRead(x1057,Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                          x1218 = VecApply(x1217,0)
                          x1219 = FixMul(x1218,Const(0.099999904632568359375))
                          x1220 = SRAMBankedRead(x1136,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                          x1221 = VecApply(x1220,0)
                          x1222 = FixMul(x1219,x1221)
                          x1223 = SRAMBankedWrite(x1055,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          x1224 = SRAMBankedWrite(x1057,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          x1225 = SRAMBankedWrite(x1054,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          x1226 = SRAMBankedWrite(x1058,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          x1227 = SRAMBankedWrite(x1056,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1223
                        Computing fullDFS: x1222
                        Computing fullDFS: x1219
                        Computing fullDFS: x1218
                        Computing fullDFS: x1217
                        cur: x1217, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x1057,x1217,x1224))
                        [2.0 = max(0) + 2.0] x1217 = SRAMBankedRead(x1057,Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        cycle deps of x1218: Vector(x1217, x1218)
                        [2.0 = max(2.0) + 0.0] x1218 = VecApply(x1217,0)[cycle]
                        cycle deps of x1219: Vector(x1217, x1218, x1219)
                        [8.0 = max(2.0) + 6.0] x1219 = FixMul(x1218,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x1221
                        Computing fullDFS: x1220
                        cur: x1220, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1220 = SRAMBankedRead(x1136,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1221 = VecApply(x1220,0)
                        cycle deps of x1222: Vector(x1217, x1218, x1219, x1222)
                        [14.0 = max(8.0, 2.0) + 6.0] x1222 = FixMul(x1219,x1221)[cycle]
                        cycle deps of x1223: Vector(x1217, x1218, x1219, x1222, x1223)
                        [15.0 = max(14.0) + 1.0] x1223 = SRAMBankedWrite(x1055,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                        Computing fullDFS: x1227
                        cycle deps of x1227: Vector(x1217, x1218, x1219, x1222, x1227)
                        [15.0 = max(14.0) + 1.0] x1227 = SRAMBankedWrite(x1056,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                        Computing fullDFS: x1226
                        cycle deps of x1226: Vector(x1217, x1218, x1219, x1222, x1226)
                        [15.0 = max(14.0) + 1.0] x1226 = SRAMBankedWrite(x1058,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                        Computing fullDFS: x1224
                        cycle deps of x1224: Vector(x1217, x1217, x1218, x1219, x1222, x1224)
                        [15.0 = max(2.0, 14.0) + 1.0] x1224 = SRAMBankedWrite(x1057,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))[cycle]
                        Computing fullDFS: x1225
                        cycle deps of x1225: Vector(x1217, x1218, x1219, x1222, x1225)
                        [15.0 = max(14.0) + 1.0] x1225 = SRAMBankedWrite(x1054,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                        Cycle #0: write: x1224, cycle: x1217, x1217, x1218, x1219, x1222, x1224
                        x1222 = FixMul(x1219,x1221) [14.0]
                          [14.0 = 15.0 - 1.0] x1223 = SRAMBankedWrite(x1055,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          [14.0 = 15.0 - 1.0] x1224 = SRAMBankedWrite(x1057,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          [14.0 = 15.0 - 1.0] x1225 = SRAMBankedWrite(x1054,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          [14.0 = 15.0 - 1.0] x1226 = SRAMBankedWrite(x1058,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          [14.0 = 15.0 - 1.0] x1227 = SRAMBankedWrite(x1056,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          [14.0]
                        x1219 = FixMul(x1218,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x1222 = FixMul(x1219,x1221)
                          [8.0]
                        x1218 = VecApply(x1217,0) [2.0]
                          [2.0 = 8.0 - 6.0] x1219 = FixMul(x1218,Const(0.099999904632568359375))
                          [2.0]
                        x1217 = SRAMBankedRead(x1057,Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1218 = VecApply(x1217,0)
                          [2.0]
                        x1217 = SRAMBankedRead(x1057,Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1218 = VecApply(x1217,0)
                          [2.0]
                        Cycles: Map(x1222 -> Vector(x1217, x1218, x1219, x1222), x1225 -> Vector(x1217, x1218, x1219, x1222, x1225), x1219 -> Vector(x1217, x1218, x1219), x1227 -> Vector(x1217, x1218, x1219, x1222, x1227), x1218 -> Vector(x1217, x1218), x1224 -> Vector(x1217, x1217, x1218, x1219, x1222, x1224), x1223 -> Vector(x1217, x1218, x1219, x1222, x1223), x1226 -> Vector(x1217, x1218, x1219, x1222, x1226), x1217 -> List(x1217))
                        pseudo cycles for x1057:
                        Multiplexed accesses for memory x1057: 
                          x1217 = SRAMBankedRead(x1057,Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                        Access: x1217 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1217 = SRAMBankedRead(x1057,Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x1057: 
                          x1224 = SRAMBankedWrite(x1057,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                        Access: x1224 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1224 = SRAMBankedWrite(x1057,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x1217),x1057,1.0)
                        AAACycle(Vector(x1224),x1057,1.0)
                        WARCycle(x1217,x1224,x1057,Vector(x1217, x1217, x1218, x1219, x1222, x1224),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x1217 = SRAMBankedRead(x1057,Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1218 = VecApply(x1217,0)
                          [2.0] x1220 = SRAMBankedRead(x1136,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1221 = VecApply(x1220,0)
                          [8.0] x1219 = FixMul(x1218,Const(0.099999904632568359375))
                          [14.0] x1222 = FixMul(x1219,x1221)
                          [15.0] x1223 = SRAMBankedWrite(x1055,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          [15.0] x1224 = SRAMBankedWrite(x1057,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          [15.0] x1225 = SRAMBankedWrite(x1054,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          [15.0] x1226 = SRAMBankedWrite(x1058,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                          [15.0] x1227 = SRAMBankedWrite(x1056,Vector(x1222),Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)))
                        Cycle #0 on x1057: 
                          x1057 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                  x1249 = UnrolledForeach(Set(),x619,Block(Const(())),Vector(List(b1045)),Vector(List(b1048)),None)
                    Working on pipeLatencies of result Vector(Const(()), x1247, x1232, x1234, x1230, x1248), schedule Vector(x1230, x1231, x1232, x1233, x1234, x1235, x1236, x1238, x1240, x1241, x1242, x1244, x1245, x1246, x1247, x1248)
                    Memories with both reads and writes in this scope: Set(x571)
                    NonConflictSets(x1234, x1248): Set()
                    NonConflictSets(x1234, x1248): Set()
                    Found Cycle: x1234, x1248
                    Exclusions: Set() Set() 
                    Found cycle between: 
                      x1248 = SRAMBankedWrite(x571,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)))
                      x1234 = SRAMBankedRead(x571,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
                        x1234 = SRAMBankedRead(x571,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
                        x1235 = VecApply(x1234,0)
                        x1245 = FixAdd(x1242,x1235)
                        x1246 = Mux(x1244,x1242,x1245)
                        x1248 = SRAMBankedWrite(x571,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)))
                    Done finding cycles: Vector(AccumTriple(x571,x1234,x1248)), Map(x1246 -> List(AccumTriple(x571,x1234,x1248)), x1234 -> List(AccumTriple(x571,x1234,x1248)), x1245 -> List(AccumTriple(x571,x1234,x1248)), x1248 -> List(AccumTriple(x571,x1234,x1248)), x1235 -> List(AccumTriple(x571,x1234,x1248)))
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1230 = SRAMBankedRead(x1053,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
                      x1231 = VecApply(x1230,0)
                      x1232 = SRAMBankedRead(x1058,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
                      x1233 = VecApply(x1232,0)
                      x1234 = SRAMBankedRead(x571,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
                      x1235 = VecApply(x1234,0)
                      x1236 = And(b1048,b559)
                      x1238 = And(b1047,b559)
                      x1240 = And(x1238,x1236)
                      x1241 = FixAdd(x1231,x1233)
                      x1242 = Mux(x1240,x1241,x1231)
                      x1244 = FixEql(b1043,Const(0))
                      x1245 = FixAdd(x1242,x1235)
                      x1246 = Mux(x1244,x1242,x1245)
                      x1247 = SRAMBankedWrite(x572,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)))
                      x1248 = SRAMBankedWrite(x571,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)))
                    Computing fullDFS: Const(())
                    Computing fullDFS: x1247
                    Computing fullDFS: x1246
                    Computing fullDFS: x1242
                    Computing fullDFS: x1231
                    Computing fullDFS: x1230
                    cur: x1230, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x1230 = SRAMBankedRead(x1053,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x1231 = VecApply(x1230,0)
                    Computing fullDFS: x1240
                    Computing fullDFS: x1236
                    cur: x1236, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1236 = And(b1048,b559)
                    Computing fullDFS: x1238
                    cur: x1238, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1238 = And(b1047,b559)
                    [0.4 = max(0.2, 0.2) + 0.2] x1240 = And(x1238,x1236)
                    Computing fullDFS: x1241
                    Computing fullDFS: x1233
                    Computing fullDFS: x1232
                    cur: x1232, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x1232 = SRAMBankedRead(x1058,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x1233 = VecApply(x1232,0)
                    [3.0 = max(2.0, 2.0) + 1.0] x1241 = FixAdd(x1231,x1233)
                    [3.5 = max(2.0, 0.4, 3.0) + 0.5] x1242 = Mux(x1240,x1241,x1231)
                    Computing fullDFS: x1244
                    cur: x1244, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1244 = FixEql(b1043,Const(0))
                    Computing fullDFS: x1245
                    Computing fullDFS: x1235
                    Computing fullDFS: x1234
                    cur: x1234, inReduce: true, latency: 2.0
                    Known Cycles: List(AccumTriple(x571,x1234,x1248))
                    [2.0 = max(0) + 2.0] x1234 = SRAMBankedRead(x571,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])[cycle]
                    cycle deps of x1235: Vector(x1234, x1235)
                    [2.0 = max(2.0) + 0.0] x1235 = VecApply(x1234,0)[cycle]
                    cycle deps of x1245: Vector(x1234, x1235, x1245)
                    [4.5 = max(2.0, 3.5) + 1.0] x1245 = FixAdd(x1242,x1235)[cycle]
                    cycle deps of x1246: Vector(x1234, x1235, x1245, x1246)
                    [5.0 = max(3.5, 0.2, 4.5) + 0.5] x1246 = Mux(x1244,x1242,x1245)[cycle]
                    cycle deps of x1247: Vector(x1234, x1235, x1245, x1246, x1247)
                    [6.0 = max(5.0) + 1.0] x1247 = SRAMBankedWrite(x572,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)))
                    Computing fullDFS: x1248
                    cycle deps of x1248: Vector(x1234, x1234, x1235, x1245, x1246, x1248)
                    [6.0 = max(2.0, 5.0) + 1.0] x1248 = SRAMBankedWrite(x571,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)))[cycle]
                    Cycle #0: write: x1248, cycle: x1234, x1234, x1235, x1245, x1246, x1248
                    x1246 = Mux(x1244,x1242,x1245) [5.0]
                      [5.0 = 6.0 - 1.0] x1247 = SRAMBankedWrite(x572,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)))
                      [5.0 = 6.0 - 1.0] x1248 = SRAMBankedWrite(x571,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)))
                      [5.0]
                    x1245 = FixAdd(x1242,x1235) [4.5]
                      [4.5 = 5.0 - 0.5] x1246 = Mux(x1244,x1242,x1245)
                      [4.5]
                    x1235 = VecApply(x1234,0) [2.0]
                      [3.5 = 4.5 - 1.0] x1245 = FixAdd(x1242,x1235)
                      [3.5]
                    x1234 = SRAMBankedRead(x571,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                      [3.5 = 3.5 - 0.0] x1235 = VecApply(x1234,0)
                      [3.5]
                    x1234 = SRAMBankedRead(x571,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]]) [3.5]
                      [3.5 = 3.5 - 0.0] x1235 = VecApply(x1234,0)
                      [3.5]
                    Cycles: Map(x1246 -> Vector(x1234, x1235, x1245, x1246), x1234 -> List(x1234), x1245 -> Vector(x1234, x1235, x1245), x1248 -> Vector(x1234, x1234, x1235, x1245, x1246, x1248), x1235 -> Vector(x1234, x1235), x1247 -> Vector(x1234, x1235, x1245, x1246, x1247))
                    pseudo cycles for x571:
                    Multiplexed accesses for memory x571: 
                      x1234 = SRAMBankedRead(x571,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
                    Access: x1234 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x1234 = SRAMBankedRead(x571,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 3.5 due to muxing.
                    Multiplexed accesses for memory x571: 
                      x1248 = SRAMBankedWrite(x571,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)))
                    Access: x1248 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x1248 = SRAMBankedWrite(x571,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559))) by 0.0 to 6.0 due to muxing.
                    Found cycles: 
                    AAACycle(Vector(x1234),x571,1.0)
                    AAACycle(Vector(x1248),x571,1.0)
                    WARCycle(x1234,x1248,x571,Vector(x1234, x1234, x1235, x1245, x1246, x1248),5.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                      Schedule after pipeLatencies calculation:
                      [0.2] x1236 = And(b1048,b559)
                      [0.2] x1238 = And(b1047,b559)
                      [0.2] x1244 = FixEql(b1043,Const(0))
                      [0.4] x1240 = And(x1238,x1236)
                      [2.0] x1230 = SRAMBankedRead(x1053,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1231 = VecApply(x1230,0)
                      [2.0] x1232 = SRAMBankedRead(x1058,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1233 = VecApply(x1232,0)
                      [3.0] x1241 = FixAdd(x1231,x1233)
                      [3.5] x1234 = SRAMBankedRead(x571,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]])
                      [3.5] x1235 = VecApply(x1234,0)
                      [3.5] x1242 = Mux(x1240,x1241,x1231)
                      [4.5] x1245 = FixAdd(x1242,x1235)
                      [5.0] x1246 = Mux(x1244,x1242,x1245)
                      [6.0] x1247 = SRAMBankedWrite(x572,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)))
                      [6.0] x1248 = SRAMBankedWrite(x571,Vector(x1246),Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)))
                    Cycle #0 on x571: 
                      x571 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [accum_0]
                      disjoint:     true
                      no visible intermediates:
                        closed cycle:     false
                        no intermediates: true
                        is local mem:     true
                        number of writers:  1
                        outer reduce:     false
                        accum type:       Fold (if reduce, overrides no intermediates)
              x1458 = UnrolledReduce(Set(b560),x600,Block((x573) => Const(())),List(List(b1251, b1252)),List(List(b1254, b1255)),None)
                  x1313 = ParallelPipe(Set(b560),Block(Const(())))
                      x1291 = UnrolledForeach(Set(b1254, b560),x1269,Block(Const(())),List(List(b1271)),List(List(b1272)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1290, x1287, x1283, x1286, x1277, x1289, x1288), schedule Vector(x1274, x3013, x3014, x1276, x1277, x1278, x1280, x3015, x3016, x1282, x1283, x1284, x1285, x1286, x1287, x1288, x1289, x1290)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1274 = FixDiv(b550,Const(10))
                          x3013 = FixSLA(x1274,Const(1))
                          x3014 = FixAdd(x3013,x1274)
                          x1276 = FixAdd(x3014,b1271)
                          x1277 = SRAMBankedRead(x471,Vector(List(Const(3), Const(0))),Vector(x1276),Vector(Set(b1272, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                          x1278 = VecApply(x1277,0)
                          x1280 = FixDivSRA(b1251,Const(1))
                          x3015 = FixSLA(x1280,Const(1))
                          x3016 = FixAdd(x3015,x1280)
                          x1282 = FixAdd(x3016,b1271)
                          x1283 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1282),Vector(Set(b1272, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                          x1284 = VecApply(x1283,0)
                          x1285 = FixSub(x1278,x1284)
                          x1286 = SRAMBankedWrite(x1260,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                          x1287 = SRAMBankedWrite(x1259,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                          x1288 = SRAMBankedWrite(x1258,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                          x1289 = SRAMBankedWrite(x1257,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                          x1290 = SRAMBankedWrite(x1261,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1290
                        Computing fullDFS: x1285
                        Computing fullDFS: x1278
                        Computing fullDFS: x1277
                        Computing fullDFS: x1276
                        Computing fullDFS: x3014
                        Computing fullDFS: x1274
                        cur: x1274, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x1274 = FixDiv(b550,Const(10))
                        Computing fullDFS: x3013
                        [20.2 = max(20.0) + 0.2] x3013 = FixSLA(x1274,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3014 = FixAdd(x3013,x1274)
                        [22.2 = max(21.2) + 1.0] x1276 = FixAdd(x3014,b1271)
                        [24.2 = max(22.2) + 2.0] x1277 = SRAMBankedRead(x471,Vector(List(Const(3), Const(0))),Vector(x1276),Vector(Set(b1272, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x1278 = VecApply(x1277,0)
                        Computing fullDFS: x1284
                        Computing fullDFS: x1283
                        Computing fullDFS: x1282
                        Computing fullDFS: x3016
                        Computing fullDFS: x1280
                        cur: x1280, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x1280 = FixDivSRA(b1251,Const(1))
                        Computing fullDFS: x3015
                        [0.4 = max(0.2) + 0.2] x3015 = FixSLA(x1280,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3016 = FixAdd(x3015,x1280)
                        [2.4 = max(1.4) + 1.0] x1282 = FixAdd(x3016,b1271)
                        [4.4 = max(2.4) + 2.0] x1283 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1282),Vector(Set(b1272, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x1284 = VecApply(x1283,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x1285 = FixSub(x1278,x1284)
                        [26.2 = max(25.2) + 1.0] x1290 = SRAMBankedWrite(x1261,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                        Computing fullDFS: x1287
                        [26.2 = max(25.2) + 1.0] x1287 = SRAMBankedWrite(x1259,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                        Computing fullDFS: x1286
                        [26.2 = max(25.2) + 1.0] x1286 = SRAMBankedWrite(x1260,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                        Computing fullDFS: x1289
                        [26.2 = max(25.2) + 1.0] x1289 = SRAMBankedWrite(x1257,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                        Computing fullDFS: x1288
                        [26.2 = max(25.2) + 1.0] x1288 = SRAMBankedWrite(x1258,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x1280 = FixDivSRA(b1251,Const(1))
                          [0.4] x3015 = FixSLA(x1280,Const(1))
                          [1.4] x3016 = FixAdd(x3015,x1280)
                          [2.4] x1282 = FixAdd(x3016,b1271)
                          [4.4] x1283 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1282),Vector(Set(b1272, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x1284 = VecApply(x1283,0)
                          [20.0] x1274 = FixDiv(b550,Const(10))
                          [20.2] x3013 = FixSLA(x1274,Const(1))
                          [21.2] x3014 = FixAdd(x3013,x1274)
                          [22.2] x1276 = FixAdd(x3014,b1271)
                          [24.2] x1277 = SRAMBankedRead(x471,Vector(List(Const(3), Const(0))),Vector(x1276),Vector(Set(b1272, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x1278 = VecApply(x1277,0)
                          [25.2] x1285 = FixSub(x1278,x1284)
                          [26.2] x1286 = SRAMBankedWrite(x1260,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                          [26.2] x1287 = SRAMBankedWrite(x1259,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                          [26.2] x1288 = SRAMBankedWrite(x1258,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                          [26.2] x1289 = SRAMBankedWrite(x1257,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                          [26.2] x1290 = SRAMBankedWrite(x1261,Vector(x1285),Vector(List(Const(0))),Vector(b1271),Vector(Set(b1272, b1254, b560)))
                      x1312 = UnrolledForeach(Set(b1255, b560),x1270,Block(Const(())),List(List(b1292)),List(List(b1293)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1310, x1298, x1311, x1307, x1304, x1308, x1309), schedule Vector(x1295, x3017, x3018, x1297, x1298, x1299, x1301, x3019, x3020, x1303, x1304, x1305, x1306, x1307, x1308, x1309, x1310, x1311)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1295 = FixDiv(b550,Const(10))
                          x3017 = FixSLA(x1295,Const(1))
                          x3018 = FixAdd(x3017,x1295)
                          x1297 = FixAdd(x3018,b1292)
                          x1298 = SRAMBankedRead(x471,Vector(List(Const(3), Const(0))),Vector(x1297),Vector(Set(b1293, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                          x1299 = VecApply(x1298,0)
                          x1301 = FixDivSRA(b1252,Const(1))
                          x3019 = FixSLA(x1301,Const(1))
                          x3020 = FixAdd(x3019,x1301)
                          x1303 = FixAdd(x3020,b1292)
                          x1304 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1303),Vector(Set(b1293, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                          x1305 = VecApply(x1304,0)
                          x1306 = FixSub(x1299,x1305)
                          x1307 = SRAMBankedWrite(x1265,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                          x1308 = SRAMBankedWrite(x1264,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                          x1309 = SRAMBankedWrite(x1263,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                          x1310 = SRAMBankedWrite(x1266,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                          x1311 = SRAMBankedWrite(x1262,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1310
                        Computing fullDFS: x1306
                        Computing fullDFS: x1299
                        Computing fullDFS: x1298
                        Computing fullDFS: x1297
                        Computing fullDFS: x3018
                        Computing fullDFS: x1295
                        cur: x1295, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x1295 = FixDiv(b550,Const(10))
                        Computing fullDFS: x3017
                        [20.2 = max(20.0) + 0.2] x3017 = FixSLA(x1295,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3018 = FixAdd(x3017,x1295)
                        [22.2 = max(21.2) + 1.0] x1297 = FixAdd(x3018,b1292)
                        [24.2 = max(22.2) + 2.0] x1298 = SRAMBankedRead(x471,Vector(List(Const(3), Const(0))),Vector(x1297),Vector(Set(b1293, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x1299 = VecApply(x1298,0)
                        Computing fullDFS: x1305
                        Computing fullDFS: x1304
                        Computing fullDFS: x1303
                        Computing fullDFS: x3020
                        Computing fullDFS: x1301
                        cur: x1301, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x1301 = FixDivSRA(b1252,Const(1))
                        Computing fullDFS: x3019
                        [0.4 = max(0.2) + 0.2] x3019 = FixSLA(x1301,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3020 = FixAdd(x3019,x1301)
                        [2.4 = max(1.4) + 1.0] x1303 = FixAdd(x3020,b1292)
                        [4.4 = max(2.4) + 2.0] x1304 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1303),Vector(Set(b1293, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x1305 = VecApply(x1304,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x1306 = FixSub(x1299,x1305)
                        [26.2 = max(25.2) + 1.0] x1310 = SRAMBankedWrite(x1266,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                        Computing fullDFS: x1311
                        [26.2 = max(25.2) + 1.0] x1311 = SRAMBankedWrite(x1262,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                        Computing fullDFS: x1307
                        [26.2 = max(25.2) + 1.0] x1307 = SRAMBankedWrite(x1265,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                        Computing fullDFS: x1308
                        [26.2 = max(25.2) + 1.0] x1308 = SRAMBankedWrite(x1264,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                        Computing fullDFS: x1309
                        [26.2 = max(25.2) + 1.0] x1309 = SRAMBankedWrite(x1263,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x1301 = FixDivSRA(b1252,Const(1))
                          [0.4] x3019 = FixSLA(x1301,Const(1))
                          [1.4] x3020 = FixAdd(x3019,x1301)
                          [2.4] x1303 = FixAdd(x3020,b1292)
                          [4.4] x1304 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1303),Vector(Set(b1293, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x1305 = VecApply(x1304,0)
                          [20.0] x1295 = FixDiv(b550,Const(10))
                          [20.2] x3017 = FixSLA(x1295,Const(1))
                          [21.2] x3018 = FixAdd(x3017,x1295)
                          [22.2] x1297 = FixAdd(x3018,b1292)
                          [24.2] x1298 = SRAMBankedRead(x471,Vector(List(Const(3), Const(0))),Vector(x1297),Vector(Set(b1293, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x1299 = VecApply(x1298,0)
                          [25.2] x1306 = FixSub(x1299,x1305)
                          [26.2] x1307 = SRAMBankedWrite(x1265,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                          [26.2] x1308 = SRAMBankedWrite(x1264,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                          [26.2] x1309 = SRAMBankedWrite(x1263,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                          [26.2] x1310 = SRAMBankedWrite(x1266,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                          [26.2] x1311 = SRAMBankedWrite(x1262,Vector(x1306),Vector(List(Const(0))),Vector(b1292),Vector(Set(b1293, b1255, b560)))
                  x1342 = ParallelPipe(Set(b560),Block(Const(())))
                      x1328 = UnitPipe(Set(b1254, b560),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1327, x1323, x1319, x1316), schedule Vector(x1316, x1317, x1319, x1320, x1321, x3021, x1323, x1324, x3022, x1327)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1316 = SRAMBankedRead(x1257,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1317 = VecApply(x1316,0)
                          x1319 = SRAMBankedRead(x1258,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1320 = VecApply(x1319,0)
                          x1321 = FixMul(x1320,x1320)
                          x3021 = FixFMA(x1317,x1317,x1321)
                          x1323 = SRAMBankedRead(x1259,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1324 = VecApply(x1323,0)
                          x3022 = FixFMA(x1324,x1324,x3021)
                          x1327 = SRAMBankedWrite(x1314,Vector(x3022),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1327
                        Computing fullDFS: x3022
                        Computing fullDFS: x3021
                        Computing fullDFS: x1317
                        Computing fullDFS: x1316
                        cur: x1316, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1316 = SRAMBankedRead(x1257,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1317 = VecApply(x1316,0)
                        Computing fullDFS: x1321
                        Computing fullDFS: x1320
                        Computing fullDFS: x1319
                        cur: x1319, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1319 = SRAMBankedRead(x1258,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1320 = VecApply(x1319,0)
                        [8.0 = max(2.0) + 6.0] x1321 = FixMul(x1320,x1320)
                        [14.0 = max(2.0, 8.0) + 6.0] x3021 = FixFMA(x1317,x1317,x1321)
                        Computing fullDFS: x1324
                        Computing fullDFS: x1323
                        cur: x1323, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1323 = SRAMBankedRead(x1259,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1324 = VecApply(x1323,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3022 = FixFMA(x1324,x1324,x3021)
                        [21.0 = max(20.0) + 1.0] x1327 = SRAMBankedWrite(x1314,Vector(x3022),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1316 = SRAMBankedRead(x1257,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1317 = VecApply(x1316,0)
                          [2.0] x1319 = SRAMBankedRead(x1258,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1320 = VecApply(x1319,0)
                          [2.0] x1323 = SRAMBankedRead(x1259,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1324 = VecApply(x1323,0)
                          [8.0] x1321 = FixMul(x1320,x1320)
                          [14.0] x3021 = FixFMA(x1317,x1317,x1321)
                          [20.0] x3022 = FixFMA(x1324,x1324,x3021)
                          [21.0] x1327 = SRAMBankedWrite(x1314,Vector(x3022),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x1341 = UnitPipe(Set(b1255, b560),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1329, x1332, x1340, x1336), schedule Vector(x1329, x1330, x1332, x1333, x1334, x3023, x1336, x1337, x3024, x1340)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1329 = SRAMBankedRead(x1262,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1330 = VecApply(x1329,0)
                          x1332 = SRAMBankedRead(x1263,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1333 = VecApply(x1332,0)
                          x1334 = FixMul(x1333,x1333)
                          x3023 = FixFMA(x1330,x1330,x1334)
                          x1336 = SRAMBankedRead(x1264,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1337 = VecApply(x1336,0)
                          x3024 = FixFMA(x1337,x1337,x3023)
                          x1340 = SRAMBankedWrite(x1315,Vector(x3024),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1329
                        cur: x1329, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1329 = SRAMBankedRead(x1262,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1332
                        cur: x1332, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1332 = SRAMBankedRead(x1263,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1340
                        Computing fullDFS: x3024
                        Computing fullDFS: x3023
                        Computing fullDFS: x1330
                        [2.0 = max(2.0) + 0.0] x1330 = VecApply(x1329,0)
                        Computing fullDFS: x1334
                        Computing fullDFS: x1333
                        [2.0 = max(2.0) + 0.0] x1333 = VecApply(x1332,0)
                        [8.0 = max(2.0) + 6.0] x1334 = FixMul(x1333,x1333)
                        [14.0 = max(2.0, 8.0) + 6.0] x3023 = FixFMA(x1330,x1330,x1334)
                        Computing fullDFS: x1337
                        Computing fullDFS: x1336
                        cur: x1336, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1336 = SRAMBankedRead(x1264,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1337 = VecApply(x1336,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3024 = FixFMA(x1337,x1337,x3023)
                        [21.0 = max(20.0) + 1.0] x1340 = SRAMBankedWrite(x1315,Vector(x3024),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1329 = SRAMBankedRead(x1262,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1330 = VecApply(x1329,0)
                          [2.0] x1332 = SRAMBankedRead(x1263,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1333 = VecApply(x1332,0)
                          [2.0] x1336 = SRAMBankedRead(x1264,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1337 = VecApply(x1336,0)
                          [8.0] x1334 = FixMul(x1333,x1333)
                          [14.0] x3023 = FixFMA(x1330,x1330,x1334)
                          [20.0] x3024 = FixFMA(x1337,x1337,x3023)
                          [21.0] x1340 = SRAMBankedWrite(x1315,Vector(x3024),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x1367 = ParallelPipe(Set(b560),Block(Const(())))
                      x1357 = UnitPipe(Set(b1254, b560),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1349, x1355, x1356), schedule Vector(x1349, x1350, x1351, x1352, x1353, x1354, x1355, x1356)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1349 = SRAMBankedRead(x1314,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1350 = VecApply(x1349,0)
                          x1351 = FixLst(Const(0),x1350)
                          x1352 = FixLst(Const(1),x1350)
                          x1353 = And(x1351,x1352)
                          x1354 = Not(x1353)
                          x1355 = RegWrite(x1345,x1353,Set())
                          x1356 = RegWrite(x1347,x1354,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1349
                        cur: x1349, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1349 = SRAMBankedRead(x1314,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1355
                        Computing fullDFS: x1353
                        Computing fullDFS: x1351
                        Computing fullDFS: x1350
                        [2.0 = max(2.0) + 0.0] x1350 = VecApply(x1349,0)
                        [2.4 = max(2.0) + 0.4] x1351 = FixLst(Const(0),x1350)
                        Computing fullDFS: x1352
                        [2.4 = max(2.0) + 0.4] x1352 = FixLst(Const(1),x1350)
                        [2.6 = max(2.4, 2.4) + 0.2] x1353 = And(x1351,x1352)
                        [3.6 = max(2.6) + 1.0] x1355 = RegWrite(x1345,x1353,Set())
                        Computing fullDFS: x1356
                        Computing fullDFS: x1354
                        [2.8000000000000003 = max(2.6) + 0.2] x1354 = Not(x1353)
                        [3.8 = max(2.8) + 1.0] x1356 = RegWrite(x1347,x1354,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1349 = SRAMBankedRead(x1314,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1350 = VecApply(x1349,0)
                          [2.4] x1351 = FixLst(Const(0),x1350)
                          [2.4] x1352 = FixLst(Const(1),x1350)
                          [2.6] x1353 = And(x1351,x1352)
                          [2.8] x1354 = Not(x1353)
                          [3.6] x1355 = RegWrite(x1345,x1353,Set())
                          [3.8] x1356 = RegWrite(x1347,x1354,Set())
                      x1366 = UnitPipe(Set(b1255, b560),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1358, x1364, x1365), schedule Vector(x1358, x1359, x1360, x1361, x1362, x1363, x1364, x1365)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1358 = SRAMBankedRead(x1315,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1359 = VecApply(x1358,0)
                          x1360 = FixLst(Const(0),x1359)
                          x1361 = FixLst(Const(1),x1359)
                          x1362 = And(x1360,x1361)
                          x1363 = Not(x1362)
                          x1364 = RegWrite(x1346,x1362,Set())
                          x1365 = RegWrite(x1348,x1363,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1358
                        cur: x1358, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1358 = SRAMBankedRead(x1315,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1364
                        Computing fullDFS: x1362
                        Computing fullDFS: x1360
                        Computing fullDFS: x1359
                        [2.0 = max(2.0) + 0.0] x1359 = VecApply(x1358,0)
                        [2.4 = max(2.0) + 0.4] x1360 = FixLst(Const(0),x1359)
                        Computing fullDFS: x1361
                        [2.4 = max(2.0) + 0.4] x1361 = FixLst(Const(1),x1359)
                        [2.6 = max(2.4, 2.4) + 0.2] x1362 = And(x1360,x1361)
                        [3.6 = max(2.6) + 1.0] x1364 = RegWrite(x1346,x1362,Set())
                        Computing fullDFS: x1365
                        Computing fullDFS: x1363
                        [2.8000000000000003 = max(2.6) + 0.2] x1363 = Not(x1362)
                        [3.8 = max(2.8) + 1.0] x1365 = RegWrite(x1348,x1363,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1358 = SRAMBankedRead(x1315,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1359 = VecApply(x1358,0)
                          [2.4] x1360 = FixLst(Const(0),x1359)
                          [2.4] x1361 = FixLst(Const(1),x1359)
                          [2.6] x1362 = And(x1360,x1361)
                          [2.8] x1363 = Not(x1362)
                          [3.6] x1364 = RegWrite(x1346,x1362,Set())
                          [3.8] x1365 = RegWrite(x1348,x1363,Set())
                  x1385 = Switch(List(x2939, x2940),Block(x1384))
                    Working on pipeLatencies of result Vector(x1384, x1383, x1382, x1372, x1373, Const(90)), schedule Vector(x1383, x1384, x1372, x1373, x1374, x1375, x1376, x1377, x1378, x1379, x1380, x1381, x1382)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1383 = SwitchCase(Block(x1382))
                      x1384 = SwitchCase(Block(Const(90)))
                      x1372 = RegRead(x1345)
                      x1373 = SRAMBankedRead(x1314,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1372)),Vec[Fix[TRUE,_10,_22]])
                      x1374 = VecApply(x1373,0)
                      x1375 = FixDiv(Const(100),x1374)
                      x1376 = FixDiv(x1375,x1374)
                      x1377 = FixDiv(x1376,x1374)
                      x1378 = FixDiv(x1377,x1374)
                      x1379 = FixDiv(x1378,x1374)
                      x1380 = FixDiv(Const(10),x1374)
                      x1381 = FixDiv(x1380,x1374)
                      x1382 = FixSub(x1379,x1381)
                    Computing fullDFS: x1384
                    cur: x1384, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1384 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x1383
                    Computing fullDFS: x1372
                    cur: x1372, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1372 = RegRead(x1345)
                    Computing fullDFS: x1373
                    [2.0 = max(0.0) + 2.0] x1373 = SRAMBankedRead(x1314,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1372)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x1382
                    Computing fullDFS: x1379
                    Computing fullDFS: x1374
                    [2.0 = max(2.0) + 0.0] x1374 = VecApply(x1373,0)
                    Computing fullDFS: x1378
                    Computing fullDFS: x1377
                    Computing fullDFS: x1376
                    Computing fullDFS: x1375
                    [22.0 = max(2.0) + 20.0] x1375 = FixDiv(Const(100),x1374)
                    [42.0 = max(2.0, 22.0) + 20.0] x1376 = FixDiv(x1375,x1374)
                    [62.0 = max(2.0, 42.0) + 20.0] x1377 = FixDiv(x1376,x1374)
                    [82.0 = max(2.0, 62.0) + 20.0] x1378 = FixDiv(x1377,x1374)
                    [102.0 = max(2.0, 82.0) + 20.0] x1379 = FixDiv(x1378,x1374)
                    Computing fullDFS: x1381
                    Computing fullDFS: x1380
                    [22.0 = max(2.0) + 20.0] x1380 = FixDiv(Const(10),x1374)
                    [42.0 = max(2.0, 22.0) + 20.0] x1381 = FixDiv(x1380,x1374)
                    [103.0 = max(102.0, 42.0) + 1.0] x1382 = FixSub(x1379,x1381)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x1383 = SwitchCase(Block(x1382))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x1384 = SwitchCase(Block(Const(90)))
                      [0.0] x1372 = RegRead(x1345)
                      [2.0] x1373 = SRAMBankedRead(x1314,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1372)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1374 = VecApply(x1373,0)
                      [22.0] x1375 = FixDiv(Const(100),x1374)
                      [22.0] x1380 = FixDiv(Const(10),x1374)
                      [42.0] x1376 = FixDiv(x1375,x1374)
                      [42.0] x1381 = FixDiv(x1380,x1374)
                      [62.0] x1377 = FixDiv(x1376,x1374)
                      [82.0] x1378 = FixDiv(x1377,x1374)
                      [102.0] x1379 = FixDiv(x1378,x1374)
                      [103.0] x1383 = SwitchCase(Block(x1382))
                      [103.0] x1382 = FixSub(x1379,x1381)
                  x1399 = Switch(List(x2941, x2942),Block(x1398))
                    Working on pipeLatencies of result Vector(x1398, x1397, x1396, x1386, x1387, Const(90)), schedule Vector(x1397, x1398, x1386, x1387, x1388, x1389, x1390, x1391, x1392, x1393, x1394, x1395, x1396)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1397 = SwitchCase(Block(x1396))
                      x1398 = SwitchCase(Block(Const(90)))
                      x1386 = RegRead(x1346)
                      x1387 = SRAMBankedRead(x1315,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1386)),Vec[Fix[TRUE,_10,_22]])
                      x1388 = VecApply(x1387,0)
                      x1389 = FixDiv(Const(100),x1388)
                      x1390 = FixDiv(x1389,x1388)
                      x1391 = FixDiv(x1390,x1388)
                      x1392 = FixDiv(x1391,x1388)
                      x1393 = FixDiv(x1392,x1388)
                      x1394 = FixDiv(Const(10),x1388)
                      x1395 = FixDiv(x1394,x1388)
                      x1396 = FixSub(x1393,x1395)
                    Computing fullDFS: x1398
                    cur: x1398, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1398 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x1397
                    Computing fullDFS: x1386
                    cur: x1386, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1386 = RegRead(x1346)
                    Computing fullDFS: x1387
                    [2.0 = max(0.0) + 2.0] x1387 = SRAMBankedRead(x1315,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1386)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x1396
                    Computing fullDFS: x1393
                    Computing fullDFS: x1388
                    [2.0 = max(2.0) + 0.0] x1388 = VecApply(x1387,0)
                    Computing fullDFS: x1392
                    Computing fullDFS: x1391
                    Computing fullDFS: x1390
                    Computing fullDFS: x1389
                    [22.0 = max(2.0) + 20.0] x1389 = FixDiv(Const(100),x1388)
                    [42.0 = max(2.0, 22.0) + 20.0] x1390 = FixDiv(x1389,x1388)
                    [62.0 = max(2.0, 42.0) + 20.0] x1391 = FixDiv(x1390,x1388)
                    [82.0 = max(2.0, 62.0) + 20.0] x1392 = FixDiv(x1391,x1388)
                    [102.0 = max(2.0, 82.0) + 20.0] x1393 = FixDiv(x1392,x1388)
                    Computing fullDFS: x1395
                    Computing fullDFS: x1394
                    [22.0 = max(2.0) + 20.0] x1394 = FixDiv(Const(10),x1388)
                    [42.0 = max(2.0, 22.0) + 20.0] x1395 = FixDiv(x1394,x1388)
                    [103.0 = max(102.0, 42.0) + 1.0] x1396 = FixSub(x1393,x1395)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x1397 = SwitchCase(Block(x1396))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x1398 = SwitchCase(Block(Const(90)))
                      [0.0] x1386 = RegRead(x1346)
                      [2.0] x1387 = SRAMBankedRead(x1315,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1386)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1388 = VecApply(x1387,0)
                      [22.0] x1389 = FixDiv(Const(100),x1388)
                      [22.0] x1394 = FixDiv(Const(10),x1388)
                      [42.0] x1390 = FixDiv(x1389,x1388)
                      [42.0] x1395 = FixDiv(x1394,x1388)
                      [62.0] x1391 = FixDiv(x1390,x1388)
                      [82.0] x1392 = FixDiv(x1391,x1388)
                      [102.0] x1393 = FixDiv(x1392,x1388)
                      [103.0] x1397 = SwitchCase(Block(x1396))
                      [103.0] x1396 = FixSub(x1393,x1395)
                  x1404 = ParallelPipe(Set(b560),Block(Const(())))
                      x1401 = UnitPipe(Set(b1254, b560),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1400), schedule Vector(x1400)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1400 = SRAMBankedWrite(x1343,Vector(x1385),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1400
                        cur: x1400, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x1400 = SRAMBankedWrite(x1343,Vector(x1385),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x1400 = SRAMBankedWrite(x1343,Vector(x1385),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x1403 = UnitPipe(Set(b1255, b560),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1402), schedule Vector(x1402)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1402 = SRAMBankedWrite(x1344,Vector(x1399),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1402
                        cur: x1402, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x1402 = SRAMBankedWrite(x1344,Vector(x1399),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x1402 = SRAMBankedWrite(x1344,Vector(x1399),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x1437 = ParallelPipe(Set(b560),Block(Const(())))
                      x1422 = UnrolledForeach(Set(b1254, b560),x1407,Block(Const(())),List(List(b1409)),List(List(b1410)),None)
                        Working on pipeLatencies of result Vector(x1411, Const(()), x1418, x1414, x1419, x1420, x1421, x1417), schedule Vector(x1411, x1412, x1413, x1414, x1415, x1416, x1417, x1418, x1419, x1420, x1421)
                        Memories with both reads and writes in this scope: Set(x1260)
                        NonConflictSets(x1411, x1417): Set()
                        NonConflictSets(x1411, x1417): Set()
                        Found Cycle: x1411, x1417
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x1417 = SRAMBankedWrite(x1260,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          x1411 = SRAMBankedRead(x1260,Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                            x1411 = SRAMBankedRead(x1260,Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                            x1412 = VecApply(x1411,0)
                            x1413 = FixMul(x1412,Const(0.099999904632568359375))
                            x1416 = FixMul(x1413,x1415)
                            x1417 = SRAMBankedWrite(x1260,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                        Done finding cycles: Vector(AccumTriple(x1260,x1411,x1417)), Map(x1411 -> List(AccumTriple(x1260,x1411,x1417)), x1416 -> List(AccumTriple(x1260,x1411,x1417)), x1413 -> List(AccumTriple(x1260,x1411,x1417)), x1412 -> List(AccumTriple(x1260,x1411,x1417)), x1417 -> List(AccumTriple(x1260,x1411,x1417)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1411 = SRAMBankedRead(x1260,Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                          x1412 = VecApply(x1411,0)
                          x1413 = FixMul(x1412,Const(0.099999904632568359375))
                          x1414 = SRAMBankedRead(x1343,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                          x1415 = VecApply(x1414,0)
                          x1416 = FixMul(x1413,x1415)
                          x1417 = SRAMBankedWrite(x1260,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          x1418 = SRAMBankedWrite(x1259,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          x1419 = SRAMBankedWrite(x1258,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          x1420 = SRAMBankedWrite(x1257,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          x1421 = SRAMBankedWrite(x1261,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                        Computing fullDFS: x1411
                        cur: x1411, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x1260,x1411,x1417))
                        [2.0 = max(0) + 2.0] x1411 = SRAMBankedRead(x1260,Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1418
                        Computing fullDFS: x1416
                        Computing fullDFS: x1413
                        Computing fullDFS: x1412
                        cycle deps of x1412: Vector(x1411, x1412)
                        [2.0 = max(2.0) + 0.0] x1412 = VecApply(x1411,0)[cycle]
                        cycle deps of x1413: Vector(x1411, x1412, x1413)
                        [8.0 = max(2.0) + 6.0] x1413 = FixMul(x1412,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x1415
                        Computing fullDFS: x1414
                        cur: x1414, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1414 = SRAMBankedRead(x1343,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1415 = VecApply(x1414,0)
                        cycle deps of x1416: Vector(x1411, x1412, x1413, x1416)
                        [14.0 = max(8.0, 2.0) + 6.0] x1416 = FixMul(x1413,x1415)[cycle]
                        cycle deps of x1418: Vector(x1411, x1412, x1413, x1416, x1418)
                        [15.0 = max(14.0) + 1.0] x1418 = SRAMBankedWrite(x1259,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                        Computing fullDFS: x1419
                        cycle deps of x1419: Vector(x1411, x1412, x1413, x1416, x1419)
                        [15.0 = max(14.0) + 1.0] x1419 = SRAMBankedWrite(x1258,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                        Computing fullDFS: x1420
                        cycle deps of x1420: Vector(x1411, x1412, x1413, x1416, x1420)
                        [15.0 = max(14.0) + 1.0] x1420 = SRAMBankedWrite(x1257,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                        Computing fullDFS: x1421
                        cycle deps of x1421: Vector(x1411, x1412, x1413, x1416, x1421)
                        [15.0 = max(14.0) + 1.0] x1421 = SRAMBankedWrite(x1261,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                        Computing fullDFS: x1417
                        cycle deps of x1417: Vector(x1411, x1411, x1412, x1413, x1416, x1417)
                        [15.0 = max(2.0, 14.0) + 1.0] x1417 = SRAMBankedWrite(x1260,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))[cycle]
                        Cycle #0: write: x1417, cycle: x1411, x1411, x1412, x1413, x1416, x1417
                        x1416 = FixMul(x1413,x1415) [14.0]
                          [14.0 = 15.0 - 1.0] x1417 = SRAMBankedWrite(x1260,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          [14.0 = 15.0 - 1.0] x1418 = SRAMBankedWrite(x1259,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          [14.0 = 15.0 - 1.0] x1419 = SRAMBankedWrite(x1258,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          [14.0 = 15.0 - 1.0] x1420 = SRAMBankedWrite(x1257,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          [14.0 = 15.0 - 1.0] x1421 = SRAMBankedWrite(x1261,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          [14.0]
                        x1413 = FixMul(x1412,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x1416 = FixMul(x1413,x1415)
                          [8.0]
                        x1412 = VecApply(x1411,0) [2.0]
                          [2.0 = 8.0 - 6.0] x1413 = FixMul(x1412,Const(0.099999904632568359375))
                          [2.0]
                        x1411 = SRAMBankedRead(x1260,Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1412 = VecApply(x1411,0)
                          [2.0]
                        x1411 = SRAMBankedRead(x1260,Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1412 = VecApply(x1411,0)
                          [2.0]
                        Cycles: Map(x1420 -> Vector(x1411, x1412, x1413, x1416, x1420), x1411 -> List(x1411), x1416 -> Vector(x1411, x1412, x1413, x1416), x1419 -> Vector(x1411, x1412, x1413, x1416, x1419), x1413 -> Vector(x1411, x1412, x1413), x1421 -> Vector(x1411, x1412, x1413, x1416, x1421), x1412 -> Vector(x1411, x1412), x1418 -> Vector(x1411, x1412, x1413, x1416, x1418), x1417 -> Vector(x1411, x1411, x1412, x1413, x1416, x1417))
                        pseudo cycles for x1260:
                        Multiplexed accesses for memory x1260: 
                          x1411 = SRAMBankedRead(x1260,Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                        Access: x1411 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1411 = SRAMBankedRead(x1260,Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x1260: 
                          x1417 = SRAMBankedWrite(x1260,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                        Access: x1417 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1417 = SRAMBankedWrite(x1260,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x1411),x1260,1.0)
                        AAACycle(Vector(x1417),x1260,1.0)
                        WARCycle(x1411,x1417,x1260,Vector(x1411, x1411, x1412, x1413, x1416, x1417),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x1411 = SRAMBankedRead(x1260,Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1412 = VecApply(x1411,0)
                          [2.0] x1414 = SRAMBankedRead(x1343,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1415 = VecApply(x1414,0)
                          [8.0] x1413 = FixMul(x1412,Const(0.099999904632568359375))
                          [14.0] x1416 = FixMul(x1413,x1415)
                          [15.0] x1417 = SRAMBankedWrite(x1260,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          [15.0] x1418 = SRAMBankedWrite(x1259,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          [15.0] x1419 = SRAMBankedWrite(x1258,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          [15.0] x1420 = SRAMBankedWrite(x1257,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                          [15.0] x1421 = SRAMBankedWrite(x1261,Vector(x1416),Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)))
                        Cycle #0 on x1260: 
                          x1260 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                      x1436 = UnrolledForeach(Set(b1255, b560),x1408,Block(Const(())),List(List(b1423)),List(List(b1424)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1433, x1425, x1434, x1428, x1435, x1432, x1431), schedule Vector(x1425, x1426, x1427, x1428, x1429, x1430, x1431, x1432, x1433, x1434, x1435)
                        Memories with both reads and writes in this scope: Set(x1265)
                        NonConflictSets(x1425, x1431): Set()
                        NonConflictSets(x1425, x1431): Set()
                        Found Cycle: x1425, x1431
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x1431 = SRAMBankedWrite(x1265,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          x1425 = SRAMBankedRead(x1265,Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                            x1425 = SRAMBankedRead(x1265,Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                            x1426 = VecApply(x1425,0)
                            x1427 = FixMul(x1426,Const(0.099999904632568359375))
                            x1430 = FixMul(x1427,x1429)
                            x1431 = SRAMBankedWrite(x1265,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                        Done finding cycles: Vector(AccumTriple(x1265,x1425,x1431)), Map(x1425 -> List(AccumTriple(x1265,x1425,x1431)), x1431 -> List(AccumTriple(x1265,x1425,x1431)), x1430 -> List(AccumTriple(x1265,x1425,x1431)), x1427 -> List(AccumTriple(x1265,x1425,x1431)), x1426 -> List(AccumTriple(x1265,x1425,x1431)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1425 = SRAMBankedRead(x1265,Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                          x1426 = VecApply(x1425,0)
                          x1427 = FixMul(x1426,Const(0.099999904632568359375))
                          x1428 = SRAMBankedRead(x1344,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                          x1429 = VecApply(x1428,0)
                          x1430 = FixMul(x1427,x1429)
                          x1431 = SRAMBankedWrite(x1265,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          x1432 = SRAMBankedWrite(x1264,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          x1433 = SRAMBankedWrite(x1263,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          x1434 = SRAMBankedWrite(x1266,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          x1435 = SRAMBankedWrite(x1262,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1433
                        Computing fullDFS: x1430
                        Computing fullDFS: x1427
                        Computing fullDFS: x1426
                        Computing fullDFS: x1425
                        cur: x1425, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x1265,x1425,x1431))
                        [2.0 = max(0) + 2.0] x1425 = SRAMBankedRead(x1265,Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        cycle deps of x1426: Vector(x1425, x1426)
                        [2.0 = max(2.0) + 0.0] x1426 = VecApply(x1425,0)[cycle]
                        cycle deps of x1427: Vector(x1425, x1426, x1427)
                        [8.0 = max(2.0) + 6.0] x1427 = FixMul(x1426,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x1429
                        Computing fullDFS: x1428
                        cur: x1428, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1428 = SRAMBankedRead(x1344,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1429 = VecApply(x1428,0)
                        cycle deps of x1430: Vector(x1425, x1426, x1427, x1430)
                        [14.0 = max(8.0, 2.0) + 6.0] x1430 = FixMul(x1427,x1429)[cycle]
                        cycle deps of x1433: Vector(x1425, x1426, x1427, x1430, x1433)
                        [15.0 = max(14.0) + 1.0] x1433 = SRAMBankedWrite(x1263,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                        Computing fullDFS: x1434
                        cycle deps of x1434: Vector(x1425, x1426, x1427, x1430, x1434)
                        [15.0 = max(14.0) + 1.0] x1434 = SRAMBankedWrite(x1266,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                        Computing fullDFS: x1435
                        cycle deps of x1435: Vector(x1425, x1426, x1427, x1430, x1435)
                        [15.0 = max(14.0) + 1.0] x1435 = SRAMBankedWrite(x1262,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                        Computing fullDFS: x1432
                        cycle deps of x1432: Vector(x1425, x1426, x1427, x1430, x1432)
                        [15.0 = max(14.0) + 1.0] x1432 = SRAMBankedWrite(x1264,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                        Computing fullDFS: x1431
                        cycle deps of x1431: Vector(x1425, x1425, x1426, x1427, x1430, x1431)
                        [15.0 = max(2.0, 14.0) + 1.0] x1431 = SRAMBankedWrite(x1265,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))[cycle]
                        Cycle #0: write: x1431, cycle: x1425, x1425, x1426, x1427, x1430, x1431
                        x1430 = FixMul(x1427,x1429) [14.0]
                          [14.0 = 15.0 - 1.0] x1431 = SRAMBankedWrite(x1265,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          [14.0 = 15.0 - 1.0] x1432 = SRAMBankedWrite(x1264,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          [14.0 = 15.0 - 1.0] x1433 = SRAMBankedWrite(x1263,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          [14.0 = 15.0 - 1.0] x1434 = SRAMBankedWrite(x1266,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          [14.0 = 15.0 - 1.0] x1435 = SRAMBankedWrite(x1262,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          [14.0]
                        x1427 = FixMul(x1426,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x1430 = FixMul(x1427,x1429)
                          [8.0]
                        x1426 = VecApply(x1425,0) [2.0]
                          [2.0 = 8.0 - 6.0] x1427 = FixMul(x1426,Const(0.099999904632568359375))
                          [2.0]
                        x1425 = SRAMBankedRead(x1265,Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1426 = VecApply(x1425,0)
                          [2.0]
                        x1425 = SRAMBankedRead(x1265,Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1426 = VecApply(x1425,0)
                          [2.0]
                        Cycles: Map(x1432 -> Vector(x1425, x1426, x1427, x1430, x1432), x1434 -> Vector(x1425, x1426, x1427, x1430, x1434), x1425 -> List(x1425), x1431 -> Vector(x1425, x1425, x1426, x1427, x1430, x1431), x1430 -> Vector(x1425, x1426, x1427, x1430), x1433 -> Vector(x1425, x1426, x1427, x1430, x1433), x1427 -> Vector(x1425, x1426, x1427), x1435 -> Vector(x1425, x1426, x1427, x1430, x1435), x1426 -> Vector(x1425, x1426))
                        pseudo cycles for x1265:
                        Multiplexed accesses for memory x1265: 
                          x1425 = SRAMBankedRead(x1265,Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                        Access: x1425 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1425 = SRAMBankedRead(x1265,Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x1265: 
                          x1431 = SRAMBankedWrite(x1265,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                        Access: x1431 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1431 = SRAMBankedWrite(x1265,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x1425),x1265,1.0)
                        AAACycle(Vector(x1431),x1265,1.0)
                        WARCycle(x1425,x1431,x1265,Vector(x1425, x1425, x1426, x1427, x1430, x1431),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x1425 = SRAMBankedRead(x1265,Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1426 = VecApply(x1425,0)
                          [2.0] x1428 = SRAMBankedRead(x1344,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1429 = VecApply(x1428,0)
                          [8.0] x1427 = FixMul(x1426,Const(0.099999904632568359375))
                          [14.0] x1430 = FixMul(x1427,x1429)
                          [15.0] x1431 = SRAMBankedWrite(x1265,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          [15.0] x1432 = SRAMBankedWrite(x1264,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          [15.0] x1433 = SRAMBankedWrite(x1263,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          [15.0] x1434 = SRAMBankedWrite(x1266,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                          [15.0] x1435 = SRAMBankedWrite(x1262,Vector(x1430),Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)))
                        Cycle #0 on x1265: 
                          x1265 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                  x1457 = UnrolledForeach(Set(),x620,Block(Const(())),Vector(List(b1253)),Vector(List(b1256)),None)
                    Working on pipeLatencies of result Vector(Const(()), x1455, x1438, x1456, x1440, x1442), schedule Vector(x1438, x1439, x1440, x1441, x1442, x1443, x1444, x1446, x1448, x1449, x1450, x1452, x1453, x1454, x1455, x1456)
                    Memories with both reads and writes in this scope: Set(x573)
                    NonConflictSets(x1442, x1455): Set()
                    NonConflictSets(x1442, x1455): Set()
                    Found Cycle: x1442, x1455
                    Exclusions: Set() Set() 
                    Found cycle between: 
                      x1455 = SRAMBankedWrite(x573,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)))
                      x1442 = SRAMBankedRead(x573,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
                        x1442 = SRAMBankedRead(x573,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
                        x1443 = VecApply(x1442,0)
                        x1453 = FixAdd(x1450,x1443)
                        x1454 = Mux(x1452,x1450,x1453)
                        x1455 = SRAMBankedWrite(x573,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)))
                    Done finding cycles: Vector(AccumTriple(x573,x1442,x1455)), Map(x1443 -> List(AccumTriple(x573,x1442,x1455)), x1455 -> List(AccumTriple(x573,x1442,x1455)), x1454 -> List(AccumTriple(x573,x1442,x1455)), x1442 -> List(AccumTriple(x573,x1442,x1455)), x1453 -> List(AccumTriple(x573,x1442,x1455)))
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1438 = SRAMBankedRead(x1261,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
                      x1439 = VecApply(x1438,0)
                      x1440 = SRAMBankedRead(x1266,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
                      x1441 = VecApply(x1440,0)
                      x1442 = SRAMBankedRead(x573,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
                      x1443 = VecApply(x1442,0)
                      x1444 = And(b1256,b560)
                      x1446 = And(b1255,b560)
                      x1448 = And(x1446,x1444)
                      x1449 = FixAdd(x1439,x1441)
                      x1450 = Mux(x1448,x1449,x1439)
                      x1452 = FixEql(b1251,Const(0))
                      x1453 = FixAdd(x1450,x1443)
                      x1454 = Mux(x1452,x1450,x1453)
                      x1455 = SRAMBankedWrite(x573,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)))
                      x1456 = SRAMBankedWrite(x574,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)))
                    Computing fullDFS: Const(())
                    Computing fullDFS: x1455
                    Computing fullDFS: x1442
                    cur: x1442, inReduce: true, latency: 2.0
                    Known Cycles: List(AccumTriple(x573,x1442,x1455))
                    [2.0 = max(0) + 2.0] x1442 = SRAMBankedRead(x573,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])[cycle]
                    Computing fullDFS: x1454
                    Computing fullDFS: x1450
                    Computing fullDFS: x1439
                    Computing fullDFS: x1438
                    cur: x1438, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x1438 = SRAMBankedRead(x1261,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x1439 = VecApply(x1438,0)
                    Computing fullDFS: x1448
                    Computing fullDFS: x1444
                    cur: x1444, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1444 = And(b1256,b560)
                    Computing fullDFS: x1446
                    cur: x1446, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1446 = And(b1255,b560)
                    [0.4 = max(0.2, 0.2) + 0.2] x1448 = And(x1446,x1444)
                    Computing fullDFS: x1449
                    Computing fullDFS: x1441
                    Computing fullDFS: x1440
                    cur: x1440, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x1440 = SRAMBankedRead(x1266,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x1441 = VecApply(x1440,0)
                    [3.0 = max(2.0, 2.0) + 1.0] x1449 = FixAdd(x1439,x1441)
                    [3.5 = max(2.0, 0.4, 3.0) + 0.5] x1450 = Mux(x1448,x1449,x1439)
                    Computing fullDFS: x1452
                    cur: x1452, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1452 = FixEql(b1251,Const(0))
                    Computing fullDFS: x1453
                    Computing fullDFS: x1443
                    cycle deps of x1443: Vector(x1442, x1443)
                    [2.0 = max(2.0) + 0.0] x1443 = VecApply(x1442,0)[cycle]
                    cycle deps of x1453: Vector(x1442, x1443, x1453)
                    [4.5 = max(2.0, 3.5) + 1.0] x1453 = FixAdd(x1450,x1443)[cycle]
                    cycle deps of x1454: Vector(x1442, x1443, x1453, x1454)
                    [5.0 = max(3.5, 0.2, 4.5) + 0.5] x1454 = Mux(x1452,x1450,x1453)[cycle]
                    cycle deps of x1455: Vector(x1442, x1442, x1443, x1453, x1454, x1455)
                    [6.0 = max(2.0, 5.0) + 1.0] x1455 = SRAMBankedWrite(x573,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)))[cycle]
                    Computing fullDFS: x1456
                    cycle deps of x1456: Vector(x1442, x1443, x1453, x1454, x1456)
                    [6.0 = max(5.0) + 1.0] x1456 = SRAMBankedWrite(x574,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)))
                    Cycle #0: write: x1455, cycle: x1442, x1442, x1443, x1453, x1454, x1455
                    x1454 = Mux(x1452,x1450,x1453) [5.0]
                      [5.0 = 6.0 - 1.0] x1455 = SRAMBankedWrite(x573,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)))
                      [5.0 = 6.0 - 1.0] x1456 = SRAMBankedWrite(x574,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)))
                      [5.0]
                    x1453 = FixAdd(x1450,x1443) [4.5]
                      [4.5 = 5.0 - 0.5] x1454 = Mux(x1452,x1450,x1453)
                      [4.5]
                    x1443 = VecApply(x1442,0) [2.0]
                      [3.5 = 4.5 - 1.0] x1453 = FixAdd(x1450,x1443)
                      [3.5]
                    x1442 = SRAMBankedRead(x573,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                      [3.5 = 3.5 - 0.0] x1443 = VecApply(x1442,0)
                      [3.5]
                    x1442 = SRAMBankedRead(x573,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]]) [3.5]
                      [3.5 = 3.5 - 0.0] x1443 = VecApply(x1442,0)
                      [3.5]
                    Cycles: Map(x1456 -> Vector(x1442, x1443, x1453, x1454, x1456), x1443 -> Vector(x1442, x1443), x1455 -> Vector(x1442, x1442, x1443, x1453, x1454, x1455), x1454 -> Vector(x1442, x1443, x1453, x1454), x1442 -> List(x1442), x1453 -> Vector(x1442, x1443, x1453))
                    pseudo cycles for x573:
                    Multiplexed accesses for memory x573: 
                      x1442 = SRAMBankedRead(x573,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
                    Access: x1442 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x1442 = SRAMBankedRead(x573,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 3.5 due to muxing.
                    Multiplexed accesses for memory x573: 
                      x1455 = SRAMBankedWrite(x573,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)))
                    Access: x1455 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x1455 = SRAMBankedWrite(x573,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560))) by 0.0 to 6.0 due to muxing.
                    Found cycles: 
                    AAACycle(Vector(x1442),x573,1.0)
                    AAACycle(Vector(x1455),x573,1.0)
                    WARCycle(x1442,x1455,x573,Vector(x1442, x1442, x1443, x1453, x1454, x1455),5.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                      Schedule after pipeLatencies calculation:
                      [0.2] x1444 = And(b1256,b560)
                      [0.2] x1446 = And(b1255,b560)
                      [0.2] x1452 = FixEql(b1251,Const(0))
                      [0.4] x1448 = And(x1446,x1444)
                      [2.0] x1438 = SRAMBankedRead(x1261,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1439 = VecApply(x1438,0)
                      [2.0] x1440 = SRAMBankedRead(x1266,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1441 = VecApply(x1440,0)
                      [3.0] x1449 = FixAdd(x1439,x1441)
                      [3.5] x1442 = SRAMBankedRead(x573,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]])
                      [3.5] x1443 = VecApply(x1442,0)
                      [3.5] x1450 = Mux(x1448,x1449,x1439)
                      [4.5] x1453 = FixAdd(x1450,x1443)
                      [5.0] x1454 = Mux(x1452,x1450,x1453)
                      [6.0] x1455 = SRAMBankedWrite(x573,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)))
                      [6.0] x1456 = SRAMBankedWrite(x574,Vector(x1454),Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)))
                    Cycle #0 on x573: 
                      x573 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [accum_0]
                      disjoint:     true
                      no visible intermediates:
                        closed cycle:     false
                        no intermediates: true
                        is local mem:     true
                        number of writers:  1
                        outer reduce:     false
                        accum type:       Fold (if reduce, overrides no intermediates)
              x1666 = UnrolledReduce(Set(b561),x601,Block((x575) => Const(())),List(List(b1459, b1460)),List(List(b1462, b1463)),None)
                  x1521 = ParallelPipe(Set(b561),Block(Const(())))
                      x1499 = UnrolledForeach(Set(b1462, b561),x1477,Block(Const(())),List(List(b1479)),List(List(b1480)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1497, x1494, x1498, x1496, x1485, x1491, x1495), schedule Vector(x1482, x3025, x3026, x1484, x1485, x1486, x1488, x3027, x3028, x1490, x1491, x1492, x1493, x1494, x1495, x1496, x1497, x1498)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1482 = FixDiv(b551,Const(10))
                          x3025 = FixSLA(x1482,Const(1))
                          x3026 = FixAdd(x3025,x1482)
                          x1484 = FixAdd(x3026,b1479)
                          x1485 = SRAMBankedRead(x471,Vector(List(Const(4), Const(0))),Vector(x1484),Vector(Set(b1480, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                          x1486 = VecApply(x1485,0)
                          x1488 = FixDivSRA(b1459,Const(1))
                          x3027 = FixSLA(x1488,Const(1))
                          x3028 = FixAdd(x3027,x1488)
                          x1490 = FixAdd(x3028,b1479)
                          x1491 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1490),Vector(Set(b1480, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                          x1492 = VecApply(x1491,0)
                          x1493 = FixSub(x1486,x1492)
                          x1494 = SRAMBankedWrite(x1469,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                          x1495 = SRAMBankedWrite(x1465,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                          x1496 = SRAMBankedWrite(x1466,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                          x1497 = SRAMBankedWrite(x1467,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                          x1498 = SRAMBankedWrite(x1468,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1497
                        Computing fullDFS: x1493
                        Computing fullDFS: x1486
                        Computing fullDFS: x1485
                        Computing fullDFS: x1484
                        Computing fullDFS: x3026
                        Computing fullDFS: x1482
                        cur: x1482, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x1482 = FixDiv(b551,Const(10))
                        Computing fullDFS: x3025
                        [20.2 = max(20.0) + 0.2] x3025 = FixSLA(x1482,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3026 = FixAdd(x3025,x1482)
                        [22.2 = max(21.2) + 1.0] x1484 = FixAdd(x3026,b1479)
                        [24.2 = max(22.2) + 2.0] x1485 = SRAMBankedRead(x471,Vector(List(Const(4), Const(0))),Vector(x1484),Vector(Set(b1480, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x1486 = VecApply(x1485,0)
                        Computing fullDFS: x1492
                        Computing fullDFS: x1491
                        Computing fullDFS: x1490
                        Computing fullDFS: x3028
                        Computing fullDFS: x1488
                        cur: x1488, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x1488 = FixDivSRA(b1459,Const(1))
                        Computing fullDFS: x3027
                        [0.4 = max(0.2) + 0.2] x3027 = FixSLA(x1488,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3028 = FixAdd(x3027,x1488)
                        [2.4 = max(1.4) + 1.0] x1490 = FixAdd(x3028,b1479)
                        [4.4 = max(2.4) + 2.0] x1491 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1490),Vector(Set(b1480, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x1492 = VecApply(x1491,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x1493 = FixSub(x1486,x1492)
                        [26.2 = max(25.2) + 1.0] x1497 = SRAMBankedWrite(x1467,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                        Computing fullDFS: x1494
                        [26.2 = max(25.2) + 1.0] x1494 = SRAMBankedWrite(x1469,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                        Computing fullDFS: x1498
                        [26.2 = max(25.2) + 1.0] x1498 = SRAMBankedWrite(x1468,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                        Computing fullDFS: x1496
                        [26.2 = max(25.2) + 1.0] x1496 = SRAMBankedWrite(x1466,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                        Computing fullDFS: x1495
                        [26.2 = max(25.2) + 1.0] x1495 = SRAMBankedWrite(x1465,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x1488 = FixDivSRA(b1459,Const(1))
                          [0.4] x3027 = FixSLA(x1488,Const(1))
                          [1.4] x3028 = FixAdd(x3027,x1488)
                          [2.4] x1490 = FixAdd(x3028,b1479)
                          [4.4] x1491 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1490),Vector(Set(b1480, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x1492 = VecApply(x1491,0)
                          [20.0] x1482 = FixDiv(b551,Const(10))
                          [20.2] x3025 = FixSLA(x1482,Const(1))
                          [21.2] x3026 = FixAdd(x3025,x1482)
                          [22.2] x1484 = FixAdd(x3026,b1479)
                          [24.2] x1485 = SRAMBankedRead(x471,Vector(List(Const(4), Const(0))),Vector(x1484),Vector(Set(b1480, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x1486 = VecApply(x1485,0)
                          [25.2] x1493 = FixSub(x1486,x1492)
                          [26.2] x1494 = SRAMBankedWrite(x1469,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                          [26.2] x1495 = SRAMBankedWrite(x1465,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                          [26.2] x1496 = SRAMBankedWrite(x1466,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                          [26.2] x1497 = SRAMBankedWrite(x1467,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                          [26.2] x1498 = SRAMBankedWrite(x1468,Vector(x1493),Vector(List(Const(0))),Vector(b1479),Vector(Set(b1480, b1462, b561)))
                      x1520 = UnrolledForeach(Set(b1463, b561),x1478,Block(Const(())),List(List(b1500)),List(List(b1501)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1518, x1519, x1515, x1516, x1506, x1517, x1512), schedule Vector(x1503, x3029, x3030, x1505, x1506, x1507, x1509, x3031, x3032, x1511, x1512, x1513, x1514, x1515, x1516, x1517, x1518, x1519)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1503 = FixDiv(b551,Const(10))
                          x3029 = FixSLA(x1503,Const(1))
                          x3030 = FixAdd(x3029,x1503)
                          x1505 = FixAdd(x3030,b1500)
                          x1506 = SRAMBankedRead(x471,Vector(List(Const(4), Const(0))),Vector(x1505),Vector(Set(b1501, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                          x1507 = VecApply(x1506,0)
                          x1509 = FixDivSRA(b1460,Const(1))
                          x3031 = FixSLA(x1509,Const(1))
                          x3032 = FixAdd(x3031,x1509)
                          x1511 = FixAdd(x3032,b1500)
                          x1512 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1511),Vector(Set(b1501, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                          x1513 = VecApply(x1512,0)
                          x1514 = FixSub(x1507,x1513)
                          x1515 = SRAMBankedWrite(x1470,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                          x1516 = SRAMBankedWrite(x1471,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                          x1517 = SRAMBankedWrite(x1474,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                          x1518 = SRAMBankedWrite(x1472,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                          x1519 = SRAMBankedWrite(x1473,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1518
                        Computing fullDFS: x1514
                        Computing fullDFS: x1507
                        Computing fullDFS: x1506
                        Computing fullDFS: x1505
                        Computing fullDFS: x3030
                        Computing fullDFS: x1503
                        cur: x1503, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x1503 = FixDiv(b551,Const(10))
                        Computing fullDFS: x3029
                        [20.2 = max(20.0) + 0.2] x3029 = FixSLA(x1503,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3030 = FixAdd(x3029,x1503)
                        [22.2 = max(21.2) + 1.0] x1505 = FixAdd(x3030,b1500)
                        [24.2 = max(22.2) + 2.0] x1506 = SRAMBankedRead(x471,Vector(List(Const(4), Const(0))),Vector(x1505),Vector(Set(b1501, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x1507 = VecApply(x1506,0)
                        Computing fullDFS: x1513
                        Computing fullDFS: x1512
                        Computing fullDFS: x1511
                        Computing fullDFS: x3032
                        Computing fullDFS: x1509
                        cur: x1509, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x1509 = FixDivSRA(b1460,Const(1))
                        Computing fullDFS: x3031
                        [0.4 = max(0.2) + 0.2] x3031 = FixSLA(x1509,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3032 = FixAdd(x3031,x1509)
                        [2.4 = max(1.4) + 1.0] x1511 = FixAdd(x3032,b1500)
                        [4.4 = max(2.4) + 2.0] x1512 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1511),Vector(Set(b1501, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x1513 = VecApply(x1512,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x1514 = FixSub(x1507,x1513)
                        [26.2 = max(25.2) + 1.0] x1518 = SRAMBankedWrite(x1472,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                        Computing fullDFS: x1519
                        [26.2 = max(25.2) + 1.0] x1519 = SRAMBankedWrite(x1473,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                        Computing fullDFS: x1515
                        [26.2 = max(25.2) + 1.0] x1515 = SRAMBankedWrite(x1470,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                        Computing fullDFS: x1516
                        [26.2 = max(25.2) + 1.0] x1516 = SRAMBankedWrite(x1471,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                        Computing fullDFS: x1517
                        [26.2 = max(25.2) + 1.0] x1517 = SRAMBankedWrite(x1474,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x1509 = FixDivSRA(b1460,Const(1))
                          [0.4] x3031 = FixSLA(x1509,Const(1))
                          [1.4] x3032 = FixAdd(x3031,x1509)
                          [2.4] x1511 = FixAdd(x3032,b1500)
                          [4.4] x1512 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1511),Vector(Set(b1501, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x1513 = VecApply(x1512,0)
                          [20.0] x1503 = FixDiv(b551,Const(10))
                          [20.2] x3029 = FixSLA(x1503,Const(1))
                          [21.2] x3030 = FixAdd(x3029,x1503)
                          [22.2] x1505 = FixAdd(x3030,b1500)
                          [24.2] x1506 = SRAMBankedRead(x471,Vector(List(Const(4), Const(0))),Vector(x1505),Vector(Set(b1501, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x1507 = VecApply(x1506,0)
                          [25.2] x1514 = FixSub(x1507,x1513)
                          [26.2] x1515 = SRAMBankedWrite(x1470,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                          [26.2] x1516 = SRAMBankedWrite(x1471,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                          [26.2] x1517 = SRAMBankedWrite(x1474,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                          [26.2] x1518 = SRAMBankedWrite(x1472,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                          [26.2] x1519 = SRAMBankedWrite(x1473,Vector(x1514),Vector(List(Const(0))),Vector(b1500),Vector(Set(b1501, b1463, b561)))
                  x1550 = ParallelPipe(Set(b561),Block(Const(())))
                      x1536 = UnitPipe(Set(b1462, b561),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1535, x1524, x1531, x1527), schedule Vector(x1524, x1525, x1527, x1528, x1529, x3033, x1531, x1532, x3034, x1535)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1524 = SRAMBankedRead(x1465,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1525 = VecApply(x1524,0)
                          x1527 = SRAMBankedRead(x1466,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1528 = VecApply(x1527,0)
                          x1529 = FixMul(x1528,x1528)
                          x3033 = FixFMA(x1525,x1525,x1529)
                          x1531 = SRAMBankedRead(x1467,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1532 = VecApply(x1531,0)
                          x3034 = FixFMA(x1532,x1532,x3033)
                          x1535 = SRAMBankedWrite(x1522,Vector(x3034),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1535
                        Computing fullDFS: x3034
                        Computing fullDFS: x3033
                        Computing fullDFS: x1525
                        Computing fullDFS: x1524
                        cur: x1524, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1524 = SRAMBankedRead(x1465,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1525 = VecApply(x1524,0)
                        Computing fullDFS: x1529
                        Computing fullDFS: x1528
                        Computing fullDFS: x1527
                        cur: x1527, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1527 = SRAMBankedRead(x1466,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1528 = VecApply(x1527,0)
                        [8.0 = max(2.0) + 6.0] x1529 = FixMul(x1528,x1528)
                        [14.0 = max(2.0, 8.0) + 6.0] x3033 = FixFMA(x1525,x1525,x1529)
                        Computing fullDFS: x1532
                        Computing fullDFS: x1531
                        cur: x1531, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1531 = SRAMBankedRead(x1467,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1532 = VecApply(x1531,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3034 = FixFMA(x1532,x1532,x3033)
                        [21.0 = max(20.0) + 1.0] x1535 = SRAMBankedWrite(x1522,Vector(x3034),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1524 = SRAMBankedRead(x1465,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1525 = VecApply(x1524,0)
                          [2.0] x1527 = SRAMBankedRead(x1466,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1528 = VecApply(x1527,0)
                          [2.0] x1531 = SRAMBankedRead(x1467,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1532 = VecApply(x1531,0)
                          [8.0] x1529 = FixMul(x1528,x1528)
                          [14.0] x3033 = FixFMA(x1525,x1525,x1529)
                          [20.0] x3034 = FixFMA(x1532,x1532,x3033)
                          [21.0] x1535 = SRAMBankedWrite(x1522,Vector(x3034),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x1549 = UnitPipe(Set(b1463, b561),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1544, x1540, x1548, x1537), schedule Vector(x1537, x1538, x1540, x1541, x1542, x3035, x1544, x1545, x3036, x1548)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1537 = SRAMBankedRead(x1470,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1538 = VecApply(x1537,0)
                          x1540 = SRAMBankedRead(x1471,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1541 = VecApply(x1540,0)
                          x1542 = FixMul(x1541,x1541)
                          x3035 = FixFMA(x1538,x1538,x1542)
                          x1544 = SRAMBankedRead(x1472,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1545 = VecApply(x1544,0)
                          x3036 = FixFMA(x1545,x1545,x3035)
                          x1548 = SRAMBankedWrite(x1523,Vector(x3036),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1544
                        cur: x1544, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1544 = SRAMBankedRead(x1472,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1540
                        cur: x1540, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1540 = SRAMBankedRead(x1471,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1548
                        Computing fullDFS: x3036
                        Computing fullDFS: x3035
                        Computing fullDFS: x1538
                        Computing fullDFS: x1537
                        cur: x1537, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1537 = SRAMBankedRead(x1470,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1538 = VecApply(x1537,0)
                        Computing fullDFS: x1542
                        Computing fullDFS: x1541
                        [2.0 = max(2.0) + 0.0] x1541 = VecApply(x1540,0)
                        [8.0 = max(2.0) + 6.0] x1542 = FixMul(x1541,x1541)
                        [14.0 = max(2.0, 8.0) + 6.0] x3035 = FixFMA(x1538,x1538,x1542)
                        Computing fullDFS: x1545
                        [2.0 = max(2.0) + 0.0] x1545 = VecApply(x1544,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3036 = FixFMA(x1545,x1545,x3035)
                        [21.0 = max(20.0) + 1.0] x1548 = SRAMBankedWrite(x1523,Vector(x3036),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1537 = SRAMBankedRead(x1470,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1538 = VecApply(x1537,0)
                          [2.0] x1540 = SRAMBankedRead(x1471,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1541 = VecApply(x1540,0)
                          [2.0] x1544 = SRAMBankedRead(x1472,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1545 = VecApply(x1544,0)
                          [8.0] x1542 = FixMul(x1541,x1541)
                          [14.0] x3035 = FixFMA(x1538,x1538,x1542)
                          [20.0] x3036 = FixFMA(x1545,x1545,x3035)
                          [21.0] x1548 = SRAMBankedWrite(x1523,Vector(x3036),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x1575 = ParallelPipe(Set(b561),Block(Const(())))
                      x1565 = UnitPipe(Set(b1462, b561),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1557, x1563, x1564), schedule Vector(x1557, x1558, x1559, x1560, x1561, x1562, x1563, x1564)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1557 = SRAMBankedRead(x1522,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1558 = VecApply(x1557,0)
                          x1559 = FixLst(Const(0),x1558)
                          x1560 = FixLst(Const(1),x1558)
                          x1561 = And(x1559,x1560)
                          x1562 = Not(x1561)
                          x1563 = RegWrite(x1553,x1561,Set())
                          x1564 = RegWrite(x1555,x1562,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1557
                        cur: x1557, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1557 = SRAMBankedRead(x1522,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1563
                        Computing fullDFS: x1561
                        Computing fullDFS: x1559
                        Computing fullDFS: x1558
                        [2.0 = max(2.0) + 0.0] x1558 = VecApply(x1557,0)
                        [2.4 = max(2.0) + 0.4] x1559 = FixLst(Const(0),x1558)
                        Computing fullDFS: x1560
                        [2.4 = max(2.0) + 0.4] x1560 = FixLst(Const(1),x1558)
                        [2.6 = max(2.4, 2.4) + 0.2] x1561 = And(x1559,x1560)
                        [3.6 = max(2.6) + 1.0] x1563 = RegWrite(x1553,x1561,Set())
                        Computing fullDFS: x1564
                        Computing fullDFS: x1562
                        [2.8000000000000003 = max(2.6) + 0.2] x1562 = Not(x1561)
                        [3.8 = max(2.8) + 1.0] x1564 = RegWrite(x1555,x1562,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1557 = SRAMBankedRead(x1522,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1558 = VecApply(x1557,0)
                          [2.4] x1559 = FixLst(Const(0),x1558)
                          [2.4] x1560 = FixLst(Const(1),x1558)
                          [2.6] x1561 = And(x1559,x1560)
                          [2.8] x1562 = Not(x1561)
                          [3.6] x1563 = RegWrite(x1553,x1561,Set())
                          [3.8] x1564 = RegWrite(x1555,x1562,Set())
                      x1574 = UnitPipe(Set(b1463, b561),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1566, x1572, x1573), schedule Vector(x1566, x1567, x1568, x1569, x1570, x1571, x1572, x1573)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1566 = SRAMBankedRead(x1523,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1567 = VecApply(x1566,0)
                          x1568 = FixLst(Const(0),x1567)
                          x1569 = FixLst(Const(1),x1567)
                          x1570 = And(x1568,x1569)
                          x1571 = Not(x1570)
                          x1572 = RegWrite(x1554,x1570,Set())
                          x1573 = RegWrite(x1556,x1571,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1566
                        cur: x1566, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1566 = SRAMBankedRead(x1523,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1572
                        Computing fullDFS: x1570
                        Computing fullDFS: x1568
                        Computing fullDFS: x1567
                        [2.0 = max(2.0) + 0.0] x1567 = VecApply(x1566,0)
                        [2.4 = max(2.0) + 0.4] x1568 = FixLst(Const(0),x1567)
                        Computing fullDFS: x1569
                        [2.4 = max(2.0) + 0.4] x1569 = FixLst(Const(1),x1567)
                        [2.6 = max(2.4, 2.4) + 0.2] x1570 = And(x1568,x1569)
                        [3.6 = max(2.6) + 1.0] x1572 = RegWrite(x1554,x1570,Set())
                        Computing fullDFS: x1573
                        Computing fullDFS: x1571
                        [2.8000000000000003 = max(2.6) + 0.2] x1571 = Not(x1570)
                        [3.8 = max(2.8) + 1.0] x1573 = RegWrite(x1556,x1571,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1566 = SRAMBankedRead(x1523,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1567 = VecApply(x1566,0)
                          [2.4] x1568 = FixLst(Const(0),x1567)
                          [2.4] x1569 = FixLst(Const(1),x1567)
                          [2.6] x1570 = And(x1568,x1569)
                          [2.8] x1571 = Not(x1570)
                          [3.6] x1572 = RegWrite(x1554,x1570,Set())
                          [3.8] x1573 = RegWrite(x1556,x1571,Set())
                  x1593 = Switch(List(x2943, x2944),Block(x1592))
                    Working on pipeLatencies of result Vector(x1592, x1591, x1590, x1580, x1581, Const(90)), schedule Vector(x1591, x1592, x1580, x1581, x1582, x1583, x1584, x1585, x1586, x1587, x1588, x1589, x1590)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1591 = SwitchCase(Block(x1590))
                      x1592 = SwitchCase(Block(Const(90)))
                      x1580 = RegRead(x1553)
                      x1581 = SRAMBankedRead(x1522,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1580)),Vec[Fix[TRUE,_10,_22]])
                      x1582 = VecApply(x1581,0)
                      x1583 = FixDiv(Const(100),x1582)
                      x1584 = FixDiv(x1583,x1582)
                      x1585 = FixDiv(x1584,x1582)
                      x1586 = FixDiv(x1585,x1582)
                      x1587 = FixDiv(x1586,x1582)
                      x1588 = FixDiv(Const(10),x1582)
                      x1589 = FixDiv(x1588,x1582)
                      x1590 = FixSub(x1587,x1589)
                    Computing fullDFS: x1592
                    cur: x1592, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1592 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x1591
                    Computing fullDFS: x1580
                    cur: x1580, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1580 = RegRead(x1553)
                    Computing fullDFS: x1581
                    [2.0 = max(0.0) + 2.0] x1581 = SRAMBankedRead(x1522,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1580)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x1590
                    Computing fullDFS: x1587
                    Computing fullDFS: x1582
                    [2.0 = max(2.0) + 0.0] x1582 = VecApply(x1581,0)
                    Computing fullDFS: x1586
                    Computing fullDFS: x1585
                    Computing fullDFS: x1584
                    Computing fullDFS: x1583
                    [22.0 = max(2.0) + 20.0] x1583 = FixDiv(Const(100),x1582)
                    [42.0 = max(2.0, 22.0) + 20.0] x1584 = FixDiv(x1583,x1582)
                    [62.0 = max(2.0, 42.0) + 20.0] x1585 = FixDiv(x1584,x1582)
                    [82.0 = max(2.0, 62.0) + 20.0] x1586 = FixDiv(x1585,x1582)
                    [102.0 = max(2.0, 82.0) + 20.0] x1587 = FixDiv(x1586,x1582)
                    Computing fullDFS: x1589
                    Computing fullDFS: x1588
                    [22.0 = max(2.0) + 20.0] x1588 = FixDiv(Const(10),x1582)
                    [42.0 = max(2.0, 22.0) + 20.0] x1589 = FixDiv(x1588,x1582)
                    [103.0 = max(102.0, 42.0) + 1.0] x1590 = FixSub(x1587,x1589)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x1591 = SwitchCase(Block(x1590))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x1592 = SwitchCase(Block(Const(90)))
                      [0.0] x1580 = RegRead(x1553)
                      [2.0] x1581 = SRAMBankedRead(x1522,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1580)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1582 = VecApply(x1581,0)
                      [22.0] x1583 = FixDiv(Const(100),x1582)
                      [22.0] x1588 = FixDiv(Const(10),x1582)
                      [42.0] x1584 = FixDiv(x1583,x1582)
                      [42.0] x1589 = FixDiv(x1588,x1582)
                      [62.0] x1585 = FixDiv(x1584,x1582)
                      [82.0] x1586 = FixDiv(x1585,x1582)
                      [102.0] x1587 = FixDiv(x1586,x1582)
                      [103.0] x1591 = SwitchCase(Block(x1590))
                      [103.0] x1590 = FixSub(x1587,x1589)
                  x1607 = Switch(List(x2945, x2946),Block(x1606))
                    Working on pipeLatencies of result Vector(x1606, x1605, x1604, x1594, x1595, Const(90)), schedule Vector(x1605, x1606, x1594, x1595, x1596, x1597, x1598, x1599, x1600, x1601, x1602, x1603, x1604)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1605 = SwitchCase(Block(x1604))
                      x1606 = SwitchCase(Block(Const(90)))
                      x1594 = RegRead(x1554)
                      x1595 = SRAMBankedRead(x1523,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1594)),Vec[Fix[TRUE,_10,_22]])
                      x1596 = VecApply(x1595,0)
                      x1597 = FixDiv(Const(100),x1596)
                      x1598 = FixDiv(x1597,x1596)
                      x1599 = FixDiv(x1598,x1596)
                      x1600 = FixDiv(x1599,x1596)
                      x1601 = FixDiv(x1600,x1596)
                      x1602 = FixDiv(Const(10),x1596)
                      x1603 = FixDiv(x1602,x1596)
                      x1604 = FixSub(x1601,x1603)
                    Computing fullDFS: x1606
                    cur: x1606, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1606 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x1605
                    Computing fullDFS: x1594
                    cur: x1594, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1594 = RegRead(x1554)
                    Computing fullDFS: x1595
                    [2.0 = max(0.0) + 2.0] x1595 = SRAMBankedRead(x1523,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1594)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x1604
                    Computing fullDFS: x1601
                    Computing fullDFS: x1596
                    [2.0 = max(2.0) + 0.0] x1596 = VecApply(x1595,0)
                    Computing fullDFS: x1600
                    Computing fullDFS: x1599
                    Computing fullDFS: x1598
                    Computing fullDFS: x1597
                    [22.0 = max(2.0) + 20.0] x1597 = FixDiv(Const(100),x1596)
                    [42.0 = max(2.0, 22.0) + 20.0] x1598 = FixDiv(x1597,x1596)
                    [62.0 = max(2.0, 42.0) + 20.0] x1599 = FixDiv(x1598,x1596)
                    [82.0 = max(2.0, 62.0) + 20.0] x1600 = FixDiv(x1599,x1596)
                    [102.0 = max(2.0, 82.0) + 20.0] x1601 = FixDiv(x1600,x1596)
                    Computing fullDFS: x1603
                    Computing fullDFS: x1602
                    [22.0 = max(2.0) + 20.0] x1602 = FixDiv(Const(10),x1596)
                    [42.0 = max(2.0, 22.0) + 20.0] x1603 = FixDiv(x1602,x1596)
                    [103.0 = max(102.0, 42.0) + 1.0] x1604 = FixSub(x1601,x1603)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x1605 = SwitchCase(Block(x1604))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x1606 = SwitchCase(Block(Const(90)))
                      [0.0] x1594 = RegRead(x1554)
                      [2.0] x1595 = SRAMBankedRead(x1523,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1594)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1596 = VecApply(x1595,0)
                      [22.0] x1597 = FixDiv(Const(100),x1596)
                      [22.0] x1602 = FixDiv(Const(10),x1596)
                      [42.0] x1598 = FixDiv(x1597,x1596)
                      [42.0] x1603 = FixDiv(x1602,x1596)
                      [62.0] x1599 = FixDiv(x1598,x1596)
                      [82.0] x1600 = FixDiv(x1599,x1596)
                      [102.0] x1601 = FixDiv(x1600,x1596)
                      [103.0] x1605 = SwitchCase(Block(x1604))
                      [103.0] x1604 = FixSub(x1601,x1603)
                  x1612 = ParallelPipe(Set(b561),Block(Const(())))
                      x1609 = UnitPipe(Set(b1462, b561),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1608), schedule Vector(x1608)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1608 = SRAMBankedWrite(x1551,Vector(x1593),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1608
                        cur: x1608, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x1608 = SRAMBankedWrite(x1551,Vector(x1593),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x1608 = SRAMBankedWrite(x1551,Vector(x1593),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x1611 = UnitPipe(Set(b1463, b561),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1610), schedule Vector(x1610)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1610 = SRAMBankedWrite(x1552,Vector(x1607),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1610
                        cur: x1610, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x1610 = SRAMBankedWrite(x1552,Vector(x1607),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x1610 = SRAMBankedWrite(x1552,Vector(x1607),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x1645 = ParallelPipe(Set(b561),Block(Const(())))
                      x1630 = UnrolledForeach(Set(b1462, b561),x1615,Block(Const(())),List(List(b1617)),List(List(b1618)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1628, x1622, x1619, x1627, x1626, x1629, x1625), schedule Vector(x1619, x1620, x1621, x1622, x1623, x1624, x1625, x1626, x1627, x1628, x1629)
                        Memories with both reads and writes in this scope: Set(x1468)
                        NonConflictSets(x1619, x1629): Set()
                        NonConflictSets(x1619, x1629): Set()
                        Found Cycle: x1619, x1629
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x1629 = SRAMBankedWrite(x1468,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          x1619 = SRAMBankedRead(x1468,Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                            x1619 = SRAMBankedRead(x1468,Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                            x1620 = VecApply(x1619,0)
                            x1621 = FixMul(x1620,Const(0.099999904632568359375))
                            x1624 = FixMul(x1621,x1623)
                            x1629 = SRAMBankedWrite(x1468,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                        Done finding cycles: Vector(AccumTriple(x1468,x1619,x1629)), Map(x1629 -> List(AccumTriple(x1468,x1619,x1629)), x1620 -> List(AccumTriple(x1468,x1619,x1629)), x1619 -> List(AccumTriple(x1468,x1619,x1629)), x1624 -> List(AccumTriple(x1468,x1619,x1629)), x1621 -> List(AccumTriple(x1468,x1619,x1629)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1619 = SRAMBankedRead(x1468,Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                          x1620 = VecApply(x1619,0)
                          x1621 = FixMul(x1620,Const(0.099999904632568359375))
                          x1622 = SRAMBankedRead(x1551,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                          x1623 = VecApply(x1622,0)
                          x1624 = FixMul(x1621,x1623)
                          x1625 = SRAMBankedWrite(x1469,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          x1626 = SRAMBankedWrite(x1465,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          x1627 = SRAMBankedWrite(x1466,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          x1628 = SRAMBankedWrite(x1467,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          x1629 = SRAMBankedWrite(x1468,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1628
                        Computing fullDFS: x1624
                        Computing fullDFS: x1621
                        Computing fullDFS: x1620
                        Computing fullDFS: x1619
                        cur: x1619, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x1468,x1619,x1629))
                        [2.0 = max(0) + 2.0] x1619 = SRAMBankedRead(x1468,Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        cycle deps of x1620: Vector(x1619, x1620)
                        [2.0 = max(2.0) + 0.0] x1620 = VecApply(x1619,0)[cycle]
                        cycle deps of x1621: Vector(x1619, x1620, x1621)
                        [8.0 = max(2.0) + 6.0] x1621 = FixMul(x1620,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x1623
                        Computing fullDFS: x1622
                        cur: x1622, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1622 = SRAMBankedRead(x1551,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1623 = VecApply(x1622,0)
                        cycle deps of x1624: Vector(x1619, x1620, x1621, x1624)
                        [14.0 = max(8.0, 2.0) + 6.0] x1624 = FixMul(x1621,x1623)[cycle]
                        cycle deps of x1628: Vector(x1619, x1620, x1621, x1624, x1628)
                        [15.0 = max(14.0) + 1.0] x1628 = SRAMBankedWrite(x1467,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                        Computing fullDFS: x1627
                        cycle deps of x1627: Vector(x1619, x1620, x1621, x1624, x1627)
                        [15.0 = max(14.0) + 1.0] x1627 = SRAMBankedWrite(x1466,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                        Computing fullDFS: x1626
                        cycle deps of x1626: Vector(x1619, x1620, x1621, x1624, x1626)
                        [15.0 = max(14.0) + 1.0] x1626 = SRAMBankedWrite(x1465,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                        Computing fullDFS: x1629
                        cycle deps of x1629: Vector(x1619, x1619, x1620, x1621, x1624, x1629)
                        [15.0 = max(2.0, 14.0) + 1.0] x1629 = SRAMBankedWrite(x1468,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))[cycle]
                        Computing fullDFS: x1625
                        cycle deps of x1625: Vector(x1619, x1620, x1621, x1624, x1625)
                        [15.0 = max(14.0) + 1.0] x1625 = SRAMBankedWrite(x1469,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                        Cycle #0: write: x1629, cycle: x1619, x1619, x1620, x1621, x1624, x1629
                        x1624 = FixMul(x1621,x1623) [14.0]
                          [14.0 = 15.0 - 1.0] x1625 = SRAMBankedWrite(x1469,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          [14.0 = 15.0 - 1.0] x1626 = SRAMBankedWrite(x1465,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          [14.0 = 15.0 - 1.0] x1627 = SRAMBankedWrite(x1466,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          [14.0 = 15.0 - 1.0] x1628 = SRAMBankedWrite(x1467,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          [14.0 = 15.0 - 1.0] x1629 = SRAMBankedWrite(x1468,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          [14.0]
                        x1621 = FixMul(x1620,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x1624 = FixMul(x1621,x1623)
                          [8.0]
                        x1620 = VecApply(x1619,0) [2.0]
                          [2.0 = 8.0 - 6.0] x1621 = FixMul(x1620,Const(0.099999904632568359375))
                          [2.0]
                        x1619 = SRAMBankedRead(x1468,Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1620 = VecApply(x1619,0)
                          [2.0]
                        x1619 = SRAMBankedRead(x1468,Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1620 = VecApply(x1619,0)
                          [2.0]
                        Cycles: Map(x1629 -> Vector(x1619, x1619, x1620, x1621, x1624, x1629), x1620 -> Vector(x1619, x1620), x1626 -> Vector(x1619, x1620, x1621, x1624, x1626), x1628 -> Vector(x1619, x1620, x1621, x1624, x1628), x1619 -> List(x1619), x1625 -> Vector(x1619, x1620, x1621, x1624, x1625), x1624 -> Vector(x1619, x1620, x1621, x1624), x1627 -> Vector(x1619, x1620, x1621, x1624, x1627), x1621 -> Vector(x1619, x1620, x1621))
                        pseudo cycles for x1468:
                        Multiplexed accesses for memory x1468: 
                          x1619 = SRAMBankedRead(x1468,Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                        Access: x1619 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1619 = SRAMBankedRead(x1468,Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x1468: 
                          x1629 = SRAMBankedWrite(x1468,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                        Access: x1629 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1629 = SRAMBankedWrite(x1468,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x1619),x1468,1.0)
                        AAACycle(Vector(x1629),x1468,1.0)
                        WARCycle(x1619,x1629,x1468,Vector(x1619, x1619, x1620, x1621, x1624, x1629),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x1619 = SRAMBankedRead(x1468,Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1620 = VecApply(x1619,0)
                          [2.0] x1622 = SRAMBankedRead(x1551,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1623 = VecApply(x1622,0)
                          [8.0] x1621 = FixMul(x1620,Const(0.099999904632568359375))
                          [14.0] x1624 = FixMul(x1621,x1623)
                          [15.0] x1625 = SRAMBankedWrite(x1469,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          [15.0] x1626 = SRAMBankedWrite(x1465,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          [15.0] x1627 = SRAMBankedWrite(x1466,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          [15.0] x1628 = SRAMBankedWrite(x1467,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                          [15.0] x1629 = SRAMBankedWrite(x1468,Vector(x1624),Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)))
                        Cycle #0 on x1468: 
                          x1468 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                      x1644 = UnrolledForeach(Set(b1463, b561),x1616,Block(Const(())),List(List(b1631)),List(List(b1632)),None)
                        Working on pipeLatencies of result Vector(x1633, Const(()), x1640, x1641, x1636, x1643, x1639, x1642), schedule Vector(x1633, x1634, x1635, x1636, x1637, x1638, x1639, x1640, x1641, x1642, x1643)
                        Memories with both reads and writes in this scope: Set(x1473)
                        NonConflictSets(x1633, x1643): Set()
                        NonConflictSets(x1633, x1643): Set()
                        Found Cycle: x1633, x1643
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x1643 = SRAMBankedWrite(x1473,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          x1633 = SRAMBankedRead(x1473,Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                            x1633 = SRAMBankedRead(x1473,Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                            x1634 = VecApply(x1633,0)
                            x1635 = FixMul(x1634,Const(0.099999904632568359375))
                            x1638 = FixMul(x1635,x1637)
                            x1643 = SRAMBankedWrite(x1473,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                        Done finding cycles: Vector(AccumTriple(x1473,x1633,x1643)), Map(x1638 -> List(AccumTriple(x1473,x1633,x1643)), x1635 -> List(AccumTriple(x1473,x1633,x1643)), x1643 -> List(AccumTriple(x1473,x1633,x1643)), x1634 -> List(AccumTriple(x1473,x1633,x1643)), x1633 -> List(AccumTriple(x1473,x1633,x1643)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1633 = SRAMBankedRead(x1473,Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                          x1634 = VecApply(x1633,0)
                          x1635 = FixMul(x1634,Const(0.099999904632568359375))
                          x1636 = SRAMBankedRead(x1552,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                          x1637 = VecApply(x1636,0)
                          x1638 = FixMul(x1635,x1637)
                          x1639 = SRAMBankedWrite(x1470,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          x1640 = SRAMBankedWrite(x1471,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          x1641 = SRAMBankedWrite(x1474,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          x1642 = SRAMBankedWrite(x1472,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          x1643 = SRAMBankedWrite(x1473,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                        Computing fullDFS: x1633
                        cur: x1633, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x1473,x1633,x1643))
                        [2.0 = max(0) + 2.0] x1633 = SRAMBankedRead(x1473,Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1640
                        Computing fullDFS: x1638
                        Computing fullDFS: x1635
                        Computing fullDFS: x1634
                        cycle deps of x1634: Vector(x1633, x1634)
                        [2.0 = max(2.0) + 0.0] x1634 = VecApply(x1633,0)[cycle]
                        cycle deps of x1635: Vector(x1633, x1634, x1635)
                        [8.0 = max(2.0) + 6.0] x1635 = FixMul(x1634,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x1637
                        Computing fullDFS: x1636
                        cur: x1636, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1636 = SRAMBankedRead(x1552,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1637 = VecApply(x1636,0)
                        cycle deps of x1638: Vector(x1633, x1634, x1635, x1638)
                        [14.0 = max(8.0, 2.0) + 6.0] x1638 = FixMul(x1635,x1637)[cycle]
                        cycle deps of x1640: Vector(x1633, x1634, x1635, x1638, x1640)
                        [15.0 = max(14.0) + 1.0] x1640 = SRAMBankedWrite(x1471,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                        Computing fullDFS: x1641
                        cycle deps of x1641: Vector(x1633, x1634, x1635, x1638, x1641)
                        [15.0 = max(14.0) + 1.0] x1641 = SRAMBankedWrite(x1474,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                        Computing fullDFS: x1643
                        cycle deps of x1643: Vector(x1633, x1633, x1634, x1635, x1638, x1643)
                        [15.0 = max(2.0, 14.0) + 1.0] x1643 = SRAMBankedWrite(x1473,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))[cycle]
                        Computing fullDFS: x1639
                        cycle deps of x1639: Vector(x1633, x1634, x1635, x1638, x1639)
                        [15.0 = max(14.0) + 1.0] x1639 = SRAMBankedWrite(x1470,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                        Computing fullDFS: x1642
                        cycle deps of x1642: Vector(x1633, x1634, x1635, x1638, x1642)
                        [15.0 = max(14.0) + 1.0] x1642 = SRAMBankedWrite(x1472,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                        Cycle #0: write: x1643, cycle: x1633, x1633, x1634, x1635, x1638, x1643
                        x1638 = FixMul(x1635,x1637) [14.0]
                          [14.0 = 15.0 - 1.0] x1639 = SRAMBankedWrite(x1470,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          [14.0 = 15.0 - 1.0] x1640 = SRAMBankedWrite(x1471,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          [14.0 = 15.0 - 1.0] x1641 = SRAMBankedWrite(x1474,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          [14.0 = 15.0 - 1.0] x1642 = SRAMBankedWrite(x1472,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          [14.0 = 15.0 - 1.0] x1643 = SRAMBankedWrite(x1473,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          [14.0]
                        x1635 = FixMul(x1634,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x1638 = FixMul(x1635,x1637)
                          [8.0]
                        x1634 = VecApply(x1633,0) [2.0]
                          [2.0 = 8.0 - 6.0] x1635 = FixMul(x1634,Const(0.099999904632568359375))
                          [2.0]
                        x1633 = SRAMBankedRead(x1473,Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1634 = VecApply(x1633,0)
                          [2.0]
                        x1633 = SRAMBankedRead(x1473,Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1634 = VecApply(x1633,0)
                          [2.0]
                        Cycles: Map(x1638 -> Vector(x1633, x1634, x1635, x1638), x1641 -> Vector(x1633, x1634, x1635, x1638, x1641), x1635 -> Vector(x1633, x1634, x1635), x1643 -> Vector(x1633, x1633, x1634, x1635, x1638, x1643), x1634 -> Vector(x1633, x1634), x1640 -> Vector(x1633, x1634, x1635, x1638, x1640), x1642 -> Vector(x1633, x1634, x1635, x1638, x1642), x1633 -> List(x1633), x1639 -> Vector(x1633, x1634, x1635, x1638, x1639))
                        pseudo cycles for x1473:
                        Multiplexed accesses for memory x1473: 
                          x1633 = SRAMBankedRead(x1473,Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                        Access: x1633 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1633 = SRAMBankedRead(x1473,Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x1473: 
                          x1643 = SRAMBankedWrite(x1473,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                        Access: x1643 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1643 = SRAMBankedWrite(x1473,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x1633),x1473,1.0)
                        AAACycle(Vector(x1643),x1473,1.0)
                        WARCycle(x1633,x1643,x1473,Vector(x1633, x1633, x1634, x1635, x1638, x1643),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x1633 = SRAMBankedRead(x1473,Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1634 = VecApply(x1633,0)
                          [2.0] x1636 = SRAMBankedRead(x1552,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1637 = VecApply(x1636,0)
                          [8.0] x1635 = FixMul(x1634,Const(0.099999904632568359375))
                          [14.0] x1638 = FixMul(x1635,x1637)
                          [15.0] x1639 = SRAMBankedWrite(x1470,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          [15.0] x1640 = SRAMBankedWrite(x1471,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          [15.0] x1641 = SRAMBankedWrite(x1474,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          [15.0] x1642 = SRAMBankedWrite(x1472,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                          [15.0] x1643 = SRAMBankedWrite(x1473,Vector(x1638),Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)))
                        Cycle #0 on x1473: 
                          x1473 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                  x1665 = UnrolledForeach(Set(),x621,Block(Const(())),Vector(List(b1461)),Vector(List(b1464)),None)
                    Working on pipeLatencies of result Vector(Const(()), x1650, x1664, x1663, x1648, x1646), schedule Vector(x1646, x1647, x1648, x1649, x1650, x1651, x1652, x1654, x1656, x1657, x1658, x1660, x1661, x1662, x1663, x1664)
                    Memories with both reads and writes in this scope: Set(x575)
                    NonConflictSets(x1650, x1664): Set()
                    NonConflictSets(x1650, x1664): Set()
                    Found Cycle: x1650, x1664
                    Exclusions: Set() Set() 
                    Found cycle between: 
                      x1664 = SRAMBankedWrite(x575,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)))
                      x1650 = SRAMBankedRead(x575,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
                        x1650 = SRAMBankedRead(x575,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
                        x1651 = VecApply(x1650,0)
                        x1661 = FixAdd(x1658,x1651)
                        x1662 = Mux(x1660,x1658,x1661)
                        x1664 = SRAMBankedWrite(x575,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)))
                    Done finding cycles: Vector(AccumTriple(x575,x1650,x1664)), Map(x1650 -> List(AccumTriple(x575,x1650,x1664)), x1662 -> List(AccumTriple(x575,x1650,x1664)), x1661 -> List(AccumTriple(x575,x1650,x1664)), x1664 -> List(AccumTriple(x575,x1650,x1664)), x1651 -> List(AccumTriple(x575,x1650,x1664)))
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1646 = SRAMBankedRead(x1469,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
                      x1647 = VecApply(x1646,0)
                      x1648 = SRAMBankedRead(x1474,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
                      x1649 = VecApply(x1648,0)
                      x1650 = SRAMBankedRead(x575,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
                      x1651 = VecApply(x1650,0)
                      x1652 = And(b1464,b561)
                      x1654 = And(b1463,b561)
                      x1656 = And(x1654,x1652)
                      x1657 = FixAdd(x1647,x1649)
                      x1658 = Mux(x1656,x1657,x1647)
                      x1660 = FixEql(b1459,Const(0))
                      x1661 = FixAdd(x1658,x1651)
                      x1662 = Mux(x1660,x1658,x1661)
                      x1663 = SRAMBankedWrite(x576,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)))
                      x1664 = SRAMBankedWrite(x575,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)))
                    Computing fullDFS: Const(())
                    Computing fullDFS: x1650
                    cur: x1650, inReduce: true, latency: 2.0
                    Known Cycles: List(AccumTriple(x575,x1650,x1664))
                    [2.0 = max(0) + 2.0] x1650 = SRAMBankedRead(x575,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])[cycle]
                    Computing fullDFS: x1664
                    Computing fullDFS: x1662
                    Computing fullDFS: x1658
                    Computing fullDFS: x1647
                    Computing fullDFS: x1646
                    cur: x1646, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x1646 = SRAMBankedRead(x1469,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x1647 = VecApply(x1646,0)
                    Computing fullDFS: x1656
                    Computing fullDFS: x1652
                    cur: x1652, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1652 = And(b1464,b561)
                    Computing fullDFS: x1654
                    cur: x1654, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1654 = And(b1463,b561)
                    [0.4 = max(0.2, 0.2) + 0.2] x1656 = And(x1654,x1652)
                    Computing fullDFS: x1657
                    Computing fullDFS: x1649
                    Computing fullDFS: x1648
                    cur: x1648, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x1648 = SRAMBankedRead(x1474,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x1649 = VecApply(x1648,0)
                    [3.0 = max(2.0, 2.0) + 1.0] x1657 = FixAdd(x1647,x1649)
                    [3.5 = max(2.0, 0.4, 3.0) + 0.5] x1658 = Mux(x1656,x1657,x1647)
                    Computing fullDFS: x1660
                    cur: x1660, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1660 = FixEql(b1459,Const(0))
                    Computing fullDFS: x1661
                    Computing fullDFS: x1651
                    cycle deps of x1651: Vector(x1650, x1651)
                    [2.0 = max(2.0) + 0.0] x1651 = VecApply(x1650,0)[cycle]
                    cycle deps of x1661: Vector(x1650, x1651, x1661)
                    [4.5 = max(2.0, 3.5) + 1.0] x1661 = FixAdd(x1658,x1651)[cycle]
                    cycle deps of x1662: Vector(x1650, x1651, x1661, x1662)
                    [5.0 = max(3.5, 0.2, 4.5) + 0.5] x1662 = Mux(x1660,x1658,x1661)[cycle]
                    cycle deps of x1664: Vector(x1650, x1650, x1651, x1661, x1662, x1664)
                    [6.0 = max(2.0, 5.0) + 1.0] x1664 = SRAMBankedWrite(x575,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)))[cycle]
                    Computing fullDFS: x1663
                    cycle deps of x1663: Vector(x1650, x1651, x1661, x1662, x1663)
                    [6.0 = max(5.0) + 1.0] x1663 = SRAMBankedWrite(x576,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)))
                    Cycle #0: write: x1664, cycle: x1650, x1650, x1651, x1661, x1662, x1664
                    x1662 = Mux(x1660,x1658,x1661) [5.0]
                      [5.0 = 6.0 - 1.0] x1663 = SRAMBankedWrite(x576,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)))
                      [5.0 = 6.0 - 1.0] x1664 = SRAMBankedWrite(x575,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)))
                      [5.0]
                    x1661 = FixAdd(x1658,x1651) [4.5]
                      [4.5 = 5.0 - 0.5] x1662 = Mux(x1660,x1658,x1661)
                      [4.5]
                    x1651 = VecApply(x1650,0) [2.0]
                      [3.5 = 4.5 - 1.0] x1661 = FixAdd(x1658,x1651)
                      [3.5]
                    x1650 = SRAMBankedRead(x575,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                      [3.5 = 3.5 - 0.0] x1651 = VecApply(x1650,0)
                      [3.5]
                    x1650 = SRAMBankedRead(x575,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]]) [3.5]
                      [3.5 = 3.5 - 0.0] x1651 = VecApply(x1650,0)
                      [3.5]
                    Cycles: Map(x1650 -> List(x1650), x1662 -> Vector(x1650, x1651, x1661, x1662), x1661 -> Vector(x1650, x1651, x1661), x1664 -> Vector(x1650, x1650, x1651, x1661, x1662, x1664), x1651 -> Vector(x1650, x1651), x1663 -> Vector(x1650, x1651, x1661, x1662, x1663))
                    pseudo cycles for x575:
                    Multiplexed accesses for memory x575: 
                      x1650 = SRAMBankedRead(x575,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
                    Access: x1650 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x1650 = SRAMBankedRead(x575,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 3.5 due to muxing.
                    Multiplexed accesses for memory x575: 
                      x1664 = SRAMBankedWrite(x575,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)))
                    Access: x1664 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x1664 = SRAMBankedWrite(x575,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561))) by 0.0 to 6.0 due to muxing.
                    Found cycles: 
                    AAACycle(Vector(x1650),x575,1.0)
                    AAACycle(Vector(x1664),x575,1.0)
                    WARCycle(x1650,x1664,x575,Vector(x1650, x1650, x1651, x1661, x1662, x1664),5.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                      Schedule after pipeLatencies calculation:
                      [0.2] x1652 = And(b1464,b561)
                      [0.2] x1654 = And(b1463,b561)
                      [0.2] x1660 = FixEql(b1459,Const(0))
                      [0.4] x1656 = And(x1654,x1652)
                      [2.0] x1646 = SRAMBankedRead(x1469,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1647 = VecApply(x1646,0)
                      [2.0] x1648 = SRAMBankedRead(x1474,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1649 = VecApply(x1648,0)
                      [3.0] x1657 = FixAdd(x1647,x1649)
                      [3.5] x1650 = SRAMBankedRead(x575,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]])
                      [3.5] x1651 = VecApply(x1650,0)
                      [3.5] x1658 = Mux(x1656,x1657,x1647)
                      [4.5] x1661 = FixAdd(x1658,x1651)
                      [5.0] x1662 = Mux(x1660,x1658,x1661)
                      [6.0] x1663 = SRAMBankedWrite(x576,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)))
                      [6.0] x1664 = SRAMBankedWrite(x575,Vector(x1662),Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)))
                    Cycle #0 on x575: 
                      x575 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [accum_0]
                      disjoint:     true
                      no visible intermediates:
                        closed cycle:     false
                        no intermediates: true
                        is local mem:     true
                        number of writers:  1
                        outer reduce:     false
                        accum type:       Fold (if reduce, overrides no intermediates)
              x1874 = UnrolledReduce(Set(b562),x602,Block((x577) => Const(())),List(List(b1667, b1668)),List(List(b1670, b1671)),None)
                  x1729 = ParallelPipe(Set(b562),Block(Const(())))
                      x1707 = UnrolledForeach(Set(b1670, b562),x1685,Block(Const(())),List(List(b1687)),List(List(b1688)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1705, x1703, x1704, x1699, x1702, x1706, x1693), schedule Vector(x1690, x3037, x3038, x1692, x1693, x1694, x1696, x3039, x3040, x1698, x1699, x1700, x1701, x1702, x1703, x1704, x1705, x1706)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1690 = FixDiv(b552,Const(10))
                          x3037 = FixSLA(x1690,Const(1))
                          x3038 = FixAdd(x3037,x1690)
                          x1692 = FixAdd(x3038,b1687)
                          x1693 = SRAMBankedRead(x471,Vector(List(Const(5), Const(0))),Vector(x1692),Vector(Set(b1688, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                          x1694 = VecApply(x1693,0)
                          x1696 = FixDivSRA(b1667,Const(1))
                          x3039 = FixSLA(x1696,Const(1))
                          x3040 = FixAdd(x3039,x1696)
                          x1698 = FixAdd(x3040,b1687)
                          x1699 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1698),Vector(Set(b1688, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                          x1700 = VecApply(x1699,0)
                          x1701 = FixSub(x1694,x1700)
                          x1702 = SRAMBankedWrite(x1677,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                          x1703 = SRAMBankedWrite(x1676,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                          x1704 = SRAMBankedWrite(x1675,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                          x1705 = SRAMBankedWrite(x1674,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                          x1706 = SRAMBankedWrite(x1673,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1705
                        Computing fullDFS: x1701
                        Computing fullDFS: x1694
                        Computing fullDFS: x1693
                        Computing fullDFS: x1692
                        Computing fullDFS: x3038
                        Computing fullDFS: x1690
                        cur: x1690, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x1690 = FixDiv(b552,Const(10))
                        Computing fullDFS: x3037
                        [20.2 = max(20.0) + 0.2] x3037 = FixSLA(x1690,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3038 = FixAdd(x3037,x1690)
                        [22.2 = max(21.2) + 1.0] x1692 = FixAdd(x3038,b1687)
                        [24.2 = max(22.2) + 2.0] x1693 = SRAMBankedRead(x471,Vector(List(Const(5), Const(0))),Vector(x1692),Vector(Set(b1688, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x1694 = VecApply(x1693,0)
                        Computing fullDFS: x1700
                        Computing fullDFS: x1699
                        Computing fullDFS: x1698
                        Computing fullDFS: x3040
                        Computing fullDFS: x1696
                        cur: x1696, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x1696 = FixDivSRA(b1667,Const(1))
                        Computing fullDFS: x3039
                        [0.4 = max(0.2) + 0.2] x3039 = FixSLA(x1696,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3040 = FixAdd(x3039,x1696)
                        [2.4 = max(1.4) + 1.0] x1698 = FixAdd(x3040,b1687)
                        [4.4 = max(2.4) + 2.0] x1699 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1698),Vector(Set(b1688, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x1700 = VecApply(x1699,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x1701 = FixSub(x1694,x1700)
                        [26.2 = max(25.2) + 1.0] x1705 = SRAMBankedWrite(x1674,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                        Computing fullDFS: x1703
                        [26.2 = max(25.2) + 1.0] x1703 = SRAMBankedWrite(x1676,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                        Computing fullDFS: x1704
                        [26.2 = max(25.2) + 1.0] x1704 = SRAMBankedWrite(x1675,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                        Computing fullDFS: x1702
                        [26.2 = max(25.2) + 1.0] x1702 = SRAMBankedWrite(x1677,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                        Computing fullDFS: x1706
                        [26.2 = max(25.2) + 1.0] x1706 = SRAMBankedWrite(x1673,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x1696 = FixDivSRA(b1667,Const(1))
                          [0.4] x3039 = FixSLA(x1696,Const(1))
                          [1.4] x3040 = FixAdd(x3039,x1696)
                          [2.4] x1698 = FixAdd(x3040,b1687)
                          [4.4] x1699 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1698),Vector(Set(b1688, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x1700 = VecApply(x1699,0)
                          [20.0] x1690 = FixDiv(b552,Const(10))
                          [20.2] x3037 = FixSLA(x1690,Const(1))
                          [21.2] x3038 = FixAdd(x3037,x1690)
                          [22.2] x1692 = FixAdd(x3038,b1687)
                          [24.2] x1693 = SRAMBankedRead(x471,Vector(List(Const(5), Const(0))),Vector(x1692),Vector(Set(b1688, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x1694 = VecApply(x1693,0)
                          [25.2] x1701 = FixSub(x1694,x1700)
                          [26.2] x1702 = SRAMBankedWrite(x1677,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                          [26.2] x1703 = SRAMBankedWrite(x1676,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                          [26.2] x1704 = SRAMBankedWrite(x1675,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                          [26.2] x1705 = SRAMBankedWrite(x1674,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                          [26.2] x1706 = SRAMBankedWrite(x1673,Vector(x1701),Vector(List(Const(0))),Vector(b1687),Vector(Set(b1688, b1670, b562)))
                      x1728 = UnrolledForeach(Set(b1671, b562),x1686,Block(Const(())),List(List(b1708)),List(List(b1709)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1724, x1714, x1723, x1720, x1727, x1726, x1725), schedule Vector(x1711, x3041, x3042, x1713, x1714, x1715, x1717, x3043, x3044, x1719, x1720, x1721, x1722, x1723, x1724, x1725, x1726, x1727)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1711 = FixDiv(b552,Const(10))
                          x3041 = FixSLA(x1711,Const(1))
                          x3042 = FixAdd(x3041,x1711)
                          x1713 = FixAdd(x3042,b1708)
                          x1714 = SRAMBankedRead(x471,Vector(List(Const(5), Const(0))),Vector(x1713),Vector(Set(b1709, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                          x1715 = VecApply(x1714,0)
                          x1717 = FixDivSRA(b1668,Const(1))
                          x3043 = FixSLA(x1717,Const(1))
                          x3044 = FixAdd(x3043,x1717)
                          x1719 = FixAdd(x3044,b1708)
                          x1720 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1719),Vector(Set(b1709, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                          x1721 = VecApply(x1720,0)
                          x1722 = FixSub(x1715,x1721)
                          x1723 = SRAMBankedWrite(x1682,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                          x1724 = SRAMBankedWrite(x1680,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                          x1725 = SRAMBankedWrite(x1679,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                          x1726 = SRAMBankedWrite(x1678,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                          x1727 = SRAMBankedWrite(x1681,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1724
                        Computing fullDFS: x1722
                        Computing fullDFS: x1715
                        Computing fullDFS: x1714
                        Computing fullDFS: x1713
                        Computing fullDFS: x3042
                        Computing fullDFS: x1711
                        cur: x1711, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x1711 = FixDiv(b552,Const(10))
                        Computing fullDFS: x3041
                        [20.2 = max(20.0) + 0.2] x3041 = FixSLA(x1711,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3042 = FixAdd(x3041,x1711)
                        [22.2 = max(21.2) + 1.0] x1713 = FixAdd(x3042,b1708)
                        [24.2 = max(22.2) + 2.0] x1714 = SRAMBankedRead(x471,Vector(List(Const(5), Const(0))),Vector(x1713),Vector(Set(b1709, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x1715 = VecApply(x1714,0)
                        Computing fullDFS: x1721
                        Computing fullDFS: x1720
                        Computing fullDFS: x1719
                        Computing fullDFS: x3044
                        Computing fullDFS: x1717
                        cur: x1717, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x1717 = FixDivSRA(b1668,Const(1))
                        Computing fullDFS: x3043
                        [0.4 = max(0.2) + 0.2] x3043 = FixSLA(x1717,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3044 = FixAdd(x3043,x1717)
                        [2.4 = max(1.4) + 1.0] x1719 = FixAdd(x3044,b1708)
                        [4.4 = max(2.4) + 2.0] x1720 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1719),Vector(Set(b1709, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x1721 = VecApply(x1720,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x1722 = FixSub(x1715,x1721)
                        [26.2 = max(25.2) + 1.0] x1724 = SRAMBankedWrite(x1680,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                        Computing fullDFS: x1723
                        [26.2 = max(25.2) + 1.0] x1723 = SRAMBankedWrite(x1682,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                        Computing fullDFS: x1727
                        [26.2 = max(25.2) + 1.0] x1727 = SRAMBankedWrite(x1681,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                        Computing fullDFS: x1726
                        [26.2 = max(25.2) + 1.0] x1726 = SRAMBankedWrite(x1678,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                        Computing fullDFS: x1725
                        [26.2 = max(25.2) + 1.0] x1725 = SRAMBankedWrite(x1679,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x1717 = FixDivSRA(b1668,Const(1))
                          [0.4] x3043 = FixSLA(x1717,Const(1))
                          [1.4] x3044 = FixAdd(x3043,x1717)
                          [2.4] x1719 = FixAdd(x3044,b1708)
                          [4.4] x1720 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1719),Vector(Set(b1709, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x1721 = VecApply(x1720,0)
                          [20.0] x1711 = FixDiv(b552,Const(10))
                          [20.2] x3041 = FixSLA(x1711,Const(1))
                          [21.2] x3042 = FixAdd(x3041,x1711)
                          [22.2] x1713 = FixAdd(x3042,b1708)
                          [24.2] x1714 = SRAMBankedRead(x471,Vector(List(Const(5), Const(0))),Vector(x1713),Vector(Set(b1709, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x1715 = VecApply(x1714,0)
                          [25.2] x1722 = FixSub(x1715,x1721)
                          [26.2] x1723 = SRAMBankedWrite(x1682,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                          [26.2] x1724 = SRAMBankedWrite(x1680,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                          [26.2] x1725 = SRAMBankedWrite(x1679,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                          [26.2] x1726 = SRAMBankedWrite(x1678,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                          [26.2] x1727 = SRAMBankedWrite(x1681,Vector(x1722),Vector(List(Const(0))),Vector(b1708),Vector(Set(b1709, b1671, b562)))
                  x1758 = ParallelPipe(Set(b562),Block(Const(())))
                      x1744 = UnitPipe(Set(b1670, b562),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1735, x1739, x1732, x1743), schedule Vector(x1732, x1733, x1735, x1736, x1737, x3045, x1739, x1740, x3046, x1743)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1732 = SRAMBankedRead(x1673,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1733 = VecApply(x1732,0)
                          x1735 = SRAMBankedRead(x1674,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1736 = VecApply(x1735,0)
                          x1737 = FixMul(x1736,x1736)
                          x3045 = FixFMA(x1733,x1733,x1737)
                          x1739 = SRAMBankedRead(x1675,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1740 = VecApply(x1739,0)
                          x3046 = FixFMA(x1740,x1740,x3045)
                          x1743 = SRAMBankedWrite(x1730,Vector(x3046),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1735
                        cur: x1735, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1735 = SRAMBankedRead(x1674,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1739
                        cur: x1739, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1739 = SRAMBankedRead(x1675,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1732
                        cur: x1732, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1732 = SRAMBankedRead(x1673,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1743
                        Computing fullDFS: x3046
                        Computing fullDFS: x3045
                        Computing fullDFS: x1733
                        [2.0 = max(2.0) + 0.0] x1733 = VecApply(x1732,0)
                        Computing fullDFS: x1737
                        Computing fullDFS: x1736
                        [2.0 = max(2.0) + 0.0] x1736 = VecApply(x1735,0)
                        [8.0 = max(2.0) + 6.0] x1737 = FixMul(x1736,x1736)
                        [14.0 = max(2.0, 8.0) + 6.0] x3045 = FixFMA(x1733,x1733,x1737)
                        Computing fullDFS: x1740
                        [2.0 = max(2.0) + 0.0] x1740 = VecApply(x1739,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3046 = FixFMA(x1740,x1740,x3045)
                        [21.0 = max(20.0) + 1.0] x1743 = SRAMBankedWrite(x1730,Vector(x3046),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1732 = SRAMBankedRead(x1673,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1733 = VecApply(x1732,0)
                          [2.0] x1735 = SRAMBankedRead(x1674,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1736 = VecApply(x1735,0)
                          [2.0] x1739 = SRAMBankedRead(x1675,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1740 = VecApply(x1739,0)
                          [8.0] x1737 = FixMul(x1736,x1736)
                          [14.0] x3045 = FixFMA(x1733,x1733,x1737)
                          [20.0] x3046 = FixFMA(x1740,x1740,x3045)
                          [21.0] x1743 = SRAMBankedWrite(x1730,Vector(x3046),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x1757 = UnitPipe(Set(b1671, b562),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1756, x1752, x1748, x1745), schedule Vector(x1745, x1746, x1748, x1749, x1750, x3047, x1752, x1753, x3048, x1756)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1745 = SRAMBankedRead(x1678,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1746 = VecApply(x1745,0)
                          x1748 = SRAMBankedRead(x1679,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1749 = VecApply(x1748,0)
                          x1750 = FixMul(x1749,x1749)
                          x3047 = FixFMA(x1746,x1746,x1750)
                          x1752 = SRAMBankedRead(x1680,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1753 = VecApply(x1752,0)
                          x3048 = FixFMA(x1753,x1753,x3047)
                          x1756 = SRAMBankedWrite(x1731,Vector(x3048),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1756
                        Computing fullDFS: x3048
                        Computing fullDFS: x3047
                        Computing fullDFS: x1746
                        Computing fullDFS: x1745
                        cur: x1745, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1745 = SRAMBankedRead(x1678,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1746 = VecApply(x1745,0)
                        Computing fullDFS: x1750
                        Computing fullDFS: x1749
                        Computing fullDFS: x1748
                        cur: x1748, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1748 = SRAMBankedRead(x1679,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1749 = VecApply(x1748,0)
                        [8.0 = max(2.0) + 6.0] x1750 = FixMul(x1749,x1749)
                        [14.0 = max(2.0, 8.0) + 6.0] x3047 = FixFMA(x1746,x1746,x1750)
                        Computing fullDFS: x1753
                        Computing fullDFS: x1752
                        cur: x1752, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1752 = SRAMBankedRead(x1680,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1753 = VecApply(x1752,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3048 = FixFMA(x1753,x1753,x3047)
                        [21.0 = max(20.0) + 1.0] x1756 = SRAMBankedWrite(x1731,Vector(x3048),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1745 = SRAMBankedRead(x1678,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1746 = VecApply(x1745,0)
                          [2.0] x1748 = SRAMBankedRead(x1679,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1749 = VecApply(x1748,0)
                          [2.0] x1752 = SRAMBankedRead(x1680,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1753 = VecApply(x1752,0)
                          [8.0] x1750 = FixMul(x1749,x1749)
                          [14.0] x3047 = FixFMA(x1746,x1746,x1750)
                          [20.0] x3048 = FixFMA(x1753,x1753,x3047)
                          [21.0] x1756 = SRAMBankedWrite(x1731,Vector(x3048),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x1783 = ParallelPipe(Set(b562),Block(Const(())))
                      x1773 = UnitPipe(Set(b1670, b562),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1765, x1771, x1772), schedule Vector(x1765, x1766, x1767, x1768, x1769, x1770, x1771, x1772)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1765 = SRAMBankedRead(x1730,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1766 = VecApply(x1765,0)
                          x1767 = FixLst(Const(0),x1766)
                          x1768 = FixLst(Const(1),x1766)
                          x1769 = And(x1767,x1768)
                          x1770 = Not(x1769)
                          x1771 = RegWrite(x1761,x1769,Set())
                          x1772 = RegWrite(x1763,x1770,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1765
                        cur: x1765, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1765 = SRAMBankedRead(x1730,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1771
                        Computing fullDFS: x1769
                        Computing fullDFS: x1767
                        Computing fullDFS: x1766
                        [2.0 = max(2.0) + 0.0] x1766 = VecApply(x1765,0)
                        [2.4 = max(2.0) + 0.4] x1767 = FixLst(Const(0),x1766)
                        Computing fullDFS: x1768
                        [2.4 = max(2.0) + 0.4] x1768 = FixLst(Const(1),x1766)
                        [2.6 = max(2.4, 2.4) + 0.2] x1769 = And(x1767,x1768)
                        [3.6 = max(2.6) + 1.0] x1771 = RegWrite(x1761,x1769,Set())
                        Computing fullDFS: x1772
                        Computing fullDFS: x1770
                        [2.8000000000000003 = max(2.6) + 0.2] x1770 = Not(x1769)
                        [3.8 = max(2.8) + 1.0] x1772 = RegWrite(x1763,x1770,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1765 = SRAMBankedRead(x1730,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1766 = VecApply(x1765,0)
                          [2.4] x1767 = FixLst(Const(0),x1766)
                          [2.4] x1768 = FixLst(Const(1),x1766)
                          [2.6] x1769 = And(x1767,x1768)
                          [2.8] x1770 = Not(x1769)
                          [3.6] x1771 = RegWrite(x1761,x1769,Set())
                          [3.8] x1772 = RegWrite(x1763,x1770,Set())
                      x1782 = UnitPipe(Set(b1671, b562),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1774, x1780, x1781), schedule Vector(x1774, x1775, x1776, x1777, x1778, x1779, x1780, x1781)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1774 = SRAMBankedRead(x1731,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1775 = VecApply(x1774,0)
                          x1776 = FixLst(Const(0),x1775)
                          x1777 = FixLst(Const(1),x1775)
                          x1778 = And(x1776,x1777)
                          x1779 = Not(x1778)
                          x1780 = RegWrite(x1762,x1778,Set())
                          x1781 = RegWrite(x1764,x1779,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1774
                        cur: x1774, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1774 = SRAMBankedRead(x1731,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1780
                        Computing fullDFS: x1778
                        Computing fullDFS: x1776
                        Computing fullDFS: x1775
                        [2.0 = max(2.0) + 0.0] x1775 = VecApply(x1774,0)
                        [2.4 = max(2.0) + 0.4] x1776 = FixLst(Const(0),x1775)
                        Computing fullDFS: x1777
                        [2.4 = max(2.0) + 0.4] x1777 = FixLst(Const(1),x1775)
                        [2.6 = max(2.4, 2.4) + 0.2] x1778 = And(x1776,x1777)
                        [3.6 = max(2.6) + 1.0] x1780 = RegWrite(x1762,x1778,Set())
                        Computing fullDFS: x1781
                        Computing fullDFS: x1779
                        [2.8000000000000003 = max(2.6) + 0.2] x1779 = Not(x1778)
                        [3.8 = max(2.8) + 1.0] x1781 = RegWrite(x1764,x1779,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1774 = SRAMBankedRead(x1731,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1775 = VecApply(x1774,0)
                          [2.4] x1776 = FixLst(Const(0),x1775)
                          [2.4] x1777 = FixLst(Const(1),x1775)
                          [2.6] x1778 = And(x1776,x1777)
                          [2.8] x1779 = Not(x1778)
                          [3.6] x1780 = RegWrite(x1762,x1778,Set())
                          [3.8] x1781 = RegWrite(x1764,x1779,Set())
                  x1801 = Switch(List(x2947, x2948),Block(x1800))
                    Working on pipeLatencies of result Vector(x1800, x1799, x1798, x1788, x1789, Const(90)), schedule Vector(x1799, x1800, x1788, x1789, x1790, x1791, x1792, x1793, x1794, x1795, x1796, x1797, x1798)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1799 = SwitchCase(Block(x1798))
                      x1800 = SwitchCase(Block(Const(90)))
                      x1788 = RegRead(x1761)
                      x1789 = SRAMBankedRead(x1730,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1788)),Vec[Fix[TRUE,_10,_22]])
                      x1790 = VecApply(x1789,0)
                      x1791 = FixDiv(Const(100),x1790)
                      x1792 = FixDiv(x1791,x1790)
                      x1793 = FixDiv(x1792,x1790)
                      x1794 = FixDiv(x1793,x1790)
                      x1795 = FixDiv(x1794,x1790)
                      x1796 = FixDiv(Const(10),x1790)
                      x1797 = FixDiv(x1796,x1790)
                      x1798 = FixSub(x1795,x1797)
                    Computing fullDFS: x1800
                    cur: x1800, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1800 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x1799
                    Computing fullDFS: x1788
                    cur: x1788, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1788 = RegRead(x1761)
                    Computing fullDFS: x1789
                    [2.0 = max(0.0) + 2.0] x1789 = SRAMBankedRead(x1730,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1788)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x1798
                    Computing fullDFS: x1795
                    Computing fullDFS: x1790
                    [2.0 = max(2.0) + 0.0] x1790 = VecApply(x1789,0)
                    Computing fullDFS: x1794
                    Computing fullDFS: x1793
                    Computing fullDFS: x1792
                    Computing fullDFS: x1791
                    [22.0 = max(2.0) + 20.0] x1791 = FixDiv(Const(100),x1790)
                    [42.0 = max(2.0, 22.0) + 20.0] x1792 = FixDiv(x1791,x1790)
                    [62.0 = max(2.0, 42.0) + 20.0] x1793 = FixDiv(x1792,x1790)
                    [82.0 = max(2.0, 62.0) + 20.0] x1794 = FixDiv(x1793,x1790)
                    [102.0 = max(2.0, 82.0) + 20.0] x1795 = FixDiv(x1794,x1790)
                    Computing fullDFS: x1797
                    Computing fullDFS: x1796
                    [22.0 = max(2.0) + 20.0] x1796 = FixDiv(Const(10),x1790)
                    [42.0 = max(2.0, 22.0) + 20.0] x1797 = FixDiv(x1796,x1790)
                    [103.0 = max(102.0, 42.0) + 1.0] x1798 = FixSub(x1795,x1797)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x1799 = SwitchCase(Block(x1798))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x1800 = SwitchCase(Block(Const(90)))
                      [0.0] x1788 = RegRead(x1761)
                      [2.0] x1789 = SRAMBankedRead(x1730,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1788)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1790 = VecApply(x1789,0)
                      [22.0] x1791 = FixDiv(Const(100),x1790)
                      [22.0] x1796 = FixDiv(Const(10),x1790)
                      [42.0] x1792 = FixDiv(x1791,x1790)
                      [42.0] x1797 = FixDiv(x1796,x1790)
                      [62.0] x1793 = FixDiv(x1792,x1790)
                      [82.0] x1794 = FixDiv(x1793,x1790)
                      [102.0] x1795 = FixDiv(x1794,x1790)
                      [103.0] x1799 = SwitchCase(Block(x1798))
                      [103.0] x1798 = FixSub(x1795,x1797)
                  x1815 = Switch(List(x2949, x2950),Block(x1814))
                    Working on pipeLatencies of result Vector(x1814, x1813, x1812, x1802, x1803, Const(90)), schedule Vector(x1813, x1814, x1802, x1803, x1804, x1805, x1806, x1807, x1808, x1809, x1810, x1811, x1812)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1813 = SwitchCase(Block(x1812))
                      x1814 = SwitchCase(Block(Const(90)))
                      x1802 = RegRead(x1762)
                      x1803 = SRAMBankedRead(x1731,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1802)),Vec[Fix[TRUE,_10,_22]])
                      x1804 = VecApply(x1803,0)
                      x1805 = FixDiv(Const(100),x1804)
                      x1806 = FixDiv(x1805,x1804)
                      x1807 = FixDiv(x1806,x1804)
                      x1808 = FixDiv(x1807,x1804)
                      x1809 = FixDiv(x1808,x1804)
                      x1810 = FixDiv(Const(10),x1804)
                      x1811 = FixDiv(x1810,x1804)
                      x1812 = FixSub(x1809,x1811)
                    Computing fullDFS: x1814
                    cur: x1814, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1814 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x1813
                    Computing fullDFS: x1802
                    cur: x1802, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1802 = RegRead(x1762)
                    Computing fullDFS: x1803
                    [2.0 = max(0.0) + 2.0] x1803 = SRAMBankedRead(x1731,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1802)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x1812
                    Computing fullDFS: x1809
                    Computing fullDFS: x1804
                    [2.0 = max(2.0) + 0.0] x1804 = VecApply(x1803,0)
                    Computing fullDFS: x1808
                    Computing fullDFS: x1807
                    Computing fullDFS: x1806
                    Computing fullDFS: x1805
                    [22.0 = max(2.0) + 20.0] x1805 = FixDiv(Const(100),x1804)
                    [42.0 = max(2.0, 22.0) + 20.0] x1806 = FixDiv(x1805,x1804)
                    [62.0 = max(2.0, 42.0) + 20.0] x1807 = FixDiv(x1806,x1804)
                    [82.0 = max(2.0, 62.0) + 20.0] x1808 = FixDiv(x1807,x1804)
                    [102.0 = max(2.0, 82.0) + 20.0] x1809 = FixDiv(x1808,x1804)
                    Computing fullDFS: x1811
                    Computing fullDFS: x1810
                    [22.0 = max(2.0) + 20.0] x1810 = FixDiv(Const(10),x1804)
                    [42.0 = max(2.0, 22.0) + 20.0] x1811 = FixDiv(x1810,x1804)
                    [103.0 = max(102.0, 42.0) + 1.0] x1812 = FixSub(x1809,x1811)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x1813 = SwitchCase(Block(x1812))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x1814 = SwitchCase(Block(Const(90)))
                      [0.0] x1802 = RegRead(x1762)
                      [2.0] x1803 = SRAMBankedRead(x1731,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1802)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1804 = VecApply(x1803,0)
                      [22.0] x1805 = FixDiv(Const(100),x1804)
                      [22.0] x1810 = FixDiv(Const(10),x1804)
                      [42.0] x1806 = FixDiv(x1805,x1804)
                      [42.0] x1811 = FixDiv(x1810,x1804)
                      [62.0] x1807 = FixDiv(x1806,x1804)
                      [82.0] x1808 = FixDiv(x1807,x1804)
                      [102.0] x1809 = FixDiv(x1808,x1804)
                      [103.0] x1813 = SwitchCase(Block(x1812))
                      [103.0] x1812 = FixSub(x1809,x1811)
                  x1820 = ParallelPipe(Set(b562),Block(Const(())))
                      x1817 = UnitPipe(Set(b1670, b562),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1816), schedule Vector(x1816)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1816 = SRAMBankedWrite(x1759,Vector(x1801),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1816
                        cur: x1816, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x1816 = SRAMBankedWrite(x1759,Vector(x1801),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x1816 = SRAMBankedWrite(x1759,Vector(x1801),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x1819 = UnitPipe(Set(b1671, b562),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1818), schedule Vector(x1818)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1818 = SRAMBankedWrite(x1760,Vector(x1815),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1818
                        cur: x1818, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x1818 = SRAMBankedWrite(x1760,Vector(x1815),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x1818 = SRAMBankedWrite(x1760,Vector(x1815),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x1853 = ParallelPipe(Set(b562),Block(Const(())))
                      x1838 = UnrolledForeach(Set(b1670, b562),x1823,Block(Const(())),List(List(b1825)),List(List(b1826)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1835, x1837, x1836, x1833, x1830, x1834, x1827), schedule Vector(x1827, x1828, x1829, x1830, x1831, x1832, x1833, x1834, x1835, x1836, x1837)
                        Memories with both reads and writes in this scope: Set(x1676)
                        NonConflictSets(x1827, x1834): Set()
                        NonConflictSets(x1827, x1834): Set()
                        Found Cycle: x1827, x1834
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x1834 = SRAMBankedWrite(x1676,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          x1827 = SRAMBankedRead(x1676,Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                            x1827 = SRAMBankedRead(x1676,Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                            x1828 = VecApply(x1827,0)
                            x1829 = FixMul(x1828,Const(0.099999904632568359375))
                            x1832 = FixMul(x1829,x1831)
                            x1834 = SRAMBankedWrite(x1676,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                        Done finding cycles: Vector(AccumTriple(x1676,x1827,x1834)), Map(x1832 -> List(AccumTriple(x1676,x1827,x1834)), x1829 -> List(AccumTriple(x1676,x1827,x1834)), x1834 -> List(AccumTriple(x1676,x1827,x1834)), x1828 -> List(AccumTriple(x1676,x1827,x1834)), x1827 -> List(AccumTriple(x1676,x1827,x1834)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1827 = SRAMBankedRead(x1676,Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                          x1828 = VecApply(x1827,0)
                          x1829 = FixMul(x1828,Const(0.099999904632568359375))
                          x1830 = SRAMBankedRead(x1759,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                          x1831 = VecApply(x1830,0)
                          x1832 = FixMul(x1829,x1831)
                          x1833 = SRAMBankedWrite(x1677,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          x1834 = SRAMBankedWrite(x1676,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          x1835 = SRAMBankedWrite(x1675,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          x1836 = SRAMBankedWrite(x1674,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          x1837 = SRAMBankedWrite(x1673,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1835
                        Computing fullDFS: x1832
                        Computing fullDFS: x1829
                        Computing fullDFS: x1828
                        Computing fullDFS: x1827
                        cur: x1827, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x1676,x1827,x1834))
                        [2.0 = max(0) + 2.0] x1827 = SRAMBankedRead(x1676,Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        cycle deps of x1828: Vector(x1827, x1828)
                        [2.0 = max(2.0) + 0.0] x1828 = VecApply(x1827,0)[cycle]
                        cycle deps of x1829: Vector(x1827, x1828, x1829)
                        [8.0 = max(2.0) + 6.0] x1829 = FixMul(x1828,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x1831
                        Computing fullDFS: x1830
                        cur: x1830, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1830 = SRAMBankedRead(x1759,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1831 = VecApply(x1830,0)
                        cycle deps of x1832: Vector(x1827, x1828, x1829, x1832)
                        [14.0 = max(8.0, 2.0) + 6.0] x1832 = FixMul(x1829,x1831)[cycle]
                        cycle deps of x1835: Vector(x1827, x1828, x1829, x1832, x1835)
                        [15.0 = max(14.0) + 1.0] x1835 = SRAMBankedWrite(x1675,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                        Computing fullDFS: x1837
                        cycle deps of x1837: Vector(x1827, x1828, x1829, x1832, x1837)
                        [15.0 = max(14.0) + 1.0] x1837 = SRAMBankedWrite(x1673,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                        Computing fullDFS: x1836
                        cycle deps of x1836: Vector(x1827, x1828, x1829, x1832, x1836)
                        [15.0 = max(14.0) + 1.0] x1836 = SRAMBankedWrite(x1674,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                        Computing fullDFS: x1833
                        cycle deps of x1833: Vector(x1827, x1828, x1829, x1832, x1833)
                        [15.0 = max(14.0) + 1.0] x1833 = SRAMBankedWrite(x1677,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                        Computing fullDFS: x1834
                        cycle deps of x1834: Vector(x1827, x1827, x1828, x1829, x1832, x1834)
                        [15.0 = max(2.0, 14.0) + 1.0] x1834 = SRAMBankedWrite(x1676,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))[cycle]
                        Cycle #0: write: x1834, cycle: x1827, x1827, x1828, x1829, x1832, x1834
                        x1832 = FixMul(x1829,x1831) [14.0]
                          [14.0 = 15.0 - 1.0] x1833 = SRAMBankedWrite(x1677,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          [14.0 = 15.0 - 1.0] x1834 = SRAMBankedWrite(x1676,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          [14.0 = 15.0 - 1.0] x1835 = SRAMBankedWrite(x1675,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          [14.0 = 15.0 - 1.0] x1836 = SRAMBankedWrite(x1674,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          [14.0 = 15.0 - 1.0] x1837 = SRAMBankedWrite(x1673,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          [14.0]
                        x1829 = FixMul(x1828,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x1832 = FixMul(x1829,x1831)
                          [8.0]
                        x1828 = VecApply(x1827,0) [2.0]
                          [2.0 = 8.0 - 6.0] x1829 = FixMul(x1828,Const(0.099999904632568359375))
                          [2.0]
                        x1827 = SRAMBankedRead(x1676,Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1828 = VecApply(x1827,0)
                          [2.0]
                        x1827 = SRAMBankedRead(x1676,Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1828 = VecApply(x1827,0)
                          [2.0]
                        Cycles: Map(x1833 -> Vector(x1827, x1828, x1829, x1832, x1833), x1832 -> Vector(x1827, x1828, x1829, x1832), x1835 -> Vector(x1827, x1828, x1829, x1832, x1835), x1829 -> Vector(x1827, x1828, x1829), x1837 -> Vector(x1827, x1828, x1829, x1832, x1837), x1834 -> Vector(x1827, x1827, x1828, x1829, x1832, x1834), x1828 -> Vector(x1827, x1828), x1836 -> Vector(x1827, x1828, x1829, x1832, x1836), x1827 -> List(x1827))
                        pseudo cycles for x1676:
                        Multiplexed accesses for memory x1676: 
                          x1827 = SRAMBankedRead(x1676,Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                        Access: x1827 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1827 = SRAMBankedRead(x1676,Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x1676: 
                          x1834 = SRAMBankedWrite(x1676,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                        Access: x1834 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1834 = SRAMBankedWrite(x1676,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x1827),x1676,1.0)
                        AAACycle(Vector(x1834),x1676,1.0)
                        WARCycle(x1827,x1834,x1676,Vector(x1827, x1827, x1828, x1829, x1832, x1834),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x1827 = SRAMBankedRead(x1676,Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1828 = VecApply(x1827,0)
                          [2.0] x1830 = SRAMBankedRead(x1759,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1831 = VecApply(x1830,0)
                          [8.0] x1829 = FixMul(x1828,Const(0.099999904632568359375))
                          [14.0] x1832 = FixMul(x1829,x1831)
                          [15.0] x1833 = SRAMBankedWrite(x1677,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          [15.0] x1834 = SRAMBankedWrite(x1676,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          [15.0] x1835 = SRAMBankedWrite(x1675,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          [15.0] x1836 = SRAMBankedWrite(x1674,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                          [15.0] x1837 = SRAMBankedWrite(x1673,Vector(x1832),Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)))
                        Cycle #0 on x1676: 
                          x1676 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                      x1852 = UnrolledForeach(Set(b1671, b562),x1824,Block(Const(())),List(List(b1839)),List(List(b1840)),None)
                        Working on pipeLatencies of result Vector(x1850, Const(()), x1847, x1851, x1841, x1849, x1844, x1848), schedule Vector(x1841, x1842, x1843, x1844, x1845, x1846, x1847, x1848, x1849, x1850, x1851)
                        Memories with both reads and writes in this scope: Set(x1681)
                        NonConflictSets(x1841, x1851): Set()
                        NonConflictSets(x1841, x1851): Set()
                        Found Cycle: x1841, x1851
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x1851 = SRAMBankedWrite(x1681,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          x1841 = SRAMBankedRead(x1681,Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                            x1841 = SRAMBankedRead(x1681,Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                            x1842 = VecApply(x1841,0)
                            x1843 = FixMul(x1842,Const(0.099999904632568359375))
                            x1846 = FixMul(x1843,x1845)
                            x1851 = SRAMBankedWrite(x1681,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                        Done finding cycles: Vector(AccumTriple(x1681,x1841,x1851)), Map(x1851 -> List(AccumTriple(x1681,x1841,x1851)), x1842 -> List(AccumTriple(x1681,x1841,x1851)), x1841 -> List(AccumTriple(x1681,x1841,x1851)), x1846 -> List(AccumTriple(x1681,x1841,x1851)), x1843 -> List(AccumTriple(x1681,x1841,x1851)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1841 = SRAMBankedRead(x1681,Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                          x1842 = VecApply(x1841,0)
                          x1843 = FixMul(x1842,Const(0.099999904632568359375))
                          x1844 = SRAMBankedRead(x1760,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                          x1845 = VecApply(x1844,0)
                          x1846 = FixMul(x1843,x1845)
                          x1847 = SRAMBankedWrite(x1682,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          x1848 = SRAMBankedWrite(x1680,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          x1849 = SRAMBankedWrite(x1679,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          x1850 = SRAMBankedWrite(x1678,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          x1851 = SRAMBankedWrite(x1681,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                        Computing fullDFS: x1850
                        Computing fullDFS: x1846
                        Computing fullDFS: x1843
                        Computing fullDFS: x1842
                        Computing fullDFS: x1841
                        cur: x1841, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x1681,x1841,x1851))
                        [2.0 = max(0) + 2.0] x1841 = SRAMBankedRead(x1681,Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        cycle deps of x1842: Vector(x1841, x1842)
                        [2.0 = max(2.0) + 0.0] x1842 = VecApply(x1841,0)[cycle]
                        cycle deps of x1843: Vector(x1841, x1842, x1843)
                        [8.0 = max(2.0) + 6.0] x1843 = FixMul(x1842,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x1845
                        Computing fullDFS: x1844
                        cur: x1844, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1844 = SRAMBankedRead(x1760,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1845 = VecApply(x1844,0)
                        cycle deps of x1846: Vector(x1841, x1842, x1843, x1846)
                        [14.0 = max(8.0, 2.0) + 6.0] x1846 = FixMul(x1843,x1845)[cycle]
                        cycle deps of x1850: Vector(x1841, x1842, x1843, x1846, x1850)
                        [15.0 = max(14.0) + 1.0] x1850 = SRAMBankedWrite(x1678,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1847
                        cycle deps of x1847: Vector(x1841, x1842, x1843, x1846, x1847)
                        [15.0 = max(14.0) + 1.0] x1847 = SRAMBankedWrite(x1682,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                        Computing fullDFS: x1851
                        cycle deps of x1851: Vector(x1841, x1841, x1842, x1843, x1846, x1851)
                        [15.0 = max(2.0, 14.0) + 1.0] x1851 = SRAMBankedWrite(x1681,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))[cycle]
                        Computing fullDFS: x1849
                        cycle deps of x1849: Vector(x1841, x1842, x1843, x1846, x1849)
                        [15.0 = max(14.0) + 1.0] x1849 = SRAMBankedWrite(x1679,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                        Computing fullDFS: x1848
                        cycle deps of x1848: Vector(x1841, x1842, x1843, x1846, x1848)
                        [15.0 = max(14.0) + 1.0] x1848 = SRAMBankedWrite(x1680,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                        Cycle #0: write: x1851, cycle: x1841, x1841, x1842, x1843, x1846, x1851
                        x1846 = FixMul(x1843,x1845) [14.0]
                          [14.0 = 15.0 - 1.0] x1847 = SRAMBankedWrite(x1682,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          [14.0 = 15.0 - 1.0] x1848 = SRAMBankedWrite(x1680,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          [14.0 = 15.0 - 1.0] x1849 = SRAMBankedWrite(x1679,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          [14.0 = 15.0 - 1.0] x1850 = SRAMBankedWrite(x1678,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          [14.0 = 15.0 - 1.0] x1851 = SRAMBankedWrite(x1681,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          [14.0]
                        x1843 = FixMul(x1842,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x1846 = FixMul(x1843,x1845)
                          [8.0]
                        x1842 = VecApply(x1841,0) [2.0]
                          [2.0 = 8.0 - 6.0] x1843 = FixMul(x1842,Const(0.099999904632568359375))
                          [2.0]
                        x1841 = SRAMBankedRead(x1681,Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1842 = VecApply(x1841,0)
                          [2.0]
                        x1841 = SRAMBankedRead(x1681,Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x1842 = VecApply(x1841,0)
                          [2.0]
                        Cycles: Map(x1851 -> Vector(x1841, x1841, x1842, x1843, x1846, x1851), x1842 -> Vector(x1841, x1842), x1850 -> Vector(x1841, x1842, x1843, x1846, x1850), x1841 -> List(x1841), x1847 -> Vector(x1841, x1842, x1843, x1846, x1847), x1846 -> Vector(x1841, x1842, x1843, x1846), x1849 -> Vector(x1841, x1842, x1843, x1846, x1849), x1843 -> Vector(x1841, x1842, x1843), x1848 -> Vector(x1841, x1842, x1843, x1846, x1848))
                        pseudo cycles for x1681:
                        Multiplexed accesses for memory x1681: 
                          x1841 = SRAMBankedRead(x1681,Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                        Access: x1841 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1841 = SRAMBankedRead(x1681,Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x1681: 
                          x1851 = SRAMBankedWrite(x1681,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                        Access: x1851 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x1851 = SRAMBankedWrite(x1681,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x1841),x1681,1.0)
                        AAACycle(Vector(x1851),x1681,1.0)
                        WARCycle(x1841,x1851,x1681,Vector(x1841, x1841, x1842, x1843, x1846, x1851),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x1841 = SRAMBankedRead(x1681,Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1842 = VecApply(x1841,0)
                          [2.0] x1844 = SRAMBankedRead(x1760,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1845 = VecApply(x1844,0)
                          [8.0] x1843 = FixMul(x1842,Const(0.099999904632568359375))
                          [14.0] x1846 = FixMul(x1843,x1845)
                          [15.0] x1847 = SRAMBankedWrite(x1682,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          [15.0] x1848 = SRAMBankedWrite(x1680,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          [15.0] x1849 = SRAMBankedWrite(x1679,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          [15.0] x1850 = SRAMBankedWrite(x1678,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                          [15.0] x1851 = SRAMBankedWrite(x1681,Vector(x1846),Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)))
                        Cycle #0 on x1681: 
                          x1681 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                  x1873 = UnrolledForeach(Set(),x622,Block(Const(())),Vector(List(b1669)),Vector(List(b1672)),None)
                    Working on pipeLatencies of result Vector(Const(()), x1872, x1871, x1858, x1856, x1854), schedule Vector(x1854, x1855, x1856, x1857, x1858, x1859, x1860, x1862, x1864, x1865, x1866, x1868, x1869, x1870, x1871, x1872)
                    Memories with both reads and writes in this scope: Set(x577)
                    NonConflictSets(x1858, x1871): Set()
                    NonConflictSets(x1858, x1871): Set()
                    Found Cycle: x1858, x1871
                    Exclusions: Set() Set() 
                    Found cycle between: 
                      x1871 = SRAMBankedWrite(x577,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)))
                      x1858 = SRAMBankedRead(x577,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
                        x1858 = SRAMBankedRead(x577,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
                        x1859 = VecApply(x1858,0)
                        x1869 = FixAdd(x1866,x1859)
                        x1870 = Mux(x1868,x1866,x1869)
                        x1871 = SRAMBankedWrite(x577,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)))
                    Done finding cycles: Vector(AccumTriple(x577,x1858,x1871)), Map(x1859 -> List(AccumTriple(x577,x1858,x1871)), x1871 -> List(AccumTriple(x577,x1858,x1871)), x1858 -> List(AccumTriple(x577,x1858,x1871)), x1870 -> List(AccumTriple(x577,x1858,x1871)), x1869 -> List(AccumTriple(x577,x1858,x1871)))
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x1854 = SRAMBankedRead(x1677,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
                      x1855 = VecApply(x1854,0)
                      x1856 = SRAMBankedRead(x1682,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
                      x1857 = VecApply(x1856,0)
                      x1858 = SRAMBankedRead(x577,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
                      x1859 = VecApply(x1858,0)
                      x1860 = And(b1672,b562)
                      x1862 = And(b1671,b562)
                      x1864 = And(x1862,x1860)
                      x1865 = FixAdd(x1855,x1857)
                      x1866 = Mux(x1864,x1865,x1855)
                      x1868 = FixEql(b1667,Const(0))
                      x1869 = FixAdd(x1866,x1859)
                      x1870 = Mux(x1868,x1866,x1869)
                      x1871 = SRAMBankedWrite(x577,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)))
                      x1872 = SRAMBankedWrite(x578,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)))
                    Computing fullDFS: Const(())
                    Computing fullDFS: x1872
                    Computing fullDFS: x1870
                    Computing fullDFS: x1866
                    Computing fullDFS: x1855
                    Computing fullDFS: x1854
                    cur: x1854, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x1854 = SRAMBankedRead(x1677,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x1855 = VecApply(x1854,0)
                    Computing fullDFS: x1864
                    Computing fullDFS: x1860
                    cur: x1860, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1860 = And(b1672,b562)
                    Computing fullDFS: x1862
                    cur: x1862, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1862 = And(b1671,b562)
                    [0.4 = max(0.2, 0.2) + 0.2] x1864 = And(x1862,x1860)
                    Computing fullDFS: x1865
                    Computing fullDFS: x1857
                    Computing fullDFS: x1856
                    cur: x1856, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x1856 = SRAMBankedRead(x1682,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x1857 = VecApply(x1856,0)
                    [3.0 = max(2.0, 2.0) + 1.0] x1865 = FixAdd(x1855,x1857)
                    [3.5 = max(2.0, 0.4, 3.0) + 0.5] x1866 = Mux(x1864,x1865,x1855)
                    Computing fullDFS: x1868
                    cur: x1868, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x1868 = FixEql(b1667,Const(0))
                    Computing fullDFS: x1869
                    Computing fullDFS: x1859
                    Computing fullDFS: x1858
                    cur: x1858, inReduce: true, latency: 2.0
                    Known Cycles: List(AccumTriple(x577,x1858,x1871))
                    [2.0 = max(0) + 2.0] x1858 = SRAMBankedRead(x577,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])[cycle]
                    cycle deps of x1859: Vector(x1858, x1859)
                    [2.0 = max(2.0) + 0.0] x1859 = VecApply(x1858,0)[cycle]
                    cycle deps of x1869: Vector(x1858, x1859, x1869)
                    [4.5 = max(2.0, 3.5) + 1.0] x1869 = FixAdd(x1866,x1859)[cycle]
                    cycle deps of x1870: Vector(x1858, x1859, x1869, x1870)
                    [5.0 = max(3.5, 0.2, 4.5) + 0.5] x1870 = Mux(x1868,x1866,x1869)[cycle]
                    cycle deps of x1872: Vector(x1858, x1859, x1869, x1870, x1872)
                    [6.0 = max(5.0) + 1.0] x1872 = SRAMBankedWrite(x578,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)))
                    Computing fullDFS: x1871
                    cycle deps of x1871: Vector(x1858, x1858, x1859, x1869, x1870, x1871)
                    [6.0 = max(2.0, 5.0) + 1.0] x1871 = SRAMBankedWrite(x577,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)))[cycle]
                    Cycle #0: write: x1871, cycle: x1858, x1858, x1859, x1869, x1870, x1871
                    x1870 = Mux(x1868,x1866,x1869) [5.0]
                      [5.0 = 6.0 - 1.0] x1871 = SRAMBankedWrite(x577,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)))
                      [5.0 = 6.0 - 1.0] x1872 = SRAMBankedWrite(x578,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)))
                      [5.0]
                    x1869 = FixAdd(x1866,x1859) [4.5]
                      [4.5 = 5.0 - 0.5] x1870 = Mux(x1868,x1866,x1869)
                      [4.5]
                    x1859 = VecApply(x1858,0) [2.0]
                      [3.5 = 4.5 - 1.0] x1869 = FixAdd(x1866,x1859)
                      [3.5]
                    x1858 = SRAMBankedRead(x577,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                      [3.5 = 3.5 - 0.0] x1859 = VecApply(x1858,0)
                      [3.5]
                    x1858 = SRAMBankedRead(x577,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]]) [3.5]
                      [3.5 = 3.5 - 0.0] x1859 = VecApply(x1858,0)
                      [3.5]
                    Cycles: Map(x1859 -> Vector(x1858, x1859), x1871 -> Vector(x1858, x1858, x1859, x1869, x1870, x1871), x1858 -> List(x1858), x1870 -> Vector(x1858, x1859, x1869, x1870), x1869 -> Vector(x1858, x1859, x1869), x1872 -> Vector(x1858, x1859, x1869, x1870, x1872))
                    pseudo cycles for x577:
                    Multiplexed accesses for memory x577: 
                      x1858 = SRAMBankedRead(x577,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
                    Access: x1858 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x1858 = SRAMBankedRead(x577,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 3.5 due to muxing.
                    Multiplexed accesses for memory x577: 
                      x1871 = SRAMBankedWrite(x577,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)))
                    Access: x1871 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x1871 = SRAMBankedWrite(x577,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562))) by 0.0 to 6.0 due to muxing.
                    Found cycles: 
                    AAACycle(Vector(x1858),x577,1.0)
                    AAACycle(Vector(x1871),x577,1.0)
                    WARCycle(x1858,x1871,x577,Vector(x1858, x1858, x1859, x1869, x1870, x1871),5.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                      Schedule after pipeLatencies calculation:
                      [0.2] x1860 = And(b1672,b562)
                      [0.2] x1862 = And(b1671,b562)
                      [0.2] x1868 = FixEql(b1667,Const(0))
                      [0.4] x1864 = And(x1862,x1860)
                      [2.0] x1854 = SRAMBankedRead(x1677,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1855 = VecApply(x1854,0)
                      [2.0] x1856 = SRAMBankedRead(x1682,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1857 = VecApply(x1856,0)
                      [3.0] x1865 = FixAdd(x1855,x1857)
                      [3.5] x1858 = SRAMBankedRead(x577,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]])
                      [3.5] x1859 = VecApply(x1858,0)
                      [3.5] x1866 = Mux(x1864,x1865,x1855)
                      [4.5] x1869 = FixAdd(x1866,x1859)
                      [5.0] x1870 = Mux(x1868,x1866,x1869)
                      [6.0] x1871 = SRAMBankedWrite(x577,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)))
                      [6.0] x1872 = SRAMBankedWrite(x578,Vector(x1870),Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)))
                    Cycle #0 on x577: 
                      x577 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [accum_0]
                      disjoint:     true
                      no visible intermediates:
                        closed cycle:     false
                        no intermediates: true
                        is local mem:     true
                        number of writers:  1
                        outer reduce:     false
                        accum type:       Fold (if reduce, overrides no intermediates)
              x2082 = UnrolledReduce(Set(b563),x603,Block((x579) => Const(())),List(List(b1875, b1876)),List(List(b1878, b1879)),None)
                  x1937 = ParallelPipe(Set(b563),Block(Const(())))
                      x1915 = UnrolledForeach(Set(b1878, b563),x1893,Block(Const(())),List(List(b1895)),List(List(b1896)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1914, x1907, x1911, x1910, x1901, x1913, x1912), schedule Vector(x1898, x3049, x3050, x1900, x1901, x1902, x1904, x3051, x3052, x1906, x1907, x1908, x1909, x1910, x1911, x1912, x1913, x1914)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1898 = FixDiv(b553,Const(10))
                          x3049 = FixSLA(x1898,Const(1))
                          x3050 = FixAdd(x3049,x1898)
                          x1900 = FixAdd(x3050,b1895)
                          x1901 = SRAMBankedRead(x471,Vector(List(Const(6), Const(0))),Vector(x1900),Vector(Set(b1896, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                          x1902 = VecApply(x1901,0)
                          x1904 = FixDivSRA(b1875,Const(1))
                          x3051 = FixSLA(x1904,Const(1))
                          x3052 = FixAdd(x3051,x1904)
                          x1906 = FixAdd(x3052,b1895)
                          x1907 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1906),Vector(Set(b1896, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                          x1908 = VecApply(x1907,0)
                          x1909 = FixSub(x1902,x1908)
                          x1910 = SRAMBankedWrite(x1882,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                          x1911 = SRAMBankedWrite(x1883,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                          x1912 = SRAMBankedWrite(x1884,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                          x1913 = SRAMBankedWrite(x1881,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                          x1914 = SRAMBankedWrite(x1885,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1914
                        Computing fullDFS: x1909
                        Computing fullDFS: x1902
                        Computing fullDFS: x1901
                        Computing fullDFS: x1900
                        Computing fullDFS: x3050
                        Computing fullDFS: x1898
                        cur: x1898, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x1898 = FixDiv(b553,Const(10))
                        Computing fullDFS: x3049
                        [20.2 = max(20.0) + 0.2] x3049 = FixSLA(x1898,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3050 = FixAdd(x3049,x1898)
                        [22.2 = max(21.2) + 1.0] x1900 = FixAdd(x3050,b1895)
                        [24.2 = max(22.2) + 2.0] x1901 = SRAMBankedRead(x471,Vector(List(Const(6), Const(0))),Vector(x1900),Vector(Set(b1896, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x1902 = VecApply(x1901,0)
                        Computing fullDFS: x1908
                        Computing fullDFS: x1907
                        Computing fullDFS: x1906
                        Computing fullDFS: x3052
                        Computing fullDFS: x1904
                        cur: x1904, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x1904 = FixDivSRA(b1875,Const(1))
                        Computing fullDFS: x3051
                        [0.4 = max(0.2) + 0.2] x3051 = FixSLA(x1904,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3052 = FixAdd(x3051,x1904)
                        [2.4 = max(1.4) + 1.0] x1906 = FixAdd(x3052,b1895)
                        [4.4 = max(2.4) + 2.0] x1907 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1906),Vector(Set(b1896, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x1908 = VecApply(x1907,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x1909 = FixSub(x1902,x1908)
                        [26.2 = max(25.2) + 1.0] x1914 = SRAMBankedWrite(x1885,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                        Computing fullDFS: x1911
                        [26.2 = max(25.2) + 1.0] x1911 = SRAMBankedWrite(x1883,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                        Computing fullDFS: x1910
                        [26.2 = max(25.2) + 1.0] x1910 = SRAMBankedWrite(x1882,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                        Computing fullDFS: x1913
                        [26.2 = max(25.2) + 1.0] x1913 = SRAMBankedWrite(x1881,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                        Computing fullDFS: x1912
                        [26.2 = max(25.2) + 1.0] x1912 = SRAMBankedWrite(x1884,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x1904 = FixDivSRA(b1875,Const(1))
                          [0.4] x3051 = FixSLA(x1904,Const(1))
                          [1.4] x3052 = FixAdd(x3051,x1904)
                          [2.4] x1906 = FixAdd(x3052,b1895)
                          [4.4] x1907 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1906),Vector(Set(b1896, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x1908 = VecApply(x1907,0)
                          [20.0] x1898 = FixDiv(b553,Const(10))
                          [20.2] x3049 = FixSLA(x1898,Const(1))
                          [21.2] x3050 = FixAdd(x3049,x1898)
                          [22.2] x1900 = FixAdd(x3050,b1895)
                          [24.2] x1901 = SRAMBankedRead(x471,Vector(List(Const(6), Const(0))),Vector(x1900),Vector(Set(b1896, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x1902 = VecApply(x1901,0)
                          [25.2] x1909 = FixSub(x1902,x1908)
                          [26.2] x1910 = SRAMBankedWrite(x1882,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                          [26.2] x1911 = SRAMBankedWrite(x1883,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                          [26.2] x1912 = SRAMBankedWrite(x1884,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                          [26.2] x1913 = SRAMBankedWrite(x1881,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                          [26.2] x1914 = SRAMBankedWrite(x1885,Vector(x1909),Vector(List(Const(0))),Vector(b1895),Vector(Set(b1896, b1878, b563)))
                      x1936 = UnrolledForeach(Set(b1879, b563),x1894,Block(Const(())),List(List(b1916)),List(List(b1917)),None)
                        Working on pipeLatencies of result Vector(Const(()), x1935, x1922, x1931, x1928, x1932, x1933, x1934), schedule Vector(x1919, x3053, x3054, x1921, x1922, x1923, x1925, x3055, x3056, x1927, x1928, x1929, x1930, x1931, x1932, x1933, x1934, x1935)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1919 = FixDiv(b553,Const(10))
                          x3053 = FixSLA(x1919,Const(1))
                          x3054 = FixAdd(x3053,x1919)
                          x1921 = FixAdd(x3054,b1916)
                          x1922 = SRAMBankedRead(x471,Vector(List(Const(6), Const(0))),Vector(x1921),Vector(Set(b1917, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                          x1923 = VecApply(x1922,0)
                          x1925 = FixDivSRA(b1876,Const(1))
                          x3055 = FixSLA(x1925,Const(1))
                          x3056 = FixAdd(x3055,x1925)
                          x1927 = FixAdd(x3056,b1916)
                          x1928 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1927),Vector(Set(b1917, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                          x1929 = VecApply(x1928,0)
                          x1930 = FixSub(x1923,x1929)
                          x1931 = SRAMBankedWrite(x1887,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                          x1932 = SRAMBankedWrite(x1890,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                          x1933 = SRAMBankedWrite(x1886,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                          x1934 = SRAMBankedWrite(x1888,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                          x1935 = SRAMBankedWrite(x1889,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1935
                        Computing fullDFS: x1930
                        Computing fullDFS: x1923
                        Computing fullDFS: x1922
                        Computing fullDFS: x1921
                        Computing fullDFS: x3054
                        Computing fullDFS: x1919
                        cur: x1919, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x1919 = FixDiv(b553,Const(10))
                        Computing fullDFS: x3053
                        [20.2 = max(20.0) + 0.2] x3053 = FixSLA(x1919,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3054 = FixAdd(x3053,x1919)
                        [22.2 = max(21.2) + 1.0] x1921 = FixAdd(x3054,b1916)
                        [24.2 = max(22.2) + 2.0] x1922 = SRAMBankedRead(x471,Vector(List(Const(6), Const(0))),Vector(x1921),Vector(Set(b1917, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x1923 = VecApply(x1922,0)
                        Computing fullDFS: x1929
                        Computing fullDFS: x1928
                        Computing fullDFS: x1927
                        Computing fullDFS: x3056
                        Computing fullDFS: x1925
                        cur: x1925, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x1925 = FixDivSRA(b1876,Const(1))
                        Computing fullDFS: x3055
                        [0.4 = max(0.2) + 0.2] x3055 = FixSLA(x1925,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3056 = FixAdd(x3055,x1925)
                        [2.4 = max(1.4) + 1.0] x1927 = FixAdd(x3056,b1916)
                        [4.4 = max(2.4) + 2.0] x1928 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1927),Vector(Set(b1917, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x1929 = VecApply(x1928,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x1930 = FixSub(x1923,x1929)
                        [26.2 = max(25.2) + 1.0] x1935 = SRAMBankedWrite(x1889,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                        Computing fullDFS: x1931
                        [26.2 = max(25.2) + 1.0] x1931 = SRAMBankedWrite(x1887,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                        Computing fullDFS: x1932
                        [26.2 = max(25.2) + 1.0] x1932 = SRAMBankedWrite(x1890,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                        Computing fullDFS: x1933
                        [26.2 = max(25.2) + 1.0] x1933 = SRAMBankedWrite(x1886,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                        Computing fullDFS: x1934
                        [26.2 = max(25.2) + 1.0] x1934 = SRAMBankedWrite(x1888,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x1925 = FixDivSRA(b1876,Const(1))
                          [0.4] x3055 = FixSLA(x1925,Const(1))
                          [1.4] x3056 = FixAdd(x3055,x1925)
                          [2.4] x1927 = FixAdd(x3056,b1916)
                          [4.4] x1928 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1927),Vector(Set(b1917, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x1929 = VecApply(x1928,0)
                          [20.0] x1919 = FixDiv(b553,Const(10))
                          [20.2] x3053 = FixSLA(x1919,Const(1))
                          [21.2] x3054 = FixAdd(x3053,x1919)
                          [22.2] x1921 = FixAdd(x3054,b1916)
                          [24.2] x1922 = SRAMBankedRead(x471,Vector(List(Const(6), Const(0))),Vector(x1921),Vector(Set(b1917, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x1923 = VecApply(x1922,0)
                          [25.2] x1930 = FixSub(x1923,x1929)
                          [26.2] x1931 = SRAMBankedWrite(x1887,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                          [26.2] x1932 = SRAMBankedWrite(x1890,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                          [26.2] x1933 = SRAMBankedWrite(x1886,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                          [26.2] x1934 = SRAMBankedWrite(x1888,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                          [26.2] x1935 = SRAMBankedWrite(x1889,Vector(x1930),Vector(List(Const(0))),Vector(b1916),Vector(Set(b1917, b1879, b563)))
                  x1966 = ParallelPipe(Set(b563),Block(Const(())))
                      x1952 = UnitPipe(Set(b1878, b563),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1943, x1951, x1947, x1940), schedule Vector(x1940, x1941, x1943, x1944, x1945, x3057, x1947, x1948, x3058, x1951)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1940 = SRAMBankedRead(x1881,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1941 = VecApply(x1940,0)
                          x1943 = SRAMBankedRead(x1882,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1944 = VecApply(x1943,0)
                          x1945 = FixMul(x1944,x1944)
                          x3057 = FixFMA(x1941,x1941,x1945)
                          x1947 = SRAMBankedRead(x1883,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1948 = VecApply(x1947,0)
                          x3058 = FixFMA(x1948,x1948,x3057)
                          x1951 = SRAMBankedWrite(x1938,Vector(x3058),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1943
                        cur: x1943, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1943 = SRAMBankedRead(x1882,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1951
                        Computing fullDFS: x3058
                        Computing fullDFS: x3057
                        Computing fullDFS: x1941
                        Computing fullDFS: x1940
                        cur: x1940, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1940 = SRAMBankedRead(x1881,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1941 = VecApply(x1940,0)
                        Computing fullDFS: x1945
                        Computing fullDFS: x1944
                        [2.0 = max(2.0) + 0.0] x1944 = VecApply(x1943,0)
                        [8.0 = max(2.0) + 6.0] x1945 = FixMul(x1944,x1944)
                        [14.0 = max(2.0, 8.0) + 6.0] x3057 = FixFMA(x1941,x1941,x1945)
                        Computing fullDFS: x1948
                        Computing fullDFS: x1947
                        cur: x1947, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1947 = SRAMBankedRead(x1883,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x1948 = VecApply(x1947,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3058 = FixFMA(x1948,x1948,x3057)
                        [21.0 = max(20.0) + 1.0] x1951 = SRAMBankedWrite(x1938,Vector(x3058),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1940 = SRAMBankedRead(x1881,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1941 = VecApply(x1940,0)
                          [2.0] x1943 = SRAMBankedRead(x1882,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1944 = VecApply(x1943,0)
                          [2.0] x1947 = SRAMBankedRead(x1883,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1948 = VecApply(x1947,0)
                          [8.0] x1945 = FixMul(x1944,x1944)
                          [14.0] x3057 = FixFMA(x1941,x1941,x1945)
                          [20.0] x3058 = FixFMA(x1948,x1948,x3057)
                          [21.0] x1951 = SRAMBankedWrite(x1938,Vector(x3058),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x1965 = UnitPipe(Set(b1879, b563),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1956, x1960, x1953, x1964), schedule Vector(x1953, x1954, x1956, x1957, x1958, x3059, x1960, x1961, x3060, x1964)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1953 = SRAMBankedRead(x1886,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1954 = VecApply(x1953,0)
                          x1956 = SRAMBankedRead(x1887,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1957 = VecApply(x1956,0)
                          x1958 = FixMul(x1957,x1957)
                          x3059 = FixFMA(x1954,x1954,x1958)
                          x1960 = SRAMBankedRead(x1888,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1961 = VecApply(x1960,0)
                          x3060 = FixFMA(x1961,x1961,x3059)
                          x1964 = SRAMBankedWrite(x1939,Vector(x3060),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1956
                        cur: x1956, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1956 = SRAMBankedRead(x1887,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1960
                        cur: x1960, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1960 = SRAMBankedRead(x1888,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1953
                        cur: x1953, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1953 = SRAMBankedRead(x1886,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1964
                        Computing fullDFS: x3060
                        Computing fullDFS: x3059
                        Computing fullDFS: x1954
                        [2.0 = max(2.0) + 0.0] x1954 = VecApply(x1953,0)
                        Computing fullDFS: x1958
                        Computing fullDFS: x1957
                        [2.0 = max(2.0) + 0.0] x1957 = VecApply(x1956,0)
                        [8.0 = max(2.0) + 6.0] x1958 = FixMul(x1957,x1957)
                        [14.0 = max(2.0, 8.0) + 6.0] x3059 = FixFMA(x1954,x1954,x1958)
                        Computing fullDFS: x1961
                        [2.0 = max(2.0) + 0.0] x1961 = VecApply(x1960,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3060 = FixFMA(x1961,x1961,x3059)
                        [21.0 = max(20.0) + 1.0] x1964 = SRAMBankedWrite(x1939,Vector(x3060),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1953 = SRAMBankedRead(x1886,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1954 = VecApply(x1953,0)
                          [2.0] x1956 = SRAMBankedRead(x1887,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1957 = VecApply(x1956,0)
                          [2.0] x1960 = SRAMBankedRead(x1888,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1961 = VecApply(x1960,0)
                          [8.0] x1958 = FixMul(x1957,x1957)
                          [14.0] x3059 = FixFMA(x1954,x1954,x1958)
                          [20.0] x3060 = FixFMA(x1961,x1961,x3059)
                          [21.0] x1964 = SRAMBankedWrite(x1939,Vector(x3060),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x1991 = ParallelPipe(Set(b563),Block(Const(())))
                      x1981 = UnitPipe(Set(b1878, b563),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1973, x1979, x1980), schedule Vector(x1973, x1974, x1975, x1976, x1977, x1978, x1979, x1980)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1973 = SRAMBankedRead(x1938,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1974 = VecApply(x1973,0)
                          x1975 = FixLst(Const(0),x1974)
                          x1976 = FixLst(Const(1),x1974)
                          x1977 = And(x1975,x1976)
                          x1978 = Not(x1977)
                          x1979 = RegWrite(x1969,x1977,Set())
                          x1980 = RegWrite(x1971,x1978,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1973
                        cur: x1973, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1973 = SRAMBankedRead(x1938,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1979
                        Computing fullDFS: x1977
                        Computing fullDFS: x1975
                        Computing fullDFS: x1974
                        [2.0 = max(2.0) + 0.0] x1974 = VecApply(x1973,0)
                        [2.4 = max(2.0) + 0.4] x1975 = FixLst(Const(0),x1974)
                        Computing fullDFS: x1976
                        [2.4 = max(2.0) + 0.4] x1976 = FixLst(Const(1),x1974)
                        [2.6 = max(2.4, 2.4) + 0.2] x1977 = And(x1975,x1976)
                        [3.6 = max(2.6) + 1.0] x1979 = RegWrite(x1969,x1977,Set())
                        Computing fullDFS: x1980
                        Computing fullDFS: x1978
                        [2.8000000000000003 = max(2.6) + 0.2] x1978 = Not(x1977)
                        [3.8 = max(2.8) + 1.0] x1980 = RegWrite(x1971,x1978,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1973 = SRAMBankedRead(x1938,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1974 = VecApply(x1973,0)
                          [2.4] x1975 = FixLst(Const(0),x1974)
                          [2.4] x1976 = FixLst(Const(1),x1974)
                          [2.6] x1977 = And(x1975,x1976)
                          [2.8] x1978 = Not(x1977)
                          [3.6] x1979 = RegWrite(x1969,x1977,Set())
                          [3.8] x1980 = RegWrite(x1971,x1978,Set())
                      x1990 = UnitPipe(Set(b1879, b563),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x1982, x1988, x1989), schedule Vector(x1982, x1983, x1984, x1985, x1986, x1987, x1988, x1989)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x1982 = SRAMBankedRead(x1939,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x1983 = VecApply(x1982,0)
                          x1984 = FixLst(Const(0),x1983)
                          x1985 = FixLst(Const(1),x1983)
                          x1986 = And(x1984,x1985)
                          x1987 = Not(x1986)
                          x1988 = RegWrite(x1970,x1986,Set())
                          x1989 = RegWrite(x1972,x1987,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x1982
                        cur: x1982, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x1982 = SRAMBankedRead(x1939,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x1988
                        Computing fullDFS: x1986
                        Computing fullDFS: x1984
                        Computing fullDFS: x1983
                        [2.0 = max(2.0) + 0.0] x1983 = VecApply(x1982,0)
                        [2.4 = max(2.0) + 0.4] x1984 = FixLst(Const(0),x1983)
                        Computing fullDFS: x1985
                        [2.4 = max(2.0) + 0.4] x1985 = FixLst(Const(1),x1983)
                        [2.6 = max(2.4, 2.4) + 0.2] x1986 = And(x1984,x1985)
                        [3.6 = max(2.6) + 1.0] x1988 = RegWrite(x1970,x1986,Set())
                        Computing fullDFS: x1989
                        Computing fullDFS: x1987
                        [2.8000000000000003 = max(2.6) + 0.2] x1987 = Not(x1986)
                        [3.8 = max(2.8) + 1.0] x1989 = RegWrite(x1972,x1987,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x1982 = SRAMBankedRead(x1939,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x1983 = VecApply(x1982,0)
                          [2.4] x1984 = FixLst(Const(0),x1983)
                          [2.4] x1985 = FixLst(Const(1),x1983)
                          [2.6] x1986 = And(x1984,x1985)
                          [2.8] x1987 = Not(x1986)
                          [3.6] x1988 = RegWrite(x1970,x1986,Set())
                          [3.8] x1989 = RegWrite(x1972,x1987,Set())
                  x2009 = Switch(List(x2951, x2952),Block(x2008))
                    Working on pipeLatencies of result Vector(x2008, x2007, x2006, x1996, x1997, Const(90)), schedule Vector(x2007, x2008, x1996, x1997, x1998, x1999, x2000, x2001, x2002, x2003, x2004, x2005, x2006)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x2007 = SwitchCase(Block(x2006))
                      x2008 = SwitchCase(Block(Const(90)))
                      x1996 = RegRead(x1969)
                      x1997 = SRAMBankedRead(x1938,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1996)),Vec[Fix[TRUE,_10,_22]])
                      x1998 = VecApply(x1997,0)
                      x1999 = FixDiv(Const(100),x1998)
                      x2000 = FixDiv(x1999,x1998)
                      x2001 = FixDiv(x2000,x1998)
                      x2002 = FixDiv(x2001,x1998)
                      x2003 = FixDiv(x2002,x1998)
                      x2004 = FixDiv(Const(10),x1998)
                      x2005 = FixDiv(x2004,x1998)
                      x2006 = FixSub(x2003,x2005)
                    Computing fullDFS: x2008
                    cur: x2008, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2008 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x2007
                    Computing fullDFS: x1996
                    cur: x1996, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x1996 = RegRead(x1969)
                    Computing fullDFS: x1997
                    [2.0 = max(0.0) + 2.0] x1997 = SRAMBankedRead(x1938,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1996)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x2006
                    Computing fullDFS: x2003
                    Computing fullDFS: x1998
                    [2.0 = max(2.0) + 0.0] x1998 = VecApply(x1997,0)
                    Computing fullDFS: x2002
                    Computing fullDFS: x2001
                    Computing fullDFS: x2000
                    Computing fullDFS: x1999
                    [22.0 = max(2.0) + 20.0] x1999 = FixDiv(Const(100),x1998)
                    [42.0 = max(2.0, 22.0) + 20.0] x2000 = FixDiv(x1999,x1998)
                    [62.0 = max(2.0, 42.0) + 20.0] x2001 = FixDiv(x2000,x1998)
                    [82.0 = max(2.0, 62.0) + 20.0] x2002 = FixDiv(x2001,x1998)
                    [102.0 = max(2.0, 82.0) + 20.0] x2003 = FixDiv(x2002,x1998)
                    Computing fullDFS: x2005
                    Computing fullDFS: x2004
                    [22.0 = max(2.0) + 20.0] x2004 = FixDiv(Const(10),x1998)
                    [42.0 = max(2.0, 22.0) + 20.0] x2005 = FixDiv(x2004,x1998)
                    [103.0 = max(102.0, 42.0) + 1.0] x2006 = FixSub(x2003,x2005)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x2007 = SwitchCase(Block(x2006))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x2008 = SwitchCase(Block(Const(90)))
                      [0.0] x1996 = RegRead(x1969)
                      [2.0] x1997 = SRAMBankedRead(x1938,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1996)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x1998 = VecApply(x1997,0)
                      [22.0] x1999 = FixDiv(Const(100),x1998)
                      [22.0] x2004 = FixDiv(Const(10),x1998)
                      [42.0] x2000 = FixDiv(x1999,x1998)
                      [42.0] x2005 = FixDiv(x2004,x1998)
                      [62.0] x2001 = FixDiv(x2000,x1998)
                      [82.0] x2002 = FixDiv(x2001,x1998)
                      [102.0] x2003 = FixDiv(x2002,x1998)
                      [103.0] x2007 = SwitchCase(Block(x2006))
                      [103.0] x2006 = FixSub(x2003,x2005)
                  x2023 = Switch(List(x2953, x2954),Block(x2022))
                    Working on pipeLatencies of result Vector(x2022, x2021, x2020, x2010, x2011, Const(90)), schedule Vector(x2021, x2022, x2010, x2011, x2012, x2013, x2014, x2015, x2016, x2017, x2018, x2019, x2020)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x2021 = SwitchCase(Block(x2020))
                      x2022 = SwitchCase(Block(Const(90)))
                      x2010 = RegRead(x1970)
                      x2011 = SRAMBankedRead(x1939,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2010)),Vec[Fix[TRUE,_10,_22]])
                      x2012 = VecApply(x2011,0)
                      x2013 = FixDiv(Const(100),x2012)
                      x2014 = FixDiv(x2013,x2012)
                      x2015 = FixDiv(x2014,x2012)
                      x2016 = FixDiv(x2015,x2012)
                      x2017 = FixDiv(x2016,x2012)
                      x2018 = FixDiv(Const(10),x2012)
                      x2019 = FixDiv(x2018,x2012)
                      x2020 = FixSub(x2017,x2019)
                    Computing fullDFS: x2022
                    cur: x2022, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2022 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x2021
                    Computing fullDFS: x2010
                    cur: x2010, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2010 = RegRead(x1970)
                    Computing fullDFS: x2011
                    [2.0 = max(0.0) + 2.0] x2011 = SRAMBankedRead(x1939,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2010)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x2020
                    Computing fullDFS: x2017
                    Computing fullDFS: x2012
                    [2.0 = max(2.0) + 0.0] x2012 = VecApply(x2011,0)
                    Computing fullDFS: x2016
                    Computing fullDFS: x2015
                    Computing fullDFS: x2014
                    Computing fullDFS: x2013
                    [22.0 = max(2.0) + 20.0] x2013 = FixDiv(Const(100),x2012)
                    [42.0 = max(2.0, 22.0) + 20.0] x2014 = FixDiv(x2013,x2012)
                    [62.0 = max(2.0, 42.0) + 20.0] x2015 = FixDiv(x2014,x2012)
                    [82.0 = max(2.0, 62.0) + 20.0] x2016 = FixDiv(x2015,x2012)
                    [102.0 = max(2.0, 82.0) + 20.0] x2017 = FixDiv(x2016,x2012)
                    Computing fullDFS: x2019
                    Computing fullDFS: x2018
                    [22.0 = max(2.0) + 20.0] x2018 = FixDiv(Const(10),x2012)
                    [42.0 = max(2.0, 22.0) + 20.0] x2019 = FixDiv(x2018,x2012)
                    [103.0 = max(102.0, 42.0) + 1.0] x2020 = FixSub(x2017,x2019)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x2021 = SwitchCase(Block(x2020))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x2022 = SwitchCase(Block(Const(90)))
                      [0.0] x2010 = RegRead(x1970)
                      [2.0] x2011 = SRAMBankedRead(x1939,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2010)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2012 = VecApply(x2011,0)
                      [22.0] x2013 = FixDiv(Const(100),x2012)
                      [22.0] x2018 = FixDiv(Const(10),x2012)
                      [42.0] x2014 = FixDiv(x2013,x2012)
                      [42.0] x2019 = FixDiv(x2018,x2012)
                      [62.0] x2015 = FixDiv(x2014,x2012)
                      [82.0] x2016 = FixDiv(x2015,x2012)
                      [102.0] x2017 = FixDiv(x2016,x2012)
                      [103.0] x2021 = SwitchCase(Block(x2020))
                      [103.0] x2020 = FixSub(x2017,x2019)
                  x2028 = ParallelPipe(Set(b563),Block(Const(())))
                      x2025 = UnitPipe(Set(b1878, b563),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2024), schedule Vector(x2024)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2024 = SRAMBankedWrite(x1967,Vector(x2009),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2024
                        cur: x2024, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x2024 = SRAMBankedWrite(x1967,Vector(x2009),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x2024 = SRAMBankedWrite(x1967,Vector(x2009),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x2027 = UnitPipe(Set(b1879, b563),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2026), schedule Vector(x2026)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2026 = SRAMBankedWrite(x1968,Vector(x2023),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2026
                        cur: x2026, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x2026 = SRAMBankedWrite(x1968,Vector(x2023),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x2026 = SRAMBankedWrite(x1968,Vector(x2023),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x2061 = ParallelPipe(Set(b563),Block(Const(())))
                      x2046 = UnrolledForeach(Set(b1878, b563),x2031,Block(Const(())),List(List(b2033)),List(List(b2034)),None)
                        Working on pipeLatencies of result Vector(Const(()), x2035, x2042, x2038, x2043, x2044, x2045, x2041), schedule Vector(x2035, x2036, x2037, x2038, x2039, x2040, x2041, x2042, x2043, x2044, x2045)
                        Memories with both reads and writes in this scope: Set(x1884)
                        NonConflictSets(x2035, x2043): Set()
                        NonConflictSets(x2035, x2043): Set()
                        Found Cycle: x2035, x2043
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x2043 = SRAMBankedWrite(x1884,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          x2035 = SRAMBankedRead(x1884,Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                            x2035 = SRAMBankedRead(x1884,Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                            x2036 = VecApply(x2035,0)
                            x2037 = FixMul(x2036,Const(0.099999904632568359375))
                            x2040 = FixMul(x2037,x2039)
                            x2043 = SRAMBankedWrite(x1884,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                        Done finding cycles: Vector(AccumTriple(x1884,x2035,x2043)), Map(x2036 -> List(AccumTriple(x1884,x2035,x2043)), x2035 -> List(AccumTriple(x1884,x2035,x2043)), x2040 -> List(AccumTriple(x1884,x2035,x2043)), x2043 -> List(AccumTriple(x1884,x2035,x2043)), x2037 -> List(AccumTriple(x1884,x2035,x2043)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2035 = SRAMBankedRead(x1884,Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                          x2036 = VecApply(x2035,0)
                          x2037 = FixMul(x2036,Const(0.099999904632568359375))
                          x2038 = SRAMBankedRead(x1967,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                          x2039 = VecApply(x2038,0)
                          x2040 = FixMul(x2037,x2039)
                          x2041 = SRAMBankedWrite(x1882,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          x2042 = SRAMBankedWrite(x1883,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          x2043 = SRAMBankedWrite(x1884,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          x2044 = SRAMBankedWrite(x1881,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          x2045 = SRAMBankedWrite(x1885,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2035
                        cur: x2035, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x1884,x2035,x2043))
                        [2.0 = max(0) + 2.0] x2035 = SRAMBankedRead(x1884,Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        Computing fullDFS: x2042
                        Computing fullDFS: x2040
                        Computing fullDFS: x2037
                        Computing fullDFS: x2036
                        cycle deps of x2036: Vector(x2035, x2036)
                        [2.0 = max(2.0) + 0.0] x2036 = VecApply(x2035,0)[cycle]
                        cycle deps of x2037: Vector(x2035, x2036, x2037)
                        [8.0 = max(2.0) + 6.0] x2037 = FixMul(x2036,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x2039
                        Computing fullDFS: x2038
                        cur: x2038, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2038 = SRAMBankedRead(x1967,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2039 = VecApply(x2038,0)
                        cycle deps of x2040: Vector(x2035, x2036, x2037, x2040)
                        [14.0 = max(8.0, 2.0) + 6.0] x2040 = FixMul(x2037,x2039)[cycle]
                        cycle deps of x2042: Vector(x2035, x2036, x2037, x2040, x2042)
                        [15.0 = max(14.0) + 1.0] x2042 = SRAMBankedWrite(x1883,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                        Computing fullDFS: x2043
                        cycle deps of x2043: Vector(x2035, x2035, x2036, x2037, x2040, x2043)
                        [15.0 = max(2.0, 14.0) + 1.0] x2043 = SRAMBankedWrite(x1884,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))[cycle]
                        Computing fullDFS: x2044
                        cycle deps of x2044: Vector(x2035, x2036, x2037, x2040, x2044)
                        [15.0 = max(14.0) + 1.0] x2044 = SRAMBankedWrite(x1881,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                        Computing fullDFS: x2045
                        cycle deps of x2045: Vector(x2035, x2036, x2037, x2040, x2045)
                        [15.0 = max(14.0) + 1.0] x2045 = SRAMBankedWrite(x1885,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                        Computing fullDFS: x2041
                        cycle deps of x2041: Vector(x2035, x2036, x2037, x2040, x2041)
                        [15.0 = max(14.0) + 1.0] x2041 = SRAMBankedWrite(x1882,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                        Cycle #0: write: x2043, cycle: x2035, x2035, x2036, x2037, x2040, x2043
                        x2040 = FixMul(x2037,x2039) [14.0]
                          [14.0 = 15.0 - 1.0] x2041 = SRAMBankedWrite(x1882,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          [14.0 = 15.0 - 1.0] x2042 = SRAMBankedWrite(x1883,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          [14.0 = 15.0 - 1.0] x2043 = SRAMBankedWrite(x1884,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          [14.0 = 15.0 - 1.0] x2044 = SRAMBankedWrite(x1881,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          [14.0 = 15.0 - 1.0] x2045 = SRAMBankedWrite(x1885,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          [14.0]
                        x2037 = FixMul(x2036,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x2040 = FixMul(x2037,x2039)
                          [8.0]
                        x2036 = VecApply(x2035,0) [2.0]
                          [2.0 = 8.0 - 6.0] x2037 = FixMul(x2036,Const(0.099999904632568359375))
                          [2.0]
                        x2035 = SRAMBankedRead(x1884,Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2036 = VecApply(x2035,0)
                          [2.0]
                        x2035 = SRAMBankedRead(x1884,Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2036 = VecApply(x2035,0)
                          [2.0]
                        Cycles: Map(x2042 -> Vector(x2035, x2036, x2037, x2040, x2042), x2045 -> Vector(x2035, x2036, x2037, x2040, x2045), x2036 -> Vector(x2035, x2036), x2044 -> Vector(x2035, x2036, x2037, x2040, x2044), x2035 -> List(x2035), x2041 -> Vector(x2035, x2036, x2037, x2040, x2041), x2040 -> Vector(x2035, x2036, x2037, x2040), x2043 -> Vector(x2035, x2035, x2036, x2037, x2040, x2043), x2037 -> Vector(x2035, x2036, x2037))
                        pseudo cycles for x1884:
                        Multiplexed accesses for memory x1884: 
                          x2035 = SRAMBankedRead(x1884,Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                        Access: x2035 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2035 = SRAMBankedRead(x1884,Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x1884: 
                          x2043 = SRAMBankedWrite(x1884,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                        Access: x2043 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2043 = SRAMBankedWrite(x1884,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x2035),x1884,1.0)
                        AAACycle(Vector(x2043),x1884,1.0)
                        WARCycle(x2035,x2043,x1884,Vector(x2035, x2035, x2036, x2037, x2040, x2043),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x2035 = SRAMBankedRead(x1884,Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2036 = VecApply(x2035,0)
                          [2.0] x2038 = SRAMBankedRead(x1967,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2039 = VecApply(x2038,0)
                          [8.0] x2037 = FixMul(x2036,Const(0.099999904632568359375))
                          [14.0] x2040 = FixMul(x2037,x2039)
                          [15.0] x2041 = SRAMBankedWrite(x1882,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          [15.0] x2042 = SRAMBankedWrite(x1883,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          [15.0] x2043 = SRAMBankedWrite(x1884,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          [15.0] x2044 = SRAMBankedWrite(x1881,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                          [15.0] x2045 = SRAMBankedWrite(x1885,Vector(x2040),Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)))
                        Cycle #0 on x1884: 
                          x1884 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                      x2060 = UnrolledForeach(Set(b1879, b563),x2032,Block(Const(())),List(List(b2047)),List(List(b2048)),None)
                        Working on pipeLatencies of result Vector(Const(()), x2049, x2058, x2052, x2057, x2055, x2056, x2059), schedule Vector(x2049, x2050, x2051, x2052, x2053, x2054, x2055, x2056, x2057, x2058, x2059)
                        Memories with both reads and writes in this scope: Set(x1889)
                        NonConflictSets(x2049, x2059): Set()
                        NonConflictSets(x2049, x2059): Set()
                        Found Cycle: x2049, x2059
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x2059 = SRAMBankedWrite(x1889,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          x2049 = SRAMBankedRead(x1889,Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                            x2049 = SRAMBankedRead(x1889,Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                            x2050 = VecApply(x2049,0)
                            x2051 = FixMul(x2050,Const(0.099999904632568359375))
                            x2054 = FixMul(x2051,x2053)
                            x2059 = SRAMBankedWrite(x1889,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                        Done finding cycles: Vector(AccumTriple(x1889,x2049,x2059)), Map(x2051 -> List(AccumTriple(x1889,x2049,x2059)), x2059 -> List(AccumTriple(x1889,x2049,x2059)), x2050 -> List(AccumTriple(x1889,x2049,x2059)), x2049 -> List(AccumTriple(x1889,x2049,x2059)), x2054 -> List(AccumTriple(x1889,x2049,x2059)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2049 = SRAMBankedRead(x1889,Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                          x2050 = VecApply(x2049,0)
                          x2051 = FixMul(x2050,Const(0.099999904632568359375))
                          x2052 = SRAMBankedRead(x1968,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                          x2053 = VecApply(x2052,0)
                          x2054 = FixMul(x2051,x2053)
                          x2055 = SRAMBankedWrite(x1887,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          x2056 = SRAMBankedWrite(x1890,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          x2057 = SRAMBankedWrite(x1886,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          x2058 = SRAMBankedWrite(x1888,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          x2059 = SRAMBankedWrite(x1889,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2049
                        cur: x2049, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x1889,x2049,x2059))
                        [2.0 = max(0) + 2.0] x2049 = SRAMBankedRead(x1889,Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        Computing fullDFS: x2058
                        Computing fullDFS: x2054
                        Computing fullDFS: x2051
                        Computing fullDFS: x2050
                        cycle deps of x2050: Vector(x2049, x2050)
                        [2.0 = max(2.0) + 0.0] x2050 = VecApply(x2049,0)[cycle]
                        cycle deps of x2051: Vector(x2049, x2050, x2051)
                        [8.0 = max(2.0) + 6.0] x2051 = FixMul(x2050,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x2053
                        Computing fullDFS: x2052
                        cur: x2052, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2052 = SRAMBankedRead(x1968,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2053 = VecApply(x2052,0)
                        cycle deps of x2054: Vector(x2049, x2050, x2051, x2054)
                        [14.0 = max(8.0, 2.0) + 6.0] x2054 = FixMul(x2051,x2053)[cycle]
                        cycle deps of x2058: Vector(x2049, x2050, x2051, x2054, x2058)
                        [15.0 = max(14.0) + 1.0] x2058 = SRAMBankedWrite(x1888,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                        Computing fullDFS: x2057
                        cycle deps of x2057: Vector(x2049, x2050, x2051, x2054, x2057)
                        [15.0 = max(14.0) + 1.0] x2057 = SRAMBankedWrite(x1886,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                        Computing fullDFS: x2055
                        cycle deps of x2055: Vector(x2049, x2050, x2051, x2054, x2055)
                        [15.0 = max(14.0) + 1.0] x2055 = SRAMBankedWrite(x1887,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                        Computing fullDFS: x2056
                        cycle deps of x2056: Vector(x2049, x2050, x2051, x2054, x2056)
                        [15.0 = max(14.0) + 1.0] x2056 = SRAMBankedWrite(x1890,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                        Computing fullDFS: x2059
                        cycle deps of x2059: Vector(x2049, x2049, x2050, x2051, x2054, x2059)
                        [15.0 = max(2.0, 14.0) + 1.0] x2059 = SRAMBankedWrite(x1889,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))[cycle]
                        Cycle #0: write: x2059, cycle: x2049, x2049, x2050, x2051, x2054, x2059
                        x2054 = FixMul(x2051,x2053) [14.0]
                          [14.0 = 15.0 - 1.0] x2055 = SRAMBankedWrite(x1887,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          [14.0 = 15.0 - 1.0] x2056 = SRAMBankedWrite(x1890,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          [14.0 = 15.0 - 1.0] x2057 = SRAMBankedWrite(x1886,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          [14.0 = 15.0 - 1.0] x2058 = SRAMBankedWrite(x1888,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          [14.0 = 15.0 - 1.0] x2059 = SRAMBankedWrite(x1889,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          [14.0]
                        x2051 = FixMul(x2050,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x2054 = FixMul(x2051,x2053)
                          [8.0]
                        x2050 = VecApply(x2049,0) [2.0]
                          [2.0 = 8.0 - 6.0] x2051 = FixMul(x2050,Const(0.099999904632568359375))
                          [2.0]
                        x2049 = SRAMBankedRead(x1889,Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2050 = VecApply(x2049,0)
                          [2.0]
                        x2049 = SRAMBankedRead(x1889,Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2050 = VecApply(x2049,0)
                          [2.0]
                        Cycles: Map(x2057 -> Vector(x2049, x2050, x2051, x2054, x2057), x2051 -> Vector(x2049, x2050, x2051), x2056 -> Vector(x2049, x2050, x2051, x2054, x2056), x2059 -> Vector(x2049, x2049, x2050, x2051, x2054, x2059), x2050 -> Vector(x2049, x2050), x2058 -> Vector(x2049, x2050, x2051, x2054, x2058), x2049 -> List(x2049), x2055 -> Vector(x2049, x2050, x2051, x2054, x2055), x2054 -> Vector(x2049, x2050, x2051, x2054))
                        pseudo cycles for x1889:
                        Multiplexed accesses for memory x1889: 
                          x2049 = SRAMBankedRead(x1889,Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                        Access: x2049 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2049 = SRAMBankedRead(x1889,Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x1889: 
                          x2059 = SRAMBankedWrite(x1889,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                        Access: x2059 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2059 = SRAMBankedWrite(x1889,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x2049),x1889,1.0)
                        AAACycle(Vector(x2059),x1889,1.0)
                        WARCycle(x2049,x2059,x1889,Vector(x2049, x2049, x2050, x2051, x2054, x2059),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x2049 = SRAMBankedRead(x1889,Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2050 = VecApply(x2049,0)
                          [2.0] x2052 = SRAMBankedRead(x1968,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2053 = VecApply(x2052,0)
                          [8.0] x2051 = FixMul(x2050,Const(0.099999904632568359375))
                          [14.0] x2054 = FixMul(x2051,x2053)
                          [15.0] x2055 = SRAMBankedWrite(x1887,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          [15.0] x2056 = SRAMBankedWrite(x1890,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          [15.0] x2057 = SRAMBankedWrite(x1886,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          [15.0] x2058 = SRAMBankedWrite(x1888,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                          [15.0] x2059 = SRAMBankedWrite(x1889,Vector(x2054),Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)))
                        Cycle #0 on x1889: 
                          x1889 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                  x2081 = UnrolledForeach(Set(),x623,Block(Const(())),Vector(List(b1877)),Vector(List(b1880)),None)
                    Working on pipeLatencies of result Vector(Const(()), x2062, x2080, x2079, x2064, x2066), schedule Vector(x2062, x2063, x2064, x2065, x2066, x2067, x2068, x2070, x2072, x2073, x2074, x2076, x2077, x2078, x2079, x2080)
                    Memories with both reads and writes in this scope: Set(x579)
                    NonConflictSets(x2066, x2079): Set()
                    NonConflictSets(x2066, x2079): Set()
                    Found Cycle: x2066, x2079
                    Exclusions: Set() Set() 
                    Found cycle between: 
                      x2079 = SRAMBankedWrite(x579,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)))
                      x2066 = SRAMBankedRead(x579,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
                        x2066 = SRAMBankedRead(x579,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
                        x2067 = VecApply(x2066,0)
                        x2077 = FixAdd(x2074,x2067)
                        x2078 = Mux(x2076,x2074,x2077)
                        x2079 = SRAMBankedWrite(x579,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)))
                    Done finding cycles: Vector(AccumTriple(x579,x2066,x2079)), Map(x2066 -> List(AccumTriple(x579,x2066,x2079)), x2078 -> List(AccumTriple(x579,x2066,x2079)), x2077 -> List(AccumTriple(x579,x2066,x2079)), x2067 -> List(AccumTriple(x579,x2066,x2079)), x2079 -> List(AccumTriple(x579,x2066,x2079)))
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x2062 = SRAMBankedRead(x1885,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
                      x2063 = VecApply(x2062,0)
                      x2064 = SRAMBankedRead(x1890,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
                      x2065 = VecApply(x2064,0)
                      x2066 = SRAMBankedRead(x579,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
                      x2067 = VecApply(x2066,0)
                      x2068 = And(b1880,b563)
                      x2070 = And(b1879,b563)
                      x2072 = And(x2070,x2068)
                      x2073 = FixAdd(x2063,x2065)
                      x2074 = Mux(x2072,x2073,x2063)
                      x2076 = FixEql(b1875,Const(0))
                      x2077 = FixAdd(x2074,x2067)
                      x2078 = Mux(x2076,x2074,x2077)
                      x2079 = SRAMBankedWrite(x579,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)))
                      x2080 = SRAMBankedWrite(x580,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)))
                    Computing fullDFS: Const(())
                    Computing fullDFS: x2062
                    cur: x2062, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x2062 = SRAMBankedRead(x1885,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x2080
                    Computing fullDFS: x2078
                    Computing fullDFS: x2074
                    Computing fullDFS: x2063
                    [2.0 = max(2.0) + 0.0] x2063 = VecApply(x2062,0)
                    Computing fullDFS: x2072
                    Computing fullDFS: x2068
                    cur: x2068, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x2068 = And(b1880,b563)
                    Computing fullDFS: x2070
                    cur: x2070, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x2070 = And(b1879,b563)
                    [0.4 = max(0.2, 0.2) + 0.2] x2072 = And(x2070,x2068)
                    Computing fullDFS: x2073
                    Computing fullDFS: x2065
                    Computing fullDFS: x2064
                    cur: x2064, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x2064 = SRAMBankedRead(x1890,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x2065 = VecApply(x2064,0)
                    [3.0 = max(2.0, 2.0) + 1.0] x2073 = FixAdd(x2063,x2065)
                    [3.5 = max(2.0, 0.4, 3.0) + 0.5] x2074 = Mux(x2072,x2073,x2063)
                    Computing fullDFS: x2076
                    cur: x2076, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x2076 = FixEql(b1875,Const(0))
                    Computing fullDFS: x2077
                    Computing fullDFS: x2067
                    Computing fullDFS: x2066
                    cur: x2066, inReduce: true, latency: 2.0
                    Known Cycles: List(AccumTriple(x579,x2066,x2079))
                    [2.0 = max(0) + 2.0] x2066 = SRAMBankedRead(x579,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])[cycle]
                    cycle deps of x2067: Vector(x2066, x2067)
                    [2.0 = max(2.0) + 0.0] x2067 = VecApply(x2066,0)[cycle]
                    cycle deps of x2077: Vector(x2066, x2067, x2077)
                    [4.5 = max(2.0, 3.5) + 1.0] x2077 = FixAdd(x2074,x2067)[cycle]
                    cycle deps of x2078: Vector(x2066, x2067, x2077, x2078)
                    [5.0 = max(3.5, 0.2, 4.5) + 0.5] x2078 = Mux(x2076,x2074,x2077)[cycle]
                    cycle deps of x2080: Vector(x2066, x2067, x2077, x2078, x2080)
                    [6.0 = max(5.0) + 1.0] x2080 = SRAMBankedWrite(x580,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)))
                    Computing fullDFS: x2079
                    cycle deps of x2079: Vector(x2066, x2066, x2067, x2077, x2078, x2079)
                    [6.0 = max(2.0, 5.0) + 1.0] x2079 = SRAMBankedWrite(x579,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)))[cycle]
                    Cycle #0: write: x2079, cycle: x2066, x2066, x2067, x2077, x2078, x2079
                    x2078 = Mux(x2076,x2074,x2077) [5.0]
                      [5.0 = 6.0 - 1.0] x2079 = SRAMBankedWrite(x579,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)))
                      [5.0 = 6.0 - 1.0] x2080 = SRAMBankedWrite(x580,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)))
                      [5.0]
                    x2077 = FixAdd(x2074,x2067) [4.5]
                      [4.5 = 5.0 - 0.5] x2078 = Mux(x2076,x2074,x2077)
                      [4.5]
                    x2067 = VecApply(x2066,0) [2.0]
                      [3.5 = 4.5 - 1.0] x2077 = FixAdd(x2074,x2067)
                      [3.5]
                    x2066 = SRAMBankedRead(x579,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                      [3.5 = 3.5 - 0.0] x2067 = VecApply(x2066,0)
                      [3.5]
                    x2066 = SRAMBankedRead(x579,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]]) [3.5]
                      [3.5 = 3.5 - 0.0] x2067 = VecApply(x2066,0)
                      [3.5]
                    Cycles: Map(x2066 -> List(x2066), x2078 -> Vector(x2066, x2067, x2077, x2078), x2077 -> Vector(x2066, x2067, x2077), x2080 -> Vector(x2066, x2067, x2077, x2078, x2080), x2067 -> Vector(x2066, x2067), x2079 -> Vector(x2066, x2066, x2067, x2077, x2078, x2079))
                    pseudo cycles for x579:
                    Multiplexed accesses for memory x579: 
                      x2066 = SRAMBankedRead(x579,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
                    Access: x2066 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x2066 = SRAMBankedRead(x579,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 3.5 due to muxing.
                    Multiplexed accesses for memory x579: 
                      x2079 = SRAMBankedWrite(x579,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)))
                    Access: x2079 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x2079 = SRAMBankedWrite(x579,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563))) by 0.0 to 6.0 due to muxing.
                    Found cycles: 
                    AAACycle(Vector(x2066),x579,1.0)
                    AAACycle(Vector(x2079),x579,1.0)
                    WARCycle(x2066,x2079,x579,Vector(x2066, x2066, x2067, x2077, x2078, x2079),5.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                      Schedule after pipeLatencies calculation:
                      [0.2] x2068 = And(b1880,b563)
                      [0.2] x2070 = And(b1879,b563)
                      [0.2] x2076 = FixEql(b1875,Const(0))
                      [0.4] x2072 = And(x2070,x2068)
                      [2.0] x2062 = SRAMBankedRead(x1885,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2063 = VecApply(x2062,0)
                      [2.0] x2064 = SRAMBankedRead(x1890,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2065 = VecApply(x2064,0)
                      [3.0] x2073 = FixAdd(x2063,x2065)
                      [3.5] x2066 = SRAMBankedRead(x579,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]])
                      [3.5] x2067 = VecApply(x2066,0)
                      [3.5] x2074 = Mux(x2072,x2073,x2063)
                      [4.5] x2077 = FixAdd(x2074,x2067)
                      [5.0] x2078 = Mux(x2076,x2074,x2077)
                      [6.0] x2079 = SRAMBankedWrite(x579,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)))
                      [6.0] x2080 = SRAMBankedWrite(x580,Vector(x2078),Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)))
                    Cycle #0 on x579: 
                      x579 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [accum_0]
                      disjoint:     true
                      no visible intermediates:
                        closed cycle:     false
                        no intermediates: true
                        is local mem:     true
                        number of writers:  1
                        outer reduce:     false
                        accum type:       Fold (if reduce, overrides no intermediates)
              x2290 = UnrolledReduce(Set(b564),x604,Block((x581) => Const(())),List(List(b2083, b2084)),List(List(b2086, b2087)),None)
                  x2145 = ParallelPipe(Set(b564),Block(Const(())))
                      x2123 = UnrolledForeach(Set(b2086, b564),x2101,Block(Const(())),List(List(b2103)),List(List(b2104)),None)
                        Working on pipeLatencies of result Vector(x2109, Const(()), x2122, x2118, x2115, x2121, x2119, x2120), schedule Vector(x2106, x3061, x3062, x2108, x2109, x2110, x2112, x3063, x3064, x2114, x2115, x2116, x2117, x2118, x2119, x2120, x2121, x2122)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2106 = FixDiv(b554,Const(10))
                          x3061 = FixSLA(x2106,Const(1))
                          x3062 = FixAdd(x3061,x2106)
                          x2108 = FixAdd(x3062,b2103)
                          x2109 = SRAMBankedRead(x471,Vector(List(Const(7), Const(0))),Vector(x2108),Vector(Set(b2104, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                          x2110 = VecApply(x2109,0)
                          x2112 = FixDivSRA(b2083,Const(1))
                          x3063 = FixSLA(x2112,Const(1))
                          x3064 = FixAdd(x3063,x2112)
                          x2114 = FixAdd(x3064,b2103)
                          x2115 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x2114),Vector(Set(b2104, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                          x2116 = VecApply(x2115,0)
                          x2117 = FixSub(x2110,x2116)
                          x2118 = SRAMBankedWrite(x2090,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                          x2119 = SRAMBankedWrite(x2093,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                          x2120 = SRAMBankedWrite(x2089,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                          x2121 = SRAMBankedWrite(x2092,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                          x2122 = SRAMBankedWrite(x2091,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                        Computing fullDFS: x2109
                        Computing fullDFS: x2108
                        Computing fullDFS: x3062
                        Computing fullDFS: x2106
                        cur: x2106, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x2106 = FixDiv(b554,Const(10))
                        Computing fullDFS: x3061
                        [20.2 = max(20.0) + 0.2] x3061 = FixSLA(x2106,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3062 = FixAdd(x3061,x2106)
                        [22.2 = max(21.2) + 1.0] x2108 = FixAdd(x3062,b2103)
                        [24.2 = max(22.2) + 2.0] x2109 = SRAMBankedRead(x471,Vector(List(Const(7), Const(0))),Vector(x2108),Vector(Set(b2104, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2122
                        Computing fullDFS: x2117
                        Computing fullDFS: x2110
                        [24.2 = max(24.2) + 0.0] x2110 = VecApply(x2109,0)
                        Computing fullDFS: x2116
                        Computing fullDFS: x2115
                        Computing fullDFS: x2114
                        Computing fullDFS: x3064
                        Computing fullDFS: x2112
                        cur: x2112, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x2112 = FixDivSRA(b2083,Const(1))
                        Computing fullDFS: x3063
                        [0.4 = max(0.2) + 0.2] x3063 = FixSLA(x2112,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3064 = FixAdd(x3063,x2112)
                        [2.4 = max(1.4) + 1.0] x2114 = FixAdd(x3064,b2103)
                        [4.4 = max(2.4) + 2.0] x2115 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x2114),Vector(Set(b2104, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x2116 = VecApply(x2115,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x2117 = FixSub(x2110,x2116)
                        [26.2 = max(25.2) + 1.0] x2122 = SRAMBankedWrite(x2091,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                        Computing fullDFS: x2118
                        [26.2 = max(25.2) + 1.0] x2118 = SRAMBankedWrite(x2090,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                        Computing fullDFS: x2121
                        [26.2 = max(25.2) + 1.0] x2121 = SRAMBankedWrite(x2092,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                        Computing fullDFS: x2119
                        [26.2 = max(25.2) + 1.0] x2119 = SRAMBankedWrite(x2093,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                        Computing fullDFS: x2120
                        [26.2 = max(25.2) + 1.0] x2120 = SRAMBankedWrite(x2089,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x2112 = FixDivSRA(b2083,Const(1))
                          [0.4] x3063 = FixSLA(x2112,Const(1))
                          [1.4] x3064 = FixAdd(x3063,x2112)
                          [2.4] x2114 = FixAdd(x3064,b2103)
                          [4.4] x2115 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x2114),Vector(Set(b2104, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x2116 = VecApply(x2115,0)
                          [20.0] x2106 = FixDiv(b554,Const(10))
                          [20.2] x3061 = FixSLA(x2106,Const(1))
                          [21.2] x3062 = FixAdd(x3061,x2106)
                          [22.2] x2108 = FixAdd(x3062,b2103)
                          [24.2] x2109 = SRAMBankedRead(x471,Vector(List(Const(7), Const(0))),Vector(x2108),Vector(Set(b2104, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x2110 = VecApply(x2109,0)
                          [25.2] x2117 = FixSub(x2110,x2116)
                          [26.2] x2118 = SRAMBankedWrite(x2090,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                          [26.2] x2119 = SRAMBankedWrite(x2093,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                          [26.2] x2120 = SRAMBankedWrite(x2089,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                          [26.2] x2121 = SRAMBankedWrite(x2092,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                          [26.2] x2122 = SRAMBankedWrite(x2091,Vector(x2117),Vector(List(Const(0))),Vector(b2103),Vector(Set(b2104, b2086, b564)))
                      x2144 = UnrolledForeach(Set(b2087, b564),x2102,Block(Const(())),List(List(b2124)),List(List(b2125)),None)
                        Working on pipeLatencies of result Vector(Const(()), x2141, x2136, x2140, x2139, x2143, x2130, x2142), schedule Vector(x2127, x3065, x3066, x2129, x2130, x2131, x2133, x3067, x3068, x2135, x2136, x2137, x2138, x2139, x2140, x2141, x2142, x2143)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2127 = FixDiv(b554,Const(10))
                          x3065 = FixSLA(x2127,Const(1))
                          x3066 = FixAdd(x3065,x2127)
                          x2129 = FixAdd(x3066,b2124)
                          x2130 = SRAMBankedRead(x471,Vector(List(Const(7), Const(0))),Vector(x2129),Vector(Set(b2125, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                          x2131 = VecApply(x2130,0)
                          x2133 = FixDivSRA(b2084,Const(1))
                          x3067 = FixSLA(x2133,Const(1))
                          x3068 = FixAdd(x3067,x2133)
                          x2135 = FixAdd(x3068,b2124)
                          x2136 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x2135),Vector(Set(b2125, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                          x2137 = VecApply(x2136,0)
                          x2138 = FixSub(x2131,x2137)
                          x2139 = SRAMBankedWrite(x2094,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                          x2140 = SRAMBankedWrite(x2097,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                          x2141 = SRAMBankedWrite(x2096,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                          x2142 = SRAMBankedWrite(x2098,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                          x2143 = SRAMBankedWrite(x2095,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2141
                        Computing fullDFS: x2138
                        Computing fullDFS: x2131
                        Computing fullDFS: x2130
                        Computing fullDFS: x2129
                        Computing fullDFS: x3066
                        Computing fullDFS: x2127
                        cur: x2127, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x2127 = FixDiv(b554,Const(10))
                        Computing fullDFS: x3065
                        [20.2 = max(20.0) + 0.2] x3065 = FixSLA(x2127,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3066 = FixAdd(x3065,x2127)
                        [22.2 = max(21.2) + 1.0] x2129 = FixAdd(x3066,b2124)
                        [24.2 = max(22.2) + 2.0] x2130 = SRAMBankedRead(x471,Vector(List(Const(7), Const(0))),Vector(x2129),Vector(Set(b2125, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x2131 = VecApply(x2130,0)
                        Computing fullDFS: x2137
                        Computing fullDFS: x2136
                        Computing fullDFS: x2135
                        Computing fullDFS: x3068
                        Computing fullDFS: x2133
                        cur: x2133, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x2133 = FixDivSRA(b2084,Const(1))
                        Computing fullDFS: x3067
                        [0.4 = max(0.2) + 0.2] x3067 = FixSLA(x2133,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3068 = FixAdd(x3067,x2133)
                        [2.4 = max(1.4) + 1.0] x2135 = FixAdd(x3068,b2124)
                        [4.4 = max(2.4) + 2.0] x2136 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x2135),Vector(Set(b2125, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x2137 = VecApply(x2136,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x2138 = FixSub(x2131,x2137)
                        [26.2 = max(25.2) + 1.0] x2141 = SRAMBankedWrite(x2096,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                        Computing fullDFS: x2140
                        [26.2 = max(25.2) + 1.0] x2140 = SRAMBankedWrite(x2097,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                        Computing fullDFS: x2139
                        [26.2 = max(25.2) + 1.0] x2139 = SRAMBankedWrite(x2094,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                        Computing fullDFS: x2143
                        [26.2 = max(25.2) + 1.0] x2143 = SRAMBankedWrite(x2095,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                        Computing fullDFS: x2142
                        [26.2 = max(25.2) + 1.0] x2142 = SRAMBankedWrite(x2098,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x2133 = FixDivSRA(b2084,Const(1))
                          [0.4] x3067 = FixSLA(x2133,Const(1))
                          [1.4] x3068 = FixAdd(x3067,x2133)
                          [2.4] x2135 = FixAdd(x3068,b2124)
                          [4.4] x2136 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x2135),Vector(Set(b2125, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x2137 = VecApply(x2136,0)
                          [20.0] x2127 = FixDiv(b554,Const(10))
                          [20.2] x3065 = FixSLA(x2127,Const(1))
                          [21.2] x3066 = FixAdd(x3065,x2127)
                          [22.2] x2129 = FixAdd(x3066,b2124)
                          [24.2] x2130 = SRAMBankedRead(x471,Vector(List(Const(7), Const(0))),Vector(x2129),Vector(Set(b2125, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x2131 = VecApply(x2130,0)
                          [25.2] x2138 = FixSub(x2131,x2137)
                          [26.2] x2139 = SRAMBankedWrite(x2094,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                          [26.2] x2140 = SRAMBankedWrite(x2097,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                          [26.2] x2141 = SRAMBankedWrite(x2096,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                          [26.2] x2142 = SRAMBankedWrite(x2098,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                          [26.2] x2143 = SRAMBankedWrite(x2095,Vector(x2138),Vector(List(Const(0))),Vector(b2124),Vector(Set(b2125, b2087, b564)))
                  x2174 = ParallelPipe(Set(b564),Block(Const(())))
                      x2160 = UnitPipe(Set(b2086, b564),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2148, x2151, x2155, x2159), schedule Vector(x2148, x2149, x2151, x2152, x2153, x3069, x2155, x2156, x3070, x2159)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2148 = SRAMBankedRead(x2089,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2149 = VecApply(x2148,0)
                          x2151 = SRAMBankedRead(x2090,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2152 = VecApply(x2151,0)
                          x2153 = FixMul(x2152,x2152)
                          x3069 = FixFMA(x2149,x2149,x2153)
                          x2155 = SRAMBankedRead(x2091,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2156 = VecApply(x2155,0)
                          x3070 = FixFMA(x2156,x2156,x3069)
                          x2159 = SRAMBankedWrite(x2146,Vector(x3070),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2148
                        cur: x2148, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2148 = SRAMBankedRead(x2089,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2151
                        cur: x2151, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2151 = SRAMBankedRead(x2090,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2155
                        cur: x2155, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2155 = SRAMBankedRead(x2091,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2159
                        Computing fullDFS: x3070
                        Computing fullDFS: x3069
                        Computing fullDFS: x2149
                        [2.0 = max(2.0) + 0.0] x2149 = VecApply(x2148,0)
                        Computing fullDFS: x2153
                        Computing fullDFS: x2152
                        [2.0 = max(2.0) + 0.0] x2152 = VecApply(x2151,0)
                        [8.0 = max(2.0) + 6.0] x2153 = FixMul(x2152,x2152)
                        [14.0 = max(2.0, 8.0) + 6.0] x3069 = FixFMA(x2149,x2149,x2153)
                        Computing fullDFS: x2156
                        [2.0 = max(2.0) + 0.0] x2156 = VecApply(x2155,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3070 = FixFMA(x2156,x2156,x3069)
                        [21.0 = max(20.0) + 1.0] x2159 = SRAMBankedWrite(x2146,Vector(x3070),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x2148 = SRAMBankedRead(x2089,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2149 = VecApply(x2148,0)
                          [2.0] x2151 = SRAMBankedRead(x2090,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2152 = VecApply(x2151,0)
                          [2.0] x2155 = SRAMBankedRead(x2091,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2156 = VecApply(x2155,0)
                          [8.0] x2153 = FixMul(x2152,x2152)
                          [14.0] x3069 = FixFMA(x2149,x2149,x2153)
                          [20.0] x3070 = FixFMA(x2156,x2156,x3069)
                          [21.0] x2159 = SRAMBankedWrite(x2146,Vector(x3070),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x2173 = UnitPipe(Set(b2087, b564),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2168, x2164, x2172, x2161), schedule Vector(x2161, x2162, x2164, x2165, x2166, x3071, x2168, x2169, x3072, x2172)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2161 = SRAMBankedRead(x2094,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2162 = VecApply(x2161,0)
                          x2164 = SRAMBankedRead(x2095,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2165 = VecApply(x2164,0)
                          x2166 = FixMul(x2165,x2165)
                          x3071 = FixFMA(x2162,x2162,x2166)
                          x2168 = SRAMBankedRead(x2096,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2169 = VecApply(x2168,0)
                          x3072 = FixFMA(x2169,x2169,x3071)
                          x2172 = SRAMBankedWrite(x2147,Vector(x3072),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2168
                        cur: x2168, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2168 = SRAMBankedRead(x2096,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2164
                        cur: x2164, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2164 = SRAMBankedRead(x2095,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2172
                        Computing fullDFS: x3072
                        Computing fullDFS: x3071
                        Computing fullDFS: x2162
                        Computing fullDFS: x2161
                        cur: x2161, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2161 = SRAMBankedRead(x2094,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2162 = VecApply(x2161,0)
                        Computing fullDFS: x2166
                        Computing fullDFS: x2165
                        [2.0 = max(2.0) + 0.0] x2165 = VecApply(x2164,0)
                        [8.0 = max(2.0) + 6.0] x2166 = FixMul(x2165,x2165)
                        [14.0 = max(2.0, 8.0) + 6.0] x3071 = FixFMA(x2162,x2162,x2166)
                        Computing fullDFS: x2169
                        [2.0 = max(2.0) + 0.0] x2169 = VecApply(x2168,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3072 = FixFMA(x2169,x2169,x3071)
                        [21.0 = max(20.0) + 1.0] x2172 = SRAMBankedWrite(x2147,Vector(x3072),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x2161 = SRAMBankedRead(x2094,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2162 = VecApply(x2161,0)
                          [2.0] x2164 = SRAMBankedRead(x2095,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2165 = VecApply(x2164,0)
                          [2.0] x2168 = SRAMBankedRead(x2096,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2169 = VecApply(x2168,0)
                          [8.0] x2166 = FixMul(x2165,x2165)
                          [14.0] x3071 = FixFMA(x2162,x2162,x2166)
                          [20.0] x3072 = FixFMA(x2169,x2169,x3071)
                          [21.0] x2172 = SRAMBankedWrite(x2147,Vector(x3072),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x2199 = ParallelPipe(Set(b564),Block(Const(())))
                      x2189 = UnitPipe(Set(b2086, b564),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2181, x2187, x2188), schedule Vector(x2181, x2182, x2183, x2184, x2185, x2186, x2187, x2188)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2181 = SRAMBankedRead(x2146,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2182 = VecApply(x2181,0)
                          x2183 = FixLst(Const(0),x2182)
                          x2184 = FixLst(Const(1),x2182)
                          x2185 = And(x2183,x2184)
                          x2186 = Not(x2185)
                          x2187 = RegWrite(x2177,x2185,Set())
                          x2188 = RegWrite(x2179,x2186,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2181
                        cur: x2181, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2181 = SRAMBankedRead(x2146,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2187
                        Computing fullDFS: x2185
                        Computing fullDFS: x2183
                        Computing fullDFS: x2182
                        [2.0 = max(2.0) + 0.0] x2182 = VecApply(x2181,0)
                        [2.4 = max(2.0) + 0.4] x2183 = FixLst(Const(0),x2182)
                        Computing fullDFS: x2184
                        [2.4 = max(2.0) + 0.4] x2184 = FixLst(Const(1),x2182)
                        [2.6 = max(2.4, 2.4) + 0.2] x2185 = And(x2183,x2184)
                        [3.6 = max(2.6) + 1.0] x2187 = RegWrite(x2177,x2185,Set())
                        Computing fullDFS: x2188
                        Computing fullDFS: x2186
                        [2.8000000000000003 = max(2.6) + 0.2] x2186 = Not(x2185)
                        [3.8 = max(2.8) + 1.0] x2188 = RegWrite(x2179,x2186,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x2181 = SRAMBankedRead(x2146,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2182 = VecApply(x2181,0)
                          [2.4] x2183 = FixLst(Const(0),x2182)
                          [2.4] x2184 = FixLst(Const(1),x2182)
                          [2.6] x2185 = And(x2183,x2184)
                          [2.8] x2186 = Not(x2185)
                          [3.6] x2187 = RegWrite(x2177,x2185,Set())
                          [3.8] x2188 = RegWrite(x2179,x2186,Set())
                      x2198 = UnitPipe(Set(b2087, b564),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2190, x2196, x2197), schedule Vector(x2190, x2191, x2192, x2193, x2194, x2195, x2196, x2197)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2190 = SRAMBankedRead(x2147,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2191 = VecApply(x2190,0)
                          x2192 = FixLst(Const(0),x2191)
                          x2193 = FixLst(Const(1),x2191)
                          x2194 = And(x2192,x2193)
                          x2195 = Not(x2194)
                          x2196 = RegWrite(x2178,x2194,Set())
                          x2197 = RegWrite(x2180,x2195,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2190
                        cur: x2190, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2190 = SRAMBankedRead(x2147,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2196
                        Computing fullDFS: x2194
                        Computing fullDFS: x2192
                        Computing fullDFS: x2191
                        [2.0 = max(2.0) + 0.0] x2191 = VecApply(x2190,0)
                        [2.4 = max(2.0) + 0.4] x2192 = FixLst(Const(0),x2191)
                        Computing fullDFS: x2193
                        [2.4 = max(2.0) + 0.4] x2193 = FixLst(Const(1),x2191)
                        [2.6 = max(2.4, 2.4) + 0.2] x2194 = And(x2192,x2193)
                        [3.6 = max(2.6) + 1.0] x2196 = RegWrite(x2178,x2194,Set())
                        Computing fullDFS: x2197
                        Computing fullDFS: x2195
                        [2.8000000000000003 = max(2.6) + 0.2] x2195 = Not(x2194)
                        [3.8 = max(2.8) + 1.0] x2197 = RegWrite(x2180,x2195,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x2190 = SRAMBankedRead(x2147,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2191 = VecApply(x2190,0)
                          [2.4] x2192 = FixLst(Const(0),x2191)
                          [2.4] x2193 = FixLst(Const(1),x2191)
                          [2.6] x2194 = And(x2192,x2193)
                          [2.8] x2195 = Not(x2194)
                          [3.6] x2196 = RegWrite(x2178,x2194,Set())
                          [3.8] x2197 = RegWrite(x2180,x2195,Set())
                  x2217 = Switch(List(x2955, x2956),Block(x2216))
                    Working on pipeLatencies of result Vector(x2216, x2215, x2214, x2204, x2205, Const(90)), schedule Vector(x2215, x2216, x2204, x2205, x2206, x2207, x2208, x2209, x2210, x2211, x2212, x2213, x2214)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x2215 = SwitchCase(Block(x2214))
                      x2216 = SwitchCase(Block(Const(90)))
                      x2204 = RegRead(x2177)
                      x2205 = SRAMBankedRead(x2146,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2204)),Vec[Fix[TRUE,_10,_22]])
                      x2206 = VecApply(x2205,0)
                      x2207 = FixDiv(Const(100),x2206)
                      x2208 = FixDiv(x2207,x2206)
                      x2209 = FixDiv(x2208,x2206)
                      x2210 = FixDiv(x2209,x2206)
                      x2211 = FixDiv(x2210,x2206)
                      x2212 = FixDiv(Const(10),x2206)
                      x2213 = FixDiv(x2212,x2206)
                      x2214 = FixSub(x2211,x2213)
                    Computing fullDFS: x2216
                    cur: x2216, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2216 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x2215
                    Computing fullDFS: x2204
                    cur: x2204, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2204 = RegRead(x2177)
                    Computing fullDFS: x2205
                    [2.0 = max(0.0) + 2.0] x2205 = SRAMBankedRead(x2146,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2204)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x2214
                    Computing fullDFS: x2211
                    Computing fullDFS: x2206
                    [2.0 = max(2.0) + 0.0] x2206 = VecApply(x2205,0)
                    Computing fullDFS: x2210
                    Computing fullDFS: x2209
                    Computing fullDFS: x2208
                    Computing fullDFS: x2207
                    [22.0 = max(2.0) + 20.0] x2207 = FixDiv(Const(100),x2206)
                    [42.0 = max(2.0, 22.0) + 20.0] x2208 = FixDiv(x2207,x2206)
                    [62.0 = max(2.0, 42.0) + 20.0] x2209 = FixDiv(x2208,x2206)
                    [82.0 = max(2.0, 62.0) + 20.0] x2210 = FixDiv(x2209,x2206)
                    [102.0 = max(2.0, 82.0) + 20.0] x2211 = FixDiv(x2210,x2206)
                    Computing fullDFS: x2213
                    Computing fullDFS: x2212
                    [22.0 = max(2.0) + 20.0] x2212 = FixDiv(Const(10),x2206)
                    [42.0 = max(2.0, 22.0) + 20.0] x2213 = FixDiv(x2212,x2206)
                    [103.0 = max(102.0, 42.0) + 1.0] x2214 = FixSub(x2211,x2213)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x2215 = SwitchCase(Block(x2214))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x2216 = SwitchCase(Block(Const(90)))
                      [0.0] x2204 = RegRead(x2177)
                      [2.0] x2205 = SRAMBankedRead(x2146,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2204)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2206 = VecApply(x2205,0)
                      [22.0] x2207 = FixDiv(Const(100),x2206)
                      [22.0] x2212 = FixDiv(Const(10),x2206)
                      [42.0] x2208 = FixDiv(x2207,x2206)
                      [42.0] x2213 = FixDiv(x2212,x2206)
                      [62.0] x2209 = FixDiv(x2208,x2206)
                      [82.0] x2210 = FixDiv(x2209,x2206)
                      [102.0] x2211 = FixDiv(x2210,x2206)
                      [103.0] x2215 = SwitchCase(Block(x2214))
                      [103.0] x2214 = FixSub(x2211,x2213)
                  x2231 = Switch(List(x2957, x2958),Block(x2230))
                    Working on pipeLatencies of result Vector(x2230, x2229, x2228, x2218, x2219, Const(90)), schedule Vector(x2229, x2230, x2218, x2219, x2220, x2221, x2222, x2223, x2224, x2225, x2226, x2227, x2228)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x2229 = SwitchCase(Block(x2228))
                      x2230 = SwitchCase(Block(Const(90)))
                      x2218 = RegRead(x2178)
                      x2219 = SRAMBankedRead(x2147,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2218)),Vec[Fix[TRUE,_10,_22]])
                      x2220 = VecApply(x2219,0)
                      x2221 = FixDiv(Const(100),x2220)
                      x2222 = FixDiv(x2221,x2220)
                      x2223 = FixDiv(x2222,x2220)
                      x2224 = FixDiv(x2223,x2220)
                      x2225 = FixDiv(x2224,x2220)
                      x2226 = FixDiv(Const(10),x2220)
                      x2227 = FixDiv(x2226,x2220)
                      x2228 = FixSub(x2225,x2227)
                    Computing fullDFS: x2230
                    cur: x2230, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2230 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x2229
                    Computing fullDFS: x2218
                    cur: x2218, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2218 = RegRead(x2178)
                    Computing fullDFS: x2219
                    [2.0 = max(0.0) + 2.0] x2219 = SRAMBankedRead(x2147,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2218)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x2228
                    Computing fullDFS: x2225
                    Computing fullDFS: x2220
                    [2.0 = max(2.0) + 0.0] x2220 = VecApply(x2219,0)
                    Computing fullDFS: x2224
                    Computing fullDFS: x2223
                    Computing fullDFS: x2222
                    Computing fullDFS: x2221
                    [22.0 = max(2.0) + 20.0] x2221 = FixDiv(Const(100),x2220)
                    [42.0 = max(2.0, 22.0) + 20.0] x2222 = FixDiv(x2221,x2220)
                    [62.0 = max(2.0, 42.0) + 20.0] x2223 = FixDiv(x2222,x2220)
                    [82.0 = max(2.0, 62.0) + 20.0] x2224 = FixDiv(x2223,x2220)
                    [102.0 = max(2.0, 82.0) + 20.0] x2225 = FixDiv(x2224,x2220)
                    Computing fullDFS: x2227
                    Computing fullDFS: x2226
                    [22.0 = max(2.0) + 20.0] x2226 = FixDiv(Const(10),x2220)
                    [42.0 = max(2.0, 22.0) + 20.0] x2227 = FixDiv(x2226,x2220)
                    [103.0 = max(102.0, 42.0) + 1.0] x2228 = FixSub(x2225,x2227)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x2229 = SwitchCase(Block(x2228))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x2230 = SwitchCase(Block(Const(90)))
                      [0.0] x2218 = RegRead(x2178)
                      [2.0] x2219 = SRAMBankedRead(x2147,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2218)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2220 = VecApply(x2219,0)
                      [22.0] x2221 = FixDiv(Const(100),x2220)
                      [22.0] x2226 = FixDiv(Const(10),x2220)
                      [42.0] x2222 = FixDiv(x2221,x2220)
                      [42.0] x2227 = FixDiv(x2226,x2220)
                      [62.0] x2223 = FixDiv(x2222,x2220)
                      [82.0] x2224 = FixDiv(x2223,x2220)
                      [102.0] x2225 = FixDiv(x2224,x2220)
                      [103.0] x2229 = SwitchCase(Block(x2228))
                      [103.0] x2228 = FixSub(x2225,x2227)
                  x2236 = ParallelPipe(Set(b564),Block(Const(())))
                      x2233 = UnitPipe(Set(b2086, b564),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2232), schedule Vector(x2232)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2232 = SRAMBankedWrite(x2175,Vector(x2217),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2232
                        cur: x2232, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x2232 = SRAMBankedWrite(x2175,Vector(x2217),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x2232 = SRAMBankedWrite(x2175,Vector(x2217),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x2235 = UnitPipe(Set(b2087, b564),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2234), schedule Vector(x2234)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2234 = SRAMBankedWrite(x2176,Vector(x2231),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2234
                        cur: x2234, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x2234 = SRAMBankedWrite(x2176,Vector(x2231),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x2234 = SRAMBankedWrite(x2176,Vector(x2231),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x2269 = ParallelPipe(Set(b564),Block(Const(())))
                      x2254 = UnrolledForeach(Set(b2086, b564),x2239,Block(Const(())),List(List(b2241)),List(List(b2242)),None)
                        Working on pipeLatencies of result Vector(Const(()), x2250, x2249, x2243, x2253, x2246, x2252, x2251), schedule Vector(x2243, x2244, x2245, x2246, x2247, x2248, x2249, x2250, x2251, x2252, x2253)
                        Memories with both reads and writes in this scope: Set(x2092)
                        NonConflictSets(x2243, x2252): Set()
                        NonConflictSets(x2243, x2252): Set()
                        Found Cycle: x2243, x2252
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x2252 = SRAMBankedWrite(x2092,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          x2243 = SRAMBankedRead(x2092,Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                            x2243 = SRAMBankedRead(x2092,Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                            x2244 = VecApply(x2243,0)
                            x2245 = FixMul(x2244,Const(0.099999904632568359375))
                            x2248 = FixMul(x2245,x2247)
                            x2252 = SRAMBankedWrite(x2092,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                        Done finding cycles: Vector(AccumTriple(x2092,x2243,x2252)), Map(x2245 -> List(AccumTriple(x2092,x2243,x2252)), x2248 -> List(AccumTriple(x2092,x2243,x2252)), x2244 -> List(AccumTriple(x2092,x2243,x2252)), x2252 -> List(AccumTriple(x2092,x2243,x2252)), x2243 -> List(AccumTriple(x2092,x2243,x2252)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2243 = SRAMBankedRead(x2092,Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                          x2244 = VecApply(x2243,0)
                          x2245 = FixMul(x2244,Const(0.099999904632568359375))
                          x2246 = SRAMBankedRead(x2175,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                          x2247 = VecApply(x2246,0)
                          x2248 = FixMul(x2245,x2247)
                          x2249 = SRAMBankedWrite(x2090,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          x2250 = SRAMBankedWrite(x2093,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          x2251 = SRAMBankedWrite(x2089,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          x2252 = SRAMBankedWrite(x2092,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          x2253 = SRAMBankedWrite(x2091,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2250
                        Computing fullDFS: x2248
                        Computing fullDFS: x2245
                        Computing fullDFS: x2244
                        Computing fullDFS: x2243
                        cur: x2243, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x2092,x2243,x2252))
                        [2.0 = max(0) + 2.0] x2243 = SRAMBankedRead(x2092,Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        cycle deps of x2244: Vector(x2243, x2244)
                        [2.0 = max(2.0) + 0.0] x2244 = VecApply(x2243,0)[cycle]
                        cycle deps of x2245: Vector(x2243, x2244, x2245)
                        [8.0 = max(2.0) + 6.0] x2245 = FixMul(x2244,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x2247
                        Computing fullDFS: x2246
                        cur: x2246, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2246 = SRAMBankedRead(x2175,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2247 = VecApply(x2246,0)
                        cycle deps of x2248: Vector(x2243, x2244, x2245, x2248)
                        [14.0 = max(8.0, 2.0) + 6.0] x2248 = FixMul(x2245,x2247)[cycle]
                        cycle deps of x2250: Vector(x2243, x2244, x2245, x2248, x2250)
                        [15.0 = max(14.0) + 1.0] x2250 = SRAMBankedWrite(x2093,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                        Computing fullDFS: x2249
                        cycle deps of x2249: Vector(x2243, x2244, x2245, x2248, x2249)
                        [15.0 = max(14.0) + 1.0] x2249 = SRAMBankedWrite(x2090,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                        Computing fullDFS: x2253
                        cycle deps of x2253: Vector(x2243, x2244, x2245, x2248, x2253)
                        [15.0 = max(14.0) + 1.0] x2253 = SRAMBankedWrite(x2091,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                        Computing fullDFS: x2252
                        cycle deps of x2252: Vector(x2243, x2243, x2244, x2245, x2248, x2252)
                        [15.0 = max(2.0, 14.0) + 1.0] x2252 = SRAMBankedWrite(x2092,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))[cycle]
                        Computing fullDFS: x2251
                        cycle deps of x2251: Vector(x2243, x2244, x2245, x2248, x2251)
                        [15.0 = max(14.0) + 1.0] x2251 = SRAMBankedWrite(x2089,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                        Cycle #0: write: x2252, cycle: x2243, x2243, x2244, x2245, x2248, x2252
                        x2248 = FixMul(x2245,x2247) [14.0]
                          [14.0 = 15.0 - 1.0] x2249 = SRAMBankedWrite(x2090,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          [14.0 = 15.0 - 1.0] x2250 = SRAMBankedWrite(x2093,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          [14.0 = 15.0 - 1.0] x2251 = SRAMBankedWrite(x2089,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          [14.0 = 15.0 - 1.0] x2252 = SRAMBankedWrite(x2092,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          [14.0 = 15.0 - 1.0] x2253 = SRAMBankedWrite(x2091,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          [14.0]
                        x2245 = FixMul(x2244,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x2248 = FixMul(x2245,x2247)
                          [8.0]
                        x2244 = VecApply(x2243,0) [2.0]
                          [2.0 = 8.0 - 6.0] x2245 = FixMul(x2244,Const(0.099999904632568359375))
                          [2.0]
                        x2243 = SRAMBankedRead(x2092,Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2244 = VecApply(x2243,0)
                          [2.0]
                        x2243 = SRAMBankedRead(x2092,Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2244 = VecApply(x2243,0)
                          [2.0]
                        Cycles: Map(x2251 -> Vector(x2243, x2244, x2245, x2248, x2251), x2245 -> Vector(x2243, x2244, x2245), x2248 -> Vector(x2243, x2244, x2245, x2248), x2250 -> Vector(x2243, x2244, x2245, x2248, x2250), x2253 -> Vector(x2243, x2244, x2245, x2248, x2253), x2244 -> Vector(x2243, x2244), x2252 -> Vector(x2243, x2243, x2244, x2245, x2248, x2252), x2243 -> List(x2243), x2249 -> Vector(x2243, x2244, x2245, x2248, x2249))
                        pseudo cycles for x2092:
                        Multiplexed accesses for memory x2092: 
                          x2243 = SRAMBankedRead(x2092,Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                        Access: x2243 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2243 = SRAMBankedRead(x2092,Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x2092: 
                          x2252 = SRAMBankedWrite(x2092,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                        Access: x2252 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2252 = SRAMBankedWrite(x2092,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x2243),x2092,1.0)
                        AAACycle(Vector(x2252),x2092,1.0)
                        WARCycle(x2243,x2252,x2092,Vector(x2243, x2243, x2244, x2245, x2248, x2252),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x2243 = SRAMBankedRead(x2092,Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2244 = VecApply(x2243,0)
                          [2.0] x2246 = SRAMBankedRead(x2175,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2247 = VecApply(x2246,0)
                          [8.0] x2245 = FixMul(x2244,Const(0.099999904632568359375))
                          [14.0] x2248 = FixMul(x2245,x2247)
                          [15.0] x2249 = SRAMBankedWrite(x2090,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          [15.0] x2250 = SRAMBankedWrite(x2093,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          [15.0] x2251 = SRAMBankedWrite(x2089,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          [15.0] x2252 = SRAMBankedWrite(x2092,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                          [15.0] x2253 = SRAMBankedWrite(x2091,Vector(x2248),Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)))
                        Cycle #0 on x2092: 
                          x2092 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                      x2268 = UnrolledForeach(Set(b2087, b564),x2240,Block(Const(())),List(List(b2255)),List(List(b2256)),None)
                        Working on pipeLatencies of result Vector(x2263, Const(()), x2264, x2260, x2257, x2267, x2266, x2265), schedule Vector(x2257, x2258, x2259, x2260, x2261, x2262, x2263, x2264, x2265, x2266, x2267)
                        Memories with both reads and writes in this scope: Set(x2097)
                        NonConflictSets(x2257, x2264): Set()
                        NonConflictSets(x2257, x2264): Set()
                        Found Cycle: x2257, x2264
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x2264 = SRAMBankedWrite(x2097,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          x2257 = SRAMBankedRead(x2097,Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                            x2257 = SRAMBankedRead(x2097,Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                            x2258 = VecApply(x2257,0)
                            x2259 = FixMul(x2258,Const(0.099999904632568359375))
                            x2262 = FixMul(x2259,x2261)
                            x2264 = SRAMBankedWrite(x2097,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                        Done finding cycles: Vector(AccumTriple(x2097,x2257,x2264)), Map(x2257 -> List(AccumTriple(x2097,x2257,x2264)), x2259 -> List(AccumTriple(x2097,x2257,x2264)), x2262 -> List(AccumTriple(x2097,x2257,x2264)), x2264 -> List(AccumTriple(x2097,x2257,x2264)), x2258 -> List(AccumTriple(x2097,x2257,x2264)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2257 = SRAMBankedRead(x2097,Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                          x2258 = VecApply(x2257,0)
                          x2259 = FixMul(x2258,Const(0.099999904632568359375))
                          x2260 = SRAMBankedRead(x2176,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                          x2261 = VecApply(x2260,0)
                          x2262 = FixMul(x2259,x2261)
                          x2263 = SRAMBankedWrite(x2094,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          x2264 = SRAMBankedWrite(x2097,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          x2265 = SRAMBankedWrite(x2096,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          x2266 = SRAMBankedWrite(x2098,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          x2267 = SRAMBankedWrite(x2095,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                        Computing fullDFS: x2263
                        Computing fullDFS: x2262
                        Computing fullDFS: x2259
                        Computing fullDFS: x2258
                        Computing fullDFS: x2257
                        cur: x2257, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x2097,x2257,x2264))
                        [2.0 = max(0) + 2.0] x2257 = SRAMBankedRead(x2097,Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        cycle deps of x2258: Vector(x2257, x2258)
                        [2.0 = max(2.0) + 0.0] x2258 = VecApply(x2257,0)[cycle]
                        cycle deps of x2259: Vector(x2257, x2258, x2259)
                        [8.0 = max(2.0) + 6.0] x2259 = FixMul(x2258,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x2261
                        Computing fullDFS: x2260
                        cur: x2260, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2260 = SRAMBankedRead(x2176,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2261 = VecApply(x2260,0)
                        cycle deps of x2262: Vector(x2257, x2258, x2259, x2262)
                        [14.0 = max(8.0, 2.0) + 6.0] x2262 = FixMul(x2259,x2261)[cycle]
                        cycle deps of x2263: Vector(x2257, x2258, x2259, x2262, x2263)
                        [15.0 = max(14.0) + 1.0] x2263 = SRAMBankedWrite(x2094,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2264
                        cycle deps of x2264: Vector(x2257, x2257, x2258, x2259, x2262, x2264)
                        [15.0 = max(2.0, 14.0) + 1.0] x2264 = SRAMBankedWrite(x2097,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))[cycle]
                        Computing fullDFS: x2267
                        cycle deps of x2267: Vector(x2257, x2258, x2259, x2262, x2267)
                        [15.0 = max(14.0) + 1.0] x2267 = SRAMBankedWrite(x2095,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                        Computing fullDFS: x2266
                        cycle deps of x2266: Vector(x2257, x2258, x2259, x2262, x2266)
                        [15.0 = max(14.0) + 1.0] x2266 = SRAMBankedWrite(x2098,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                        Computing fullDFS: x2265
                        cycle deps of x2265: Vector(x2257, x2258, x2259, x2262, x2265)
                        [15.0 = max(14.0) + 1.0] x2265 = SRAMBankedWrite(x2096,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                        Cycle #0: write: x2264, cycle: x2257, x2257, x2258, x2259, x2262, x2264
                        x2262 = FixMul(x2259,x2261) [14.0]
                          [14.0 = 15.0 - 1.0] x2263 = SRAMBankedWrite(x2094,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          [14.0 = 15.0 - 1.0] x2264 = SRAMBankedWrite(x2097,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          [14.0 = 15.0 - 1.0] x2265 = SRAMBankedWrite(x2096,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          [14.0 = 15.0 - 1.0] x2266 = SRAMBankedWrite(x2098,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          [14.0 = 15.0 - 1.0] x2267 = SRAMBankedWrite(x2095,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          [14.0]
                        x2259 = FixMul(x2258,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x2262 = FixMul(x2259,x2261)
                          [8.0]
                        x2258 = VecApply(x2257,0) [2.0]
                          [2.0 = 8.0 - 6.0] x2259 = FixMul(x2258,Const(0.099999904632568359375))
                          [2.0]
                        x2257 = SRAMBankedRead(x2097,Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2258 = VecApply(x2257,0)
                          [2.0]
                        x2257 = SRAMBankedRead(x2097,Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2258 = VecApply(x2257,0)
                          [2.0]
                        Cycles: Map(x2266 -> Vector(x2257, x2258, x2259, x2262, x2266), x2257 -> List(x2257), x2263 -> Vector(x2257, x2258, x2259, x2262, x2263), x2265 -> Vector(x2257, x2258, x2259, x2262, x2265), x2259 -> Vector(x2257, x2258, x2259), x2262 -> Vector(x2257, x2258, x2259, x2262), x2264 -> Vector(x2257, x2257, x2258, x2259, x2262, x2264), x2267 -> Vector(x2257, x2258, x2259, x2262, x2267), x2258 -> Vector(x2257, x2258))
                        pseudo cycles for x2097:
                        Multiplexed accesses for memory x2097: 
                          x2257 = SRAMBankedRead(x2097,Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                        Access: x2257 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2257 = SRAMBankedRead(x2097,Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x2097: 
                          x2264 = SRAMBankedWrite(x2097,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                        Access: x2264 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2264 = SRAMBankedWrite(x2097,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x2257),x2097,1.0)
                        AAACycle(Vector(x2264),x2097,1.0)
                        WARCycle(x2257,x2264,x2097,Vector(x2257, x2257, x2258, x2259, x2262, x2264),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x2257 = SRAMBankedRead(x2097,Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2258 = VecApply(x2257,0)
                          [2.0] x2260 = SRAMBankedRead(x2176,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2261 = VecApply(x2260,0)
                          [8.0] x2259 = FixMul(x2258,Const(0.099999904632568359375))
                          [14.0] x2262 = FixMul(x2259,x2261)
                          [15.0] x2263 = SRAMBankedWrite(x2094,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          [15.0] x2264 = SRAMBankedWrite(x2097,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          [15.0] x2265 = SRAMBankedWrite(x2096,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          [15.0] x2266 = SRAMBankedWrite(x2098,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                          [15.0] x2267 = SRAMBankedWrite(x2095,Vector(x2262),Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)))
                        Cycle #0 on x2097: 
                          x2097 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                  x2289 = UnrolledForeach(Set(),x624,Block(Const(())),Vector(List(b2085)),Vector(List(b2088)),None)
                    Working on pipeLatencies of result Vector(Const(()), x2274, x2272, x2288, x2287, x2270), schedule Vector(x2270, x2271, x2272, x2273, x2274, x2275, x2276, x2278, x2280, x2281, x2282, x2284, x2285, x2286, x2287, x2288)
                    Memories with both reads and writes in this scope: Set(x581)
                    NonConflictSets(x2274, x2288): Set()
                    NonConflictSets(x2274, x2288): Set()
                    Found Cycle: x2274, x2288
                    Exclusions: Set() Set() 
                    Found cycle between: 
                      x2288 = SRAMBankedWrite(x581,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)))
                      x2274 = SRAMBankedRead(x581,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
                        x2274 = SRAMBankedRead(x581,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
                        x2275 = VecApply(x2274,0)
                        x2285 = FixAdd(x2282,x2275)
                        x2286 = Mux(x2284,x2282,x2285)
                        x2288 = SRAMBankedWrite(x581,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)))
                    Done finding cycles: Vector(AccumTriple(x581,x2274,x2288)), Map(x2275 -> List(AccumTriple(x581,x2274,x2288)), x2274 -> List(AccumTriple(x581,x2274,x2288)), x2286 -> List(AccumTriple(x581,x2274,x2288)), x2288 -> List(AccumTriple(x581,x2274,x2288)), x2285 -> List(AccumTriple(x581,x2274,x2288)))
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x2270 = SRAMBankedRead(x2093,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
                      x2271 = VecApply(x2270,0)
                      x2272 = SRAMBankedRead(x2098,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
                      x2273 = VecApply(x2272,0)
                      x2274 = SRAMBankedRead(x581,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
                      x2275 = VecApply(x2274,0)
                      x2276 = And(b2088,b564)
                      x2278 = And(b2087,b564)
                      x2280 = And(x2278,x2276)
                      x2281 = FixAdd(x2271,x2273)
                      x2282 = Mux(x2280,x2281,x2271)
                      x2284 = FixEql(b2083,Const(0))
                      x2285 = FixAdd(x2282,x2275)
                      x2286 = Mux(x2284,x2282,x2285)
                      x2287 = SRAMBankedWrite(x582,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)))
                      x2288 = SRAMBankedWrite(x581,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)))
                    Computing fullDFS: Const(())
                    Computing fullDFS: x2274
                    cur: x2274, inReduce: true, latency: 2.0
                    Known Cycles: List(AccumTriple(x581,x2274,x2288))
                    [2.0 = max(0) + 2.0] x2274 = SRAMBankedRead(x581,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])[cycle]
                    Computing fullDFS: x2272
                    cur: x2272, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x2272 = SRAMBankedRead(x2098,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x2288
                    Computing fullDFS: x2286
                    Computing fullDFS: x2282
                    Computing fullDFS: x2271
                    Computing fullDFS: x2270
                    cur: x2270, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x2270 = SRAMBankedRead(x2093,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x2271 = VecApply(x2270,0)
                    Computing fullDFS: x2280
                    Computing fullDFS: x2276
                    cur: x2276, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x2276 = And(b2088,b564)
                    Computing fullDFS: x2278
                    cur: x2278, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x2278 = And(b2087,b564)
                    [0.4 = max(0.2, 0.2) + 0.2] x2280 = And(x2278,x2276)
                    Computing fullDFS: x2281
                    Computing fullDFS: x2273
                    [2.0 = max(2.0) + 0.0] x2273 = VecApply(x2272,0)
                    [3.0 = max(2.0, 2.0) + 1.0] x2281 = FixAdd(x2271,x2273)
                    [3.5 = max(2.0, 0.4, 3.0) + 0.5] x2282 = Mux(x2280,x2281,x2271)
                    Computing fullDFS: x2284
                    cur: x2284, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x2284 = FixEql(b2083,Const(0))
                    Computing fullDFS: x2285
                    Computing fullDFS: x2275
                    cycle deps of x2275: Vector(x2274, x2275)
                    [2.0 = max(2.0) + 0.0] x2275 = VecApply(x2274,0)[cycle]
                    cycle deps of x2285: Vector(x2274, x2275, x2285)
                    [4.5 = max(2.0, 3.5) + 1.0] x2285 = FixAdd(x2282,x2275)[cycle]
                    cycle deps of x2286: Vector(x2274, x2275, x2285, x2286)
                    [5.0 = max(3.5, 0.2, 4.5) + 0.5] x2286 = Mux(x2284,x2282,x2285)[cycle]
                    cycle deps of x2288: Vector(x2274, x2274, x2275, x2285, x2286, x2288)
                    [6.0 = max(2.0, 5.0) + 1.0] x2288 = SRAMBankedWrite(x581,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)))[cycle]
                    Computing fullDFS: x2287
                    cycle deps of x2287: Vector(x2274, x2275, x2285, x2286, x2287)
                    [6.0 = max(5.0) + 1.0] x2287 = SRAMBankedWrite(x582,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)))
                    Cycle #0: write: x2288, cycle: x2274, x2274, x2275, x2285, x2286, x2288
                    x2286 = Mux(x2284,x2282,x2285) [5.0]
                      [5.0 = 6.0 - 1.0] x2287 = SRAMBankedWrite(x582,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)))
                      [5.0 = 6.0 - 1.0] x2288 = SRAMBankedWrite(x581,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)))
                      [5.0]
                    x2285 = FixAdd(x2282,x2275) [4.5]
                      [4.5 = 5.0 - 0.5] x2286 = Mux(x2284,x2282,x2285)
                      [4.5]
                    x2275 = VecApply(x2274,0) [2.0]
                      [3.5 = 4.5 - 1.0] x2285 = FixAdd(x2282,x2275)
                      [3.5]
                    x2274 = SRAMBankedRead(x581,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                      [3.5 = 3.5 - 0.0] x2275 = VecApply(x2274,0)
                      [3.5]
                    x2274 = SRAMBankedRead(x581,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]]) [3.5]
                      [3.5 = 3.5 - 0.0] x2275 = VecApply(x2274,0)
                      [3.5]
                    Cycles: Map(x2275 -> Vector(x2274, x2275), x2287 -> Vector(x2274, x2275, x2285, x2286, x2287), x2274 -> List(x2274), x2286 -> Vector(x2274, x2275, x2285, x2286), x2288 -> Vector(x2274, x2274, x2275, x2285, x2286, x2288), x2285 -> Vector(x2274, x2275, x2285))
                    pseudo cycles for x581:
                    Multiplexed accesses for memory x581: 
                      x2274 = SRAMBankedRead(x581,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
                    Access: x2274 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x2274 = SRAMBankedRead(x581,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 3.5 due to muxing.
                    Multiplexed accesses for memory x581: 
                      x2288 = SRAMBankedWrite(x581,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)))
                    Access: x2288 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x2288 = SRAMBankedWrite(x581,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564))) by 0.0 to 6.0 due to muxing.
                    Found cycles: 
                    AAACycle(Vector(x2274),x581,1.0)
                    AAACycle(Vector(x2288),x581,1.0)
                    WARCycle(x2274,x2288,x581,Vector(x2274, x2274, x2275, x2285, x2286, x2288),5.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                      Schedule after pipeLatencies calculation:
                      [0.2] x2276 = And(b2088,b564)
                      [0.2] x2278 = And(b2087,b564)
                      [0.2] x2284 = FixEql(b2083,Const(0))
                      [0.4] x2280 = And(x2278,x2276)
                      [2.0] x2270 = SRAMBankedRead(x2093,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2271 = VecApply(x2270,0)
                      [2.0] x2272 = SRAMBankedRead(x2098,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2273 = VecApply(x2272,0)
                      [3.0] x2281 = FixAdd(x2271,x2273)
                      [3.5] x2274 = SRAMBankedRead(x581,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]])
                      [3.5] x2275 = VecApply(x2274,0)
                      [3.5] x2282 = Mux(x2280,x2281,x2271)
                      [4.5] x2285 = FixAdd(x2282,x2275)
                      [5.0] x2286 = Mux(x2284,x2282,x2285)
                      [6.0] x2287 = SRAMBankedWrite(x582,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)))
                      [6.0] x2288 = SRAMBankedWrite(x581,Vector(x2286),Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)))
                    Cycle #0 on x581: 
                      x581 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [accum_0]
                      disjoint:     true
                      no visible intermediates:
                        closed cycle:     false
                        no intermediates: true
                        is local mem:     true
                        number of writers:  1
                        outer reduce:     false
                        accum type:       Fold (if reduce, overrides no intermediates)
              x2498 = UnrolledReduce(Set(b565),x605,Block((x583) => Const(())),List(List(b2291, b2292)),List(List(b2294, b2295)),None)
                  x2353 = ParallelPipe(Set(b565),Block(Const(())))
                      x2331 = UnrolledForeach(Set(b2294, b565),x2309,Block(Const(())),List(List(b2311)),List(List(b2312)),None)
                        Working on pipeLatencies of result Vector(Const(()), x2328, x2327, x2323, x2317, x2326, x2329, x2330), schedule Vector(x2314, x3073, x3074, x2316, x2317, x2318, x2320, x3075, x3076, x2322, x2323, x2324, x2325, x2326, x2327, x2328, x2329, x2330)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2314 = FixDiv(b555,Const(10))
                          x3073 = FixSLA(x2314,Const(1))
                          x3074 = FixAdd(x3073,x2314)
                          x2316 = FixAdd(x3074,b2311)
                          x2317 = SRAMBankedRead(x471,Vector(List(Const(8), Const(0))),Vector(x2316),Vector(Set(b2312, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                          x2318 = VecApply(x2317,0)
                          x2320 = FixDivSRA(b2291,Const(1))
                          x3075 = FixSLA(x2320,Const(1))
                          x3076 = FixAdd(x3075,x2320)
                          x2322 = FixAdd(x3076,b2311)
                          x2323 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x2322),Vector(Set(b2312, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                          x2324 = VecApply(x2323,0)
                          x2325 = FixSub(x2318,x2324)
                          x2326 = SRAMBankedWrite(x2301,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                          x2327 = SRAMBankedWrite(x2300,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                          x2328 = SRAMBankedWrite(x2299,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                          x2329 = SRAMBankedWrite(x2298,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                          x2330 = SRAMBankedWrite(x2297,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2328
                        Computing fullDFS: x2325
                        Computing fullDFS: x2318
                        Computing fullDFS: x2317
                        Computing fullDFS: x2316
                        Computing fullDFS: x3074
                        Computing fullDFS: x2314
                        cur: x2314, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x2314 = FixDiv(b555,Const(10))
                        Computing fullDFS: x3073
                        [20.2 = max(20.0) + 0.2] x3073 = FixSLA(x2314,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3074 = FixAdd(x3073,x2314)
                        [22.2 = max(21.2) + 1.0] x2316 = FixAdd(x3074,b2311)
                        [24.2 = max(22.2) + 2.0] x2317 = SRAMBankedRead(x471,Vector(List(Const(8), Const(0))),Vector(x2316),Vector(Set(b2312, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x2318 = VecApply(x2317,0)
                        Computing fullDFS: x2324
                        Computing fullDFS: x2323
                        Computing fullDFS: x2322
                        Computing fullDFS: x3076
                        Computing fullDFS: x2320
                        cur: x2320, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x2320 = FixDivSRA(b2291,Const(1))
                        Computing fullDFS: x3075
                        [0.4 = max(0.2) + 0.2] x3075 = FixSLA(x2320,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3076 = FixAdd(x3075,x2320)
                        [2.4 = max(1.4) + 1.0] x2322 = FixAdd(x3076,b2311)
                        [4.4 = max(2.4) + 2.0] x2323 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x2322),Vector(Set(b2312, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x2324 = VecApply(x2323,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x2325 = FixSub(x2318,x2324)
                        [26.2 = max(25.2) + 1.0] x2328 = SRAMBankedWrite(x2299,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                        Computing fullDFS: x2327
                        [26.2 = max(25.2) + 1.0] x2327 = SRAMBankedWrite(x2300,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                        Computing fullDFS: x2326
                        [26.2 = max(25.2) + 1.0] x2326 = SRAMBankedWrite(x2301,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                        Computing fullDFS: x2329
                        [26.2 = max(25.2) + 1.0] x2329 = SRAMBankedWrite(x2298,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                        Computing fullDFS: x2330
                        [26.2 = max(25.2) + 1.0] x2330 = SRAMBankedWrite(x2297,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x2320 = FixDivSRA(b2291,Const(1))
                          [0.4] x3075 = FixSLA(x2320,Const(1))
                          [1.4] x3076 = FixAdd(x3075,x2320)
                          [2.4] x2322 = FixAdd(x3076,b2311)
                          [4.4] x2323 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x2322),Vector(Set(b2312, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x2324 = VecApply(x2323,0)
                          [20.0] x2314 = FixDiv(b555,Const(10))
                          [20.2] x3073 = FixSLA(x2314,Const(1))
                          [21.2] x3074 = FixAdd(x3073,x2314)
                          [22.2] x2316 = FixAdd(x3074,b2311)
                          [24.2] x2317 = SRAMBankedRead(x471,Vector(List(Const(8), Const(0))),Vector(x2316),Vector(Set(b2312, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x2318 = VecApply(x2317,0)
                          [25.2] x2325 = FixSub(x2318,x2324)
                          [26.2] x2326 = SRAMBankedWrite(x2301,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                          [26.2] x2327 = SRAMBankedWrite(x2300,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                          [26.2] x2328 = SRAMBankedWrite(x2299,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                          [26.2] x2329 = SRAMBankedWrite(x2298,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                          [26.2] x2330 = SRAMBankedWrite(x2297,Vector(x2325),Vector(List(Const(0))),Vector(b2311),Vector(Set(b2312, b2294, b565)))
                      x2352 = UnrolledForeach(Set(b2295, b565),x2310,Block(Const(())),List(List(b2332)),List(List(b2333)),None)
                        Working on pipeLatencies of result Vector(Const(()), x2348, x2344, x2349, x2338, x2350, x2347, x2351), schedule Vector(x2335, x3077, x3078, x2337, x2338, x2339, x2341, x3079, x3080, x2343, x2344, x2345, x2346, x2347, x2348, x2349, x2350, x2351)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2335 = FixDiv(b555,Const(10))
                          x3077 = FixSLA(x2335,Const(1))
                          x3078 = FixAdd(x3077,x2335)
                          x2337 = FixAdd(x3078,b2332)
                          x2338 = SRAMBankedRead(x471,Vector(List(Const(8), Const(0))),Vector(x2337),Vector(Set(b2333, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                          x2339 = VecApply(x2338,0)
                          x2341 = FixDivSRA(b2292,Const(1))
                          x3079 = FixSLA(x2341,Const(1))
                          x3080 = FixAdd(x3079,x2341)
                          x2343 = FixAdd(x3080,b2332)
                          x2344 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x2343),Vector(Set(b2333, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                          x2345 = VecApply(x2344,0)
                          x2346 = FixSub(x2339,x2345)
                          x2347 = SRAMBankedWrite(x2306,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                          x2348 = SRAMBankedWrite(x2304,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                          x2349 = SRAMBankedWrite(x2303,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                          x2350 = SRAMBankedWrite(x2305,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                          x2351 = SRAMBankedWrite(x2302,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2348
                        Computing fullDFS: x2346
                        Computing fullDFS: x2339
                        Computing fullDFS: x2338
                        Computing fullDFS: x2337
                        Computing fullDFS: x3078
                        Computing fullDFS: x2335
                        cur: x2335, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x2335 = FixDiv(b555,Const(10))
                        Computing fullDFS: x3077
                        [20.2 = max(20.0) + 0.2] x3077 = FixSLA(x2335,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3078 = FixAdd(x3077,x2335)
                        [22.2 = max(21.2) + 1.0] x2337 = FixAdd(x3078,b2332)
                        [24.2 = max(22.2) + 2.0] x2338 = SRAMBankedRead(x471,Vector(List(Const(8), Const(0))),Vector(x2337),Vector(Set(b2333, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x2339 = VecApply(x2338,0)
                        Computing fullDFS: x2345
                        Computing fullDFS: x2344
                        Computing fullDFS: x2343
                        Computing fullDFS: x3080
                        Computing fullDFS: x2341
                        cur: x2341, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x2341 = FixDivSRA(b2292,Const(1))
                        Computing fullDFS: x3079
                        [0.4 = max(0.2) + 0.2] x3079 = FixSLA(x2341,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3080 = FixAdd(x3079,x2341)
                        [2.4 = max(1.4) + 1.0] x2343 = FixAdd(x3080,b2332)
                        [4.4 = max(2.4) + 2.0] x2344 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x2343),Vector(Set(b2333, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x2345 = VecApply(x2344,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x2346 = FixSub(x2339,x2345)
                        [26.2 = max(25.2) + 1.0] x2348 = SRAMBankedWrite(x2304,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                        Computing fullDFS: x2349
                        [26.2 = max(25.2) + 1.0] x2349 = SRAMBankedWrite(x2303,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                        Computing fullDFS: x2350
                        [26.2 = max(25.2) + 1.0] x2350 = SRAMBankedWrite(x2305,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                        Computing fullDFS: x2347
                        [26.2 = max(25.2) + 1.0] x2347 = SRAMBankedWrite(x2306,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                        Computing fullDFS: x2351
                        [26.2 = max(25.2) + 1.0] x2351 = SRAMBankedWrite(x2302,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x2341 = FixDivSRA(b2292,Const(1))
                          [0.4] x3079 = FixSLA(x2341,Const(1))
                          [1.4] x3080 = FixAdd(x3079,x2341)
                          [2.4] x2343 = FixAdd(x3080,b2332)
                          [4.4] x2344 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x2343),Vector(Set(b2333, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x2345 = VecApply(x2344,0)
                          [20.0] x2335 = FixDiv(b555,Const(10))
                          [20.2] x3077 = FixSLA(x2335,Const(1))
                          [21.2] x3078 = FixAdd(x3077,x2335)
                          [22.2] x2337 = FixAdd(x3078,b2332)
                          [24.2] x2338 = SRAMBankedRead(x471,Vector(List(Const(8), Const(0))),Vector(x2337),Vector(Set(b2333, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x2339 = VecApply(x2338,0)
                          [25.2] x2346 = FixSub(x2339,x2345)
                          [26.2] x2347 = SRAMBankedWrite(x2306,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                          [26.2] x2348 = SRAMBankedWrite(x2304,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                          [26.2] x2349 = SRAMBankedWrite(x2303,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                          [26.2] x2350 = SRAMBankedWrite(x2305,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                          [26.2] x2351 = SRAMBankedWrite(x2302,Vector(x2346),Vector(List(Const(0))),Vector(b2332),Vector(Set(b2333, b2295, b565)))
                  x2382 = ParallelPipe(Set(b565),Block(Const(())))
                      x2368 = UnitPipe(Set(b2294, b565),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2363, x2356, x2367, x2359), schedule Vector(x2356, x2357, x2359, x2360, x2361, x3081, x2363, x2364, x3082, x2367)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2356 = SRAMBankedRead(x2297,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2357 = VecApply(x2356,0)
                          x2359 = SRAMBankedRead(x2298,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2360 = VecApply(x2359,0)
                          x2361 = FixMul(x2360,x2360)
                          x3081 = FixFMA(x2357,x2357,x2361)
                          x2363 = SRAMBankedRead(x2299,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2364 = VecApply(x2363,0)
                          x3082 = FixFMA(x2364,x2364,x3081)
                          x2367 = SRAMBankedWrite(x2354,Vector(x3082),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2363
                        cur: x2363, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2363 = SRAMBankedRead(x2299,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2356
                        cur: x2356, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2356 = SRAMBankedRead(x2297,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2367
                        Computing fullDFS: x3082
                        Computing fullDFS: x3081
                        Computing fullDFS: x2357
                        [2.0 = max(2.0) + 0.0] x2357 = VecApply(x2356,0)
                        Computing fullDFS: x2361
                        Computing fullDFS: x2360
                        Computing fullDFS: x2359
                        cur: x2359, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2359 = SRAMBankedRead(x2298,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2360 = VecApply(x2359,0)
                        [8.0 = max(2.0) + 6.0] x2361 = FixMul(x2360,x2360)
                        [14.0 = max(2.0, 8.0) + 6.0] x3081 = FixFMA(x2357,x2357,x2361)
                        Computing fullDFS: x2364
                        [2.0 = max(2.0) + 0.0] x2364 = VecApply(x2363,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3082 = FixFMA(x2364,x2364,x3081)
                        [21.0 = max(20.0) + 1.0] x2367 = SRAMBankedWrite(x2354,Vector(x3082),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x2356 = SRAMBankedRead(x2297,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2357 = VecApply(x2356,0)
                          [2.0] x2359 = SRAMBankedRead(x2298,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2360 = VecApply(x2359,0)
                          [2.0] x2363 = SRAMBankedRead(x2299,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2364 = VecApply(x2363,0)
                          [8.0] x2361 = FixMul(x2360,x2360)
                          [14.0] x3081 = FixFMA(x2357,x2357,x2361)
                          [20.0] x3082 = FixFMA(x2364,x2364,x3081)
                          [21.0] x2367 = SRAMBankedWrite(x2354,Vector(x3082),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x2381 = UnitPipe(Set(b2295, b565),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2380, x2376, x2369, x2372), schedule Vector(x2369, x2370, x2372, x2373, x2374, x3083, x2376, x2377, x3084, x2380)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2369 = SRAMBankedRead(x2302,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2370 = VecApply(x2369,0)
                          x2372 = SRAMBankedRead(x2303,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2373 = VecApply(x2372,0)
                          x2374 = FixMul(x2373,x2373)
                          x3083 = FixFMA(x2370,x2370,x2374)
                          x2376 = SRAMBankedRead(x2304,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2377 = VecApply(x2376,0)
                          x3084 = FixFMA(x2377,x2377,x3083)
                          x2380 = SRAMBankedWrite(x2355,Vector(x3084),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2380
                        Computing fullDFS: x3084
                        Computing fullDFS: x3083
                        Computing fullDFS: x2370
                        Computing fullDFS: x2369
                        cur: x2369, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2369 = SRAMBankedRead(x2302,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2370 = VecApply(x2369,0)
                        Computing fullDFS: x2374
                        Computing fullDFS: x2373
                        Computing fullDFS: x2372
                        cur: x2372, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2372 = SRAMBankedRead(x2303,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2373 = VecApply(x2372,0)
                        [8.0 = max(2.0) + 6.0] x2374 = FixMul(x2373,x2373)
                        [14.0 = max(2.0, 8.0) + 6.0] x3083 = FixFMA(x2370,x2370,x2374)
                        Computing fullDFS: x2377
                        Computing fullDFS: x2376
                        cur: x2376, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2376 = SRAMBankedRead(x2304,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2377 = VecApply(x2376,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3084 = FixFMA(x2377,x2377,x3083)
                        [21.0 = max(20.0) + 1.0] x2380 = SRAMBankedWrite(x2355,Vector(x3084),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x2369 = SRAMBankedRead(x2302,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2370 = VecApply(x2369,0)
                          [2.0] x2372 = SRAMBankedRead(x2303,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2373 = VecApply(x2372,0)
                          [2.0] x2376 = SRAMBankedRead(x2304,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2377 = VecApply(x2376,0)
                          [8.0] x2374 = FixMul(x2373,x2373)
                          [14.0] x3083 = FixFMA(x2370,x2370,x2374)
                          [20.0] x3084 = FixFMA(x2377,x2377,x3083)
                          [21.0] x2380 = SRAMBankedWrite(x2355,Vector(x3084),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x2407 = ParallelPipe(Set(b565),Block(Const(())))
                      x2397 = UnitPipe(Set(b2294, b565),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2389, x2395, x2396), schedule Vector(x2389, x2390, x2391, x2392, x2393, x2394, x2395, x2396)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2389 = SRAMBankedRead(x2354,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2390 = VecApply(x2389,0)
                          x2391 = FixLst(Const(0),x2390)
                          x2392 = FixLst(Const(1),x2390)
                          x2393 = And(x2391,x2392)
                          x2394 = Not(x2393)
                          x2395 = RegWrite(x2385,x2393,Set())
                          x2396 = RegWrite(x2387,x2394,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2389
                        cur: x2389, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2389 = SRAMBankedRead(x2354,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2395
                        Computing fullDFS: x2393
                        Computing fullDFS: x2391
                        Computing fullDFS: x2390
                        [2.0 = max(2.0) + 0.0] x2390 = VecApply(x2389,0)
                        [2.4 = max(2.0) + 0.4] x2391 = FixLst(Const(0),x2390)
                        Computing fullDFS: x2392
                        [2.4 = max(2.0) + 0.4] x2392 = FixLst(Const(1),x2390)
                        [2.6 = max(2.4, 2.4) + 0.2] x2393 = And(x2391,x2392)
                        [3.6 = max(2.6) + 1.0] x2395 = RegWrite(x2385,x2393,Set())
                        Computing fullDFS: x2396
                        Computing fullDFS: x2394
                        [2.8000000000000003 = max(2.6) + 0.2] x2394 = Not(x2393)
                        [3.8 = max(2.8) + 1.0] x2396 = RegWrite(x2387,x2394,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x2389 = SRAMBankedRead(x2354,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2390 = VecApply(x2389,0)
                          [2.4] x2391 = FixLst(Const(0),x2390)
                          [2.4] x2392 = FixLst(Const(1),x2390)
                          [2.6] x2393 = And(x2391,x2392)
                          [2.8] x2394 = Not(x2393)
                          [3.6] x2395 = RegWrite(x2385,x2393,Set())
                          [3.8] x2396 = RegWrite(x2387,x2394,Set())
                      x2406 = UnitPipe(Set(b2295, b565),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2398, x2404, x2405), schedule Vector(x2398, x2399, x2400, x2401, x2402, x2403, x2404, x2405)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2398 = SRAMBankedRead(x2355,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2399 = VecApply(x2398,0)
                          x2400 = FixLst(Const(0),x2399)
                          x2401 = FixLst(Const(1),x2399)
                          x2402 = And(x2400,x2401)
                          x2403 = Not(x2402)
                          x2404 = RegWrite(x2386,x2402,Set())
                          x2405 = RegWrite(x2388,x2403,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2398
                        cur: x2398, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2398 = SRAMBankedRead(x2355,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2404
                        Computing fullDFS: x2402
                        Computing fullDFS: x2400
                        Computing fullDFS: x2399
                        [2.0 = max(2.0) + 0.0] x2399 = VecApply(x2398,0)
                        [2.4 = max(2.0) + 0.4] x2400 = FixLst(Const(0),x2399)
                        Computing fullDFS: x2401
                        [2.4 = max(2.0) + 0.4] x2401 = FixLst(Const(1),x2399)
                        [2.6 = max(2.4, 2.4) + 0.2] x2402 = And(x2400,x2401)
                        [3.6 = max(2.6) + 1.0] x2404 = RegWrite(x2386,x2402,Set())
                        Computing fullDFS: x2405
                        Computing fullDFS: x2403
                        [2.8000000000000003 = max(2.6) + 0.2] x2403 = Not(x2402)
                        [3.8 = max(2.8) + 1.0] x2405 = RegWrite(x2388,x2403,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x2398 = SRAMBankedRead(x2355,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2399 = VecApply(x2398,0)
                          [2.4] x2400 = FixLst(Const(0),x2399)
                          [2.4] x2401 = FixLst(Const(1),x2399)
                          [2.6] x2402 = And(x2400,x2401)
                          [2.8] x2403 = Not(x2402)
                          [3.6] x2404 = RegWrite(x2386,x2402,Set())
                          [3.8] x2405 = RegWrite(x2388,x2403,Set())
                  x2425 = Switch(List(x2959, x2960),Block(x2424))
                    Working on pipeLatencies of result Vector(x2424, x2423, x2422, x2412, x2413, Const(90)), schedule Vector(x2423, x2424, x2412, x2413, x2414, x2415, x2416, x2417, x2418, x2419, x2420, x2421, x2422)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x2423 = SwitchCase(Block(x2422))
                      x2424 = SwitchCase(Block(Const(90)))
                      x2412 = RegRead(x2385)
                      x2413 = SRAMBankedRead(x2354,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2412)),Vec[Fix[TRUE,_10,_22]])
                      x2414 = VecApply(x2413,0)
                      x2415 = FixDiv(Const(100),x2414)
                      x2416 = FixDiv(x2415,x2414)
                      x2417 = FixDiv(x2416,x2414)
                      x2418 = FixDiv(x2417,x2414)
                      x2419 = FixDiv(x2418,x2414)
                      x2420 = FixDiv(Const(10),x2414)
                      x2421 = FixDiv(x2420,x2414)
                      x2422 = FixSub(x2419,x2421)
                    Computing fullDFS: x2424
                    cur: x2424, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2424 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x2423
                    Computing fullDFS: x2412
                    cur: x2412, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2412 = RegRead(x2385)
                    Computing fullDFS: x2413
                    [2.0 = max(0.0) + 2.0] x2413 = SRAMBankedRead(x2354,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2412)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x2422
                    Computing fullDFS: x2419
                    Computing fullDFS: x2414
                    [2.0 = max(2.0) + 0.0] x2414 = VecApply(x2413,0)
                    Computing fullDFS: x2418
                    Computing fullDFS: x2417
                    Computing fullDFS: x2416
                    Computing fullDFS: x2415
                    [22.0 = max(2.0) + 20.0] x2415 = FixDiv(Const(100),x2414)
                    [42.0 = max(2.0, 22.0) + 20.0] x2416 = FixDiv(x2415,x2414)
                    [62.0 = max(2.0, 42.0) + 20.0] x2417 = FixDiv(x2416,x2414)
                    [82.0 = max(2.0, 62.0) + 20.0] x2418 = FixDiv(x2417,x2414)
                    [102.0 = max(2.0, 82.0) + 20.0] x2419 = FixDiv(x2418,x2414)
                    Computing fullDFS: x2421
                    Computing fullDFS: x2420
                    [22.0 = max(2.0) + 20.0] x2420 = FixDiv(Const(10),x2414)
                    [42.0 = max(2.0, 22.0) + 20.0] x2421 = FixDiv(x2420,x2414)
                    [103.0 = max(102.0, 42.0) + 1.0] x2422 = FixSub(x2419,x2421)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x2423 = SwitchCase(Block(x2422))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x2424 = SwitchCase(Block(Const(90)))
                      [0.0] x2412 = RegRead(x2385)
                      [2.0] x2413 = SRAMBankedRead(x2354,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2412)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2414 = VecApply(x2413,0)
                      [22.0] x2415 = FixDiv(Const(100),x2414)
                      [22.0] x2420 = FixDiv(Const(10),x2414)
                      [42.0] x2416 = FixDiv(x2415,x2414)
                      [42.0] x2421 = FixDiv(x2420,x2414)
                      [62.0] x2417 = FixDiv(x2416,x2414)
                      [82.0] x2418 = FixDiv(x2417,x2414)
                      [102.0] x2419 = FixDiv(x2418,x2414)
                      [103.0] x2423 = SwitchCase(Block(x2422))
                      [103.0] x2422 = FixSub(x2419,x2421)
                  x2439 = Switch(List(x2961, x2962),Block(x2438))
                    Working on pipeLatencies of result Vector(x2438, x2437, x2436, x2426, x2427, Const(90)), schedule Vector(x2437, x2438, x2426, x2427, x2428, x2429, x2430, x2431, x2432, x2433, x2434, x2435, x2436)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x2437 = SwitchCase(Block(x2436))
                      x2438 = SwitchCase(Block(Const(90)))
                      x2426 = RegRead(x2386)
                      x2427 = SRAMBankedRead(x2355,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2426)),Vec[Fix[TRUE,_10,_22]])
                      x2428 = VecApply(x2427,0)
                      x2429 = FixDiv(Const(100),x2428)
                      x2430 = FixDiv(x2429,x2428)
                      x2431 = FixDiv(x2430,x2428)
                      x2432 = FixDiv(x2431,x2428)
                      x2433 = FixDiv(x2432,x2428)
                      x2434 = FixDiv(Const(10),x2428)
                      x2435 = FixDiv(x2434,x2428)
                      x2436 = FixSub(x2433,x2435)
                    Computing fullDFS: x2438
                    cur: x2438, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2438 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x2437
                    Computing fullDFS: x2426
                    cur: x2426, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2426 = RegRead(x2386)
                    Computing fullDFS: x2427
                    [2.0 = max(0.0) + 2.0] x2427 = SRAMBankedRead(x2355,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2426)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x2436
                    Computing fullDFS: x2433
                    Computing fullDFS: x2428
                    [2.0 = max(2.0) + 0.0] x2428 = VecApply(x2427,0)
                    Computing fullDFS: x2432
                    Computing fullDFS: x2431
                    Computing fullDFS: x2430
                    Computing fullDFS: x2429
                    [22.0 = max(2.0) + 20.0] x2429 = FixDiv(Const(100),x2428)
                    [42.0 = max(2.0, 22.0) + 20.0] x2430 = FixDiv(x2429,x2428)
                    [62.0 = max(2.0, 42.0) + 20.0] x2431 = FixDiv(x2430,x2428)
                    [82.0 = max(2.0, 62.0) + 20.0] x2432 = FixDiv(x2431,x2428)
                    [102.0 = max(2.0, 82.0) + 20.0] x2433 = FixDiv(x2432,x2428)
                    Computing fullDFS: x2435
                    Computing fullDFS: x2434
                    [22.0 = max(2.0) + 20.0] x2434 = FixDiv(Const(10),x2428)
                    [42.0 = max(2.0, 22.0) + 20.0] x2435 = FixDiv(x2434,x2428)
                    [103.0 = max(102.0, 42.0) + 1.0] x2436 = FixSub(x2433,x2435)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x2437 = SwitchCase(Block(x2436))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x2438 = SwitchCase(Block(Const(90)))
                      [0.0] x2426 = RegRead(x2386)
                      [2.0] x2427 = SRAMBankedRead(x2355,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2426)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2428 = VecApply(x2427,0)
                      [22.0] x2429 = FixDiv(Const(100),x2428)
                      [22.0] x2434 = FixDiv(Const(10),x2428)
                      [42.0] x2430 = FixDiv(x2429,x2428)
                      [42.0] x2435 = FixDiv(x2434,x2428)
                      [62.0] x2431 = FixDiv(x2430,x2428)
                      [82.0] x2432 = FixDiv(x2431,x2428)
                      [102.0] x2433 = FixDiv(x2432,x2428)
                      [103.0] x2437 = SwitchCase(Block(x2436))
                      [103.0] x2436 = FixSub(x2433,x2435)
                  x2444 = ParallelPipe(Set(b565),Block(Const(())))
                      x2441 = UnitPipe(Set(b2294, b565),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2440), schedule Vector(x2440)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2440 = SRAMBankedWrite(x2383,Vector(x2425),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2440
                        cur: x2440, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x2440 = SRAMBankedWrite(x2383,Vector(x2425),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x2440 = SRAMBankedWrite(x2383,Vector(x2425),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x2443 = UnitPipe(Set(b2295, b565),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2442), schedule Vector(x2442)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2442 = SRAMBankedWrite(x2384,Vector(x2439),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2442
                        cur: x2442, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x2442 = SRAMBankedWrite(x2384,Vector(x2439),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x2442 = SRAMBankedWrite(x2384,Vector(x2439),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x2477 = ParallelPipe(Set(b565),Block(Const(())))
                      x2462 = UnrolledForeach(Set(b2294, b565),x2447,Block(Const(())),List(List(b2449)),List(List(b2450)),None)
                        Working on pipeLatencies of result Vector(Const(()), x2459, x2451, x2460, x2457, x2461, x2454, x2458), schedule Vector(x2451, x2452, x2453, x2454, x2455, x2456, x2457, x2458, x2459, x2460, x2461)
                        Memories with both reads and writes in this scope: Set(x2300)
                        NonConflictSets(x2451, x2458): Set()
                        NonConflictSets(x2451, x2458): Set()
                        Found Cycle: x2451, x2458
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x2458 = SRAMBankedWrite(x2300,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          x2451 = SRAMBankedRead(x2300,Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                            x2451 = SRAMBankedRead(x2300,Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                            x2452 = VecApply(x2451,0)
                            x2453 = FixMul(x2452,Const(0.099999904632568359375))
                            x2456 = FixMul(x2453,x2455)
                            x2458 = SRAMBankedWrite(x2300,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                        Done finding cycles: Vector(AccumTriple(x2300,x2451,x2458)), Map(x2452 -> List(AccumTriple(x2300,x2451,x2458)), x2451 -> List(AccumTriple(x2300,x2451,x2458)), x2453 -> List(AccumTriple(x2300,x2451,x2458)), x2456 -> List(AccumTriple(x2300,x2451,x2458)), x2458 -> List(AccumTriple(x2300,x2451,x2458)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2451 = SRAMBankedRead(x2300,Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                          x2452 = VecApply(x2451,0)
                          x2453 = FixMul(x2452,Const(0.099999904632568359375))
                          x2454 = SRAMBankedRead(x2383,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                          x2455 = VecApply(x2454,0)
                          x2456 = FixMul(x2453,x2455)
                          x2457 = SRAMBankedWrite(x2301,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          x2458 = SRAMBankedWrite(x2300,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          x2459 = SRAMBankedWrite(x2299,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          x2460 = SRAMBankedWrite(x2298,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          x2461 = SRAMBankedWrite(x2297,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2459
                        Computing fullDFS: x2456
                        Computing fullDFS: x2453
                        Computing fullDFS: x2452
                        Computing fullDFS: x2451
                        cur: x2451, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x2300,x2451,x2458))
                        [2.0 = max(0) + 2.0] x2451 = SRAMBankedRead(x2300,Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        cycle deps of x2452: Vector(x2451, x2452)
                        [2.0 = max(2.0) + 0.0] x2452 = VecApply(x2451,0)[cycle]
                        cycle deps of x2453: Vector(x2451, x2452, x2453)
                        [8.0 = max(2.0) + 6.0] x2453 = FixMul(x2452,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x2455
                        Computing fullDFS: x2454
                        cur: x2454, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2454 = SRAMBankedRead(x2383,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2455 = VecApply(x2454,0)
                        cycle deps of x2456: Vector(x2451, x2452, x2453, x2456)
                        [14.0 = max(8.0, 2.0) + 6.0] x2456 = FixMul(x2453,x2455)[cycle]
                        cycle deps of x2459: Vector(x2451, x2452, x2453, x2456, x2459)
                        [15.0 = max(14.0) + 1.0] x2459 = SRAMBankedWrite(x2299,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                        Computing fullDFS: x2460
                        cycle deps of x2460: Vector(x2451, x2452, x2453, x2456, x2460)
                        [15.0 = max(14.0) + 1.0] x2460 = SRAMBankedWrite(x2298,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                        Computing fullDFS: x2457
                        cycle deps of x2457: Vector(x2451, x2452, x2453, x2456, x2457)
                        [15.0 = max(14.0) + 1.0] x2457 = SRAMBankedWrite(x2301,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                        Computing fullDFS: x2461
                        cycle deps of x2461: Vector(x2451, x2452, x2453, x2456, x2461)
                        [15.0 = max(14.0) + 1.0] x2461 = SRAMBankedWrite(x2297,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                        Computing fullDFS: x2458
                        cycle deps of x2458: Vector(x2451, x2451, x2452, x2453, x2456, x2458)
                        [15.0 = max(2.0, 14.0) + 1.0] x2458 = SRAMBankedWrite(x2300,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))[cycle]
                        Cycle #0: write: x2458, cycle: x2451, x2451, x2452, x2453, x2456, x2458
                        x2456 = FixMul(x2453,x2455) [14.0]
                          [14.0 = 15.0 - 1.0] x2457 = SRAMBankedWrite(x2301,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          [14.0 = 15.0 - 1.0] x2458 = SRAMBankedWrite(x2300,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          [14.0 = 15.0 - 1.0] x2459 = SRAMBankedWrite(x2299,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          [14.0 = 15.0 - 1.0] x2460 = SRAMBankedWrite(x2298,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          [14.0 = 15.0 - 1.0] x2461 = SRAMBankedWrite(x2297,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          [14.0]
                        x2453 = FixMul(x2452,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x2456 = FixMul(x2453,x2455)
                          [8.0]
                        x2452 = VecApply(x2451,0) [2.0]
                          [2.0 = 8.0 - 6.0] x2453 = FixMul(x2452,Const(0.099999904632568359375))
                          [2.0]
                        x2451 = SRAMBankedRead(x2300,Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2452 = VecApply(x2451,0)
                          [2.0]
                        x2451 = SRAMBankedRead(x2300,Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2452 = VecApply(x2451,0)
                          [2.0]
                        Cycles: Map(x2461 -> Vector(x2451, x2452, x2453, x2456, x2461), x2452 -> Vector(x2451, x2452), x2460 -> Vector(x2451, x2452, x2453, x2456, x2460), x2451 -> List(x2451), x2457 -> Vector(x2451, x2452, x2453, x2456, x2457), x2459 -> Vector(x2451, x2452, x2453, x2456, x2459), x2453 -> Vector(x2451, x2452, x2453), x2456 -> Vector(x2451, x2452, x2453, x2456), x2458 -> Vector(x2451, x2451, x2452, x2453, x2456, x2458))
                        pseudo cycles for x2300:
                        Multiplexed accesses for memory x2300: 
                          x2451 = SRAMBankedRead(x2300,Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                        Access: x2451 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2451 = SRAMBankedRead(x2300,Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x2300: 
                          x2458 = SRAMBankedWrite(x2300,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                        Access: x2458 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2458 = SRAMBankedWrite(x2300,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x2451),x2300,1.0)
                        AAACycle(Vector(x2458),x2300,1.0)
                        WARCycle(x2451,x2458,x2300,Vector(x2451, x2451, x2452, x2453, x2456, x2458),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x2451 = SRAMBankedRead(x2300,Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2452 = VecApply(x2451,0)
                          [2.0] x2454 = SRAMBankedRead(x2383,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2455 = VecApply(x2454,0)
                          [8.0] x2453 = FixMul(x2452,Const(0.099999904632568359375))
                          [14.0] x2456 = FixMul(x2453,x2455)
                          [15.0] x2457 = SRAMBankedWrite(x2301,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          [15.0] x2458 = SRAMBankedWrite(x2300,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          [15.0] x2459 = SRAMBankedWrite(x2299,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          [15.0] x2460 = SRAMBankedWrite(x2298,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                          [15.0] x2461 = SRAMBankedWrite(x2297,Vector(x2456),Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)))
                        Cycle #0 on x2300: 
                          x2300 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                      x2476 = UnrolledForeach(Set(b2295, b565),x2448,Block(Const(())),List(List(b2463)),List(List(b2464)),None)
                        Working on pipeLatencies of result Vector(Const(()), x2473, x2472, x2465, x2474, x2471, x2468, x2475), schedule Vector(x2465, x2466, x2467, x2468, x2469, x2470, x2471, x2472, x2473, x2474, x2475)
                        Memories with both reads and writes in this scope: Set(x2305)
                        NonConflictSets(x2465, x2474): Set()
                        NonConflictSets(x2465, x2474): Set()
                        Found Cycle: x2465, x2474
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x2474 = SRAMBankedWrite(x2305,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          x2465 = SRAMBankedRead(x2305,Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                            x2465 = SRAMBankedRead(x2305,Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                            x2466 = VecApply(x2465,0)
                            x2467 = FixMul(x2466,Const(0.099999904632568359375))
                            x2470 = FixMul(x2467,x2469)
                            x2474 = SRAMBankedWrite(x2305,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                        Done finding cycles: Vector(AccumTriple(x2305,x2465,x2474)), Map(x2470 -> List(AccumTriple(x2305,x2465,x2474)), x2466 -> List(AccumTriple(x2305,x2465,x2474)), x2474 -> List(AccumTriple(x2305,x2465,x2474)), x2465 -> List(AccumTriple(x2305,x2465,x2474)), x2467 -> List(AccumTriple(x2305,x2465,x2474)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2465 = SRAMBankedRead(x2305,Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                          x2466 = VecApply(x2465,0)
                          x2467 = FixMul(x2466,Const(0.099999904632568359375))
                          x2468 = SRAMBankedRead(x2384,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                          x2469 = VecApply(x2468,0)
                          x2470 = FixMul(x2467,x2469)
                          x2471 = SRAMBankedWrite(x2306,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          x2472 = SRAMBankedWrite(x2304,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          x2473 = SRAMBankedWrite(x2303,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          x2474 = SRAMBankedWrite(x2305,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          x2475 = SRAMBankedWrite(x2302,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2473
                        Computing fullDFS: x2470
                        Computing fullDFS: x2467
                        Computing fullDFS: x2466
                        Computing fullDFS: x2465
                        cur: x2465, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x2305,x2465,x2474))
                        [2.0 = max(0) + 2.0] x2465 = SRAMBankedRead(x2305,Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        cycle deps of x2466: Vector(x2465, x2466)
                        [2.0 = max(2.0) + 0.0] x2466 = VecApply(x2465,0)[cycle]
                        cycle deps of x2467: Vector(x2465, x2466, x2467)
                        [8.0 = max(2.0) + 6.0] x2467 = FixMul(x2466,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x2469
                        Computing fullDFS: x2468
                        cur: x2468, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2468 = SRAMBankedRead(x2384,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2469 = VecApply(x2468,0)
                        cycle deps of x2470: Vector(x2465, x2466, x2467, x2470)
                        [14.0 = max(8.0, 2.0) + 6.0] x2470 = FixMul(x2467,x2469)[cycle]
                        cycle deps of x2473: Vector(x2465, x2466, x2467, x2470, x2473)
                        [15.0 = max(14.0) + 1.0] x2473 = SRAMBankedWrite(x2303,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                        Computing fullDFS: x2472
                        cycle deps of x2472: Vector(x2465, x2466, x2467, x2470, x2472)
                        [15.0 = max(14.0) + 1.0] x2472 = SRAMBankedWrite(x2304,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                        Computing fullDFS: x2474
                        cycle deps of x2474: Vector(x2465, x2465, x2466, x2467, x2470, x2474)
                        [15.0 = max(2.0, 14.0) + 1.0] x2474 = SRAMBankedWrite(x2305,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))[cycle]
                        Computing fullDFS: x2471
                        cycle deps of x2471: Vector(x2465, x2466, x2467, x2470, x2471)
                        [15.0 = max(14.0) + 1.0] x2471 = SRAMBankedWrite(x2306,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                        Computing fullDFS: x2475
                        cycle deps of x2475: Vector(x2465, x2466, x2467, x2470, x2475)
                        [15.0 = max(14.0) + 1.0] x2475 = SRAMBankedWrite(x2302,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                        Cycle #0: write: x2474, cycle: x2465, x2465, x2466, x2467, x2470, x2474
                        x2470 = FixMul(x2467,x2469) [14.0]
                          [14.0 = 15.0 - 1.0] x2471 = SRAMBankedWrite(x2306,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          [14.0 = 15.0 - 1.0] x2472 = SRAMBankedWrite(x2304,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          [14.0 = 15.0 - 1.0] x2473 = SRAMBankedWrite(x2303,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          [14.0 = 15.0 - 1.0] x2474 = SRAMBankedWrite(x2305,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          [14.0 = 15.0 - 1.0] x2475 = SRAMBankedWrite(x2302,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          [14.0]
                        x2467 = FixMul(x2466,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x2470 = FixMul(x2467,x2469)
                          [8.0]
                        x2466 = VecApply(x2465,0) [2.0]
                          [2.0 = 8.0 - 6.0] x2467 = FixMul(x2466,Const(0.099999904632568359375))
                          [2.0]
                        x2465 = SRAMBankedRead(x2305,Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2466 = VecApply(x2465,0)
                          [2.0]
                        x2465 = SRAMBankedRead(x2305,Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2466 = VecApply(x2465,0)
                          [2.0]
                        Cycles: Map(x2470 -> Vector(x2465, x2466, x2467, x2470), x2472 -> Vector(x2465, x2466, x2467, x2470, x2472), x2475 -> Vector(x2465, x2466, x2467, x2470, x2475), x2466 -> Vector(x2465, x2466), x2474 -> Vector(x2465, x2465, x2466, x2467, x2470, x2474), x2471 -> Vector(x2465, x2466, x2467, x2470, x2471), x2465 -> List(x2465), x2473 -> Vector(x2465, x2466, x2467, x2470, x2473), x2467 -> Vector(x2465, x2466, x2467))
                        pseudo cycles for x2305:
                        Multiplexed accesses for memory x2305: 
                          x2465 = SRAMBankedRead(x2305,Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                        Access: x2465 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2465 = SRAMBankedRead(x2305,Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x2305: 
                          x2474 = SRAMBankedWrite(x2305,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                        Access: x2474 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2474 = SRAMBankedWrite(x2305,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x2465),x2305,1.0)
                        AAACycle(Vector(x2474),x2305,1.0)
                        WARCycle(x2465,x2474,x2305,Vector(x2465, x2465, x2466, x2467, x2470, x2474),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x2465 = SRAMBankedRead(x2305,Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2466 = VecApply(x2465,0)
                          [2.0] x2468 = SRAMBankedRead(x2384,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2469 = VecApply(x2468,0)
                          [8.0] x2467 = FixMul(x2466,Const(0.099999904632568359375))
                          [14.0] x2470 = FixMul(x2467,x2469)
                          [15.0] x2471 = SRAMBankedWrite(x2306,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          [15.0] x2472 = SRAMBankedWrite(x2304,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          [15.0] x2473 = SRAMBankedWrite(x2303,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          [15.0] x2474 = SRAMBankedWrite(x2305,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                          [15.0] x2475 = SRAMBankedWrite(x2302,Vector(x2470),Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)))
                        Cycle #0 on x2305: 
                          x2305 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                  x2497 = UnrolledForeach(Set(),x625,Block(Const(())),Vector(List(b2293)),Vector(List(b2296)),None)
                    Working on pipeLatencies of result Vector(x2480, Const(()), x2495, x2496, x2482, x2478), schedule Vector(x2478, x2479, x2480, x2481, x2482, x2483, x2484, x2486, x2488, x2489, x2490, x2492, x2493, x2494, x2495, x2496)
                    Memories with both reads and writes in this scope: Set(x583)
                    NonConflictSets(x2482, x2496): Set()
                    NonConflictSets(x2482, x2496): Set()
                    Found Cycle: x2482, x2496
                    Exclusions: Set() Set() 
                    Found cycle between: 
                      x2496 = SRAMBankedWrite(x583,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)))
                      x2482 = SRAMBankedRead(x583,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
                        x2482 = SRAMBankedRead(x583,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
                        x2483 = VecApply(x2482,0)
                        x2493 = FixAdd(x2490,x2483)
                        x2494 = Mux(x2492,x2490,x2493)
                        x2496 = SRAMBankedWrite(x583,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)))
                    Done finding cycles: Vector(AccumTriple(x583,x2482,x2496)), Map(x2496 -> List(AccumTriple(x583,x2482,x2496)), x2493 -> List(AccumTriple(x583,x2482,x2496)), x2483 -> List(AccumTriple(x583,x2482,x2496)), x2482 -> List(AccumTriple(x583,x2482,x2496)), x2494 -> List(AccumTriple(x583,x2482,x2496)))
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x2478 = SRAMBankedRead(x2301,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
                      x2479 = VecApply(x2478,0)
                      x2480 = SRAMBankedRead(x2306,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
                      x2481 = VecApply(x2480,0)
                      x2482 = SRAMBankedRead(x583,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
                      x2483 = VecApply(x2482,0)
                      x2484 = And(b2296,b565)
                      x2486 = And(b2295,b565)
                      x2488 = And(x2486,x2484)
                      x2489 = FixAdd(x2479,x2481)
                      x2490 = Mux(x2488,x2489,x2479)
                      x2492 = FixEql(b2291,Const(0))
                      x2493 = FixAdd(x2490,x2483)
                      x2494 = Mux(x2492,x2490,x2493)
                      x2495 = SRAMBankedWrite(x584,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)))
                      x2496 = SRAMBankedWrite(x583,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)))
                    Computing fullDFS: x2480
                    cur: x2480, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x2480 = SRAMBankedRead(x2306,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: Const(())
                    Computing fullDFS: x2495
                    Computing fullDFS: x2494
                    Computing fullDFS: x2490
                    Computing fullDFS: x2479
                    Computing fullDFS: x2478
                    cur: x2478, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x2478 = SRAMBankedRead(x2301,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x2479 = VecApply(x2478,0)
                    Computing fullDFS: x2488
                    Computing fullDFS: x2484
                    cur: x2484, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x2484 = And(b2296,b565)
                    Computing fullDFS: x2486
                    cur: x2486, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x2486 = And(b2295,b565)
                    [0.4 = max(0.2, 0.2) + 0.2] x2488 = And(x2486,x2484)
                    Computing fullDFS: x2489
                    Computing fullDFS: x2481
                    [2.0 = max(2.0) + 0.0] x2481 = VecApply(x2480,0)
                    [3.0 = max(2.0, 2.0) + 1.0] x2489 = FixAdd(x2479,x2481)
                    [3.5 = max(2.0, 0.4, 3.0) + 0.5] x2490 = Mux(x2488,x2489,x2479)
                    Computing fullDFS: x2492
                    cur: x2492, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x2492 = FixEql(b2291,Const(0))
                    Computing fullDFS: x2493
                    Computing fullDFS: x2483
                    Computing fullDFS: x2482
                    cur: x2482, inReduce: true, latency: 2.0
                    Known Cycles: List(AccumTriple(x583,x2482,x2496))
                    [2.0 = max(0) + 2.0] x2482 = SRAMBankedRead(x583,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])[cycle]
                    cycle deps of x2483: Vector(x2482, x2483)
                    [2.0 = max(2.0) + 0.0] x2483 = VecApply(x2482,0)[cycle]
                    cycle deps of x2493: Vector(x2482, x2483, x2493)
                    [4.5 = max(2.0, 3.5) + 1.0] x2493 = FixAdd(x2490,x2483)[cycle]
                    cycle deps of x2494: Vector(x2482, x2483, x2493, x2494)
                    [5.0 = max(3.5, 0.2, 4.5) + 0.5] x2494 = Mux(x2492,x2490,x2493)[cycle]
                    cycle deps of x2495: Vector(x2482, x2483, x2493, x2494, x2495)
                    [6.0 = max(5.0) + 1.0] x2495 = SRAMBankedWrite(x584,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)))
                    Computing fullDFS: x2496
                    cycle deps of x2496: Vector(x2482, x2482, x2483, x2493, x2494, x2496)
                    [6.0 = max(2.0, 5.0) + 1.0] x2496 = SRAMBankedWrite(x583,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)))[cycle]
                    Cycle #0: write: x2496, cycle: x2482, x2482, x2483, x2493, x2494, x2496
                    x2494 = Mux(x2492,x2490,x2493) [5.0]
                      [5.0 = 6.0 - 1.0] x2495 = SRAMBankedWrite(x584,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)))
                      [5.0 = 6.0 - 1.0] x2496 = SRAMBankedWrite(x583,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)))
                      [5.0]
                    x2493 = FixAdd(x2490,x2483) [4.5]
                      [4.5 = 5.0 - 0.5] x2494 = Mux(x2492,x2490,x2493)
                      [4.5]
                    x2483 = VecApply(x2482,0) [2.0]
                      [3.5 = 4.5 - 1.0] x2493 = FixAdd(x2490,x2483)
                      [3.5]
                    x2482 = SRAMBankedRead(x583,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                      [3.5 = 3.5 - 0.0] x2483 = VecApply(x2482,0)
                      [3.5]
                    x2482 = SRAMBankedRead(x583,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]]) [3.5]
                      [3.5 = 3.5 - 0.0] x2483 = VecApply(x2482,0)
                      [3.5]
                    Cycles: Map(x2496 -> Vector(x2482, x2482, x2483, x2493, x2494, x2496), x2493 -> Vector(x2482, x2483, x2493), x2483 -> Vector(x2482, x2483), x2495 -> Vector(x2482, x2483, x2493, x2494, x2495), x2482 -> List(x2482), x2494 -> Vector(x2482, x2483, x2493, x2494))
                    pseudo cycles for x583:
                    Multiplexed accesses for memory x583: 
                      x2482 = SRAMBankedRead(x583,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
                    Access: x2482 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x2482 = SRAMBankedRead(x583,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 3.5 due to muxing.
                    Multiplexed accesses for memory x583: 
                      x2496 = SRAMBankedWrite(x583,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)))
                    Access: x2496 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x2496 = SRAMBankedWrite(x583,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565))) by 0.0 to 6.0 due to muxing.
                    Found cycles: 
                    AAACycle(Vector(x2482),x583,1.0)
                    AAACycle(Vector(x2496),x583,1.0)
                    WARCycle(x2482,x2496,x583,Vector(x2482, x2482, x2483, x2493, x2494, x2496),5.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                      Schedule after pipeLatencies calculation:
                      [0.2] x2484 = And(b2296,b565)
                      [0.2] x2486 = And(b2295,b565)
                      [0.2] x2492 = FixEql(b2291,Const(0))
                      [0.4] x2488 = And(x2486,x2484)
                      [2.0] x2478 = SRAMBankedRead(x2301,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2479 = VecApply(x2478,0)
                      [2.0] x2480 = SRAMBankedRead(x2306,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2481 = VecApply(x2480,0)
                      [3.0] x2489 = FixAdd(x2479,x2481)
                      [3.5] x2482 = SRAMBankedRead(x583,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]])
                      [3.5] x2483 = VecApply(x2482,0)
                      [3.5] x2490 = Mux(x2488,x2489,x2479)
                      [4.5] x2493 = FixAdd(x2490,x2483)
                      [5.0] x2494 = Mux(x2492,x2490,x2493)
                      [6.0] x2495 = SRAMBankedWrite(x584,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)))
                      [6.0] x2496 = SRAMBankedWrite(x583,Vector(x2494),Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)))
                    Cycle #0 on x583: 
                      x583 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [accum_0]
                      disjoint:     true
                      no visible intermediates:
                        closed cycle:     false
                        no intermediates: true
                        is local mem:     true
                        number of writers:  1
                        outer reduce:     false
                        accum type:       Fold (if reduce, overrides no intermediates)
              x2706 = UnrolledReduce(Set(b566),x606,Block((x585) => Const(())),List(List(b2499, b2500)),List(List(b2502, b2503)),None)
                  x2561 = ParallelPipe(Set(b566),Block(Const(())))
                      x2539 = UnrolledForeach(Set(b2502, b566),x2517,Block(Const(())),List(List(b2519)),List(List(b2520)),None)
                        Working on pipeLatencies of result Vector(Const(()), x2531, x2537, x2536, x2525, x2538, x2535, x2534), schedule Vector(x2522, x3085, x3086, x2524, x2525, x2526, x2528, x3087, x3088, x2530, x2531, x2532, x2533, x2534, x2535, x2536, x2537, x2538)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2522 = FixDiv(b556,Const(10))
                          x3085 = FixSLA(x2522,Const(1))
                          x3086 = FixAdd(x3085,x2522)
                          x2524 = FixAdd(x3086,b2519)
                          x2525 = SRAMBankedRead(x471,Vector(List(Const(9), Const(0))),Vector(x2524),Vector(Set(b2520, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                          x2526 = VecApply(x2525,0)
                          x2528 = FixDivSRA(b2499,Const(1))
                          x3087 = FixSLA(x2528,Const(1))
                          x3088 = FixAdd(x3087,x2528)
                          x2530 = FixAdd(x3088,b2519)
                          x2531 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x2530),Vector(Set(b2520, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                          x2532 = VecApply(x2531,0)
                          x2533 = FixSub(x2526,x2532)
                          x2534 = SRAMBankedWrite(x2508,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                          x2535 = SRAMBankedWrite(x2509,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                          x2536 = SRAMBankedWrite(x2505,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                          x2537 = SRAMBankedWrite(x2506,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                          x2538 = SRAMBankedWrite(x2507,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2531
                        Computing fullDFS: x2530
                        Computing fullDFS: x3088
                        Computing fullDFS: x2528
                        cur: x2528, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x2528 = FixDivSRA(b2499,Const(1))
                        Computing fullDFS: x3087
                        [0.4 = max(0.2) + 0.2] x3087 = FixSLA(x2528,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3088 = FixAdd(x3087,x2528)
                        [2.4 = max(1.4) + 1.0] x2530 = FixAdd(x3088,b2519)
                        [4.4 = max(2.4) + 2.0] x2531 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x2530),Vector(Set(b2520, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2537
                        Computing fullDFS: x2533
                        Computing fullDFS: x2526
                        Computing fullDFS: x2525
                        Computing fullDFS: x2524
                        Computing fullDFS: x3086
                        Computing fullDFS: x2522
                        cur: x2522, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x2522 = FixDiv(b556,Const(10))
                        Computing fullDFS: x3085
                        [20.2 = max(20.0) + 0.2] x3085 = FixSLA(x2522,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3086 = FixAdd(x3085,x2522)
                        [22.2 = max(21.2) + 1.0] x2524 = FixAdd(x3086,b2519)
                        [24.2 = max(22.2) + 2.0] x2525 = SRAMBankedRead(x471,Vector(List(Const(9), Const(0))),Vector(x2524),Vector(Set(b2520, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x2526 = VecApply(x2525,0)
                        Computing fullDFS: x2532
                        [4.4 = max(4.4) + 0.0] x2532 = VecApply(x2531,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x2533 = FixSub(x2526,x2532)
                        [26.2 = max(25.2) + 1.0] x2537 = SRAMBankedWrite(x2506,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                        Computing fullDFS: x2536
                        [26.2 = max(25.2) + 1.0] x2536 = SRAMBankedWrite(x2505,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                        Computing fullDFS: x2538
                        [26.2 = max(25.2) + 1.0] x2538 = SRAMBankedWrite(x2507,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                        Computing fullDFS: x2535
                        [26.2 = max(25.2) + 1.0] x2535 = SRAMBankedWrite(x2509,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                        Computing fullDFS: x2534
                        [26.2 = max(25.2) + 1.0] x2534 = SRAMBankedWrite(x2508,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x2528 = FixDivSRA(b2499,Const(1))
                          [0.4] x3087 = FixSLA(x2528,Const(1))
                          [1.4] x3088 = FixAdd(x3087,x2528)
                          [2.4] x2530 = FixAdd(x3088,b2519)
                          [4.4] x2531 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x2530),Vector(Set(b2520, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x2532 = VecApply(x2531,0)
                          [20.0] x2522 = FixDiv(b556,Const(10))
                          [20.2] x3085 = FixSLA(x2522,Const(1))
                          [21.2] x3086 = FixAdd(x3085,x2522)
                          [22.2] x2524 = FixAdd(x3086,b2519)
                          [24.2] x2525 = SRAMBankedRead(x471,Vector(List(Const(9), Const(0))),Vector(x2524),Vector(Set(b2520, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x2526 = VecApply(x2525,0)
                          [25.2] x2533 = FixSub(x2526,x2532)
                          [26.2] x2534 = SRAMBankedWrite(x2508,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                          [26.2] x2535 = SRAMBankedWrite(x2509,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                          [26.2] x2536 = SRAMBankedWrite(x2505,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                          [26.2] x2537 = SRAMBankedWrite(x2506,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                          [26.2] x2538 = SRAMBankedWrite(x2507,Vector(x2533),Vector(List(Const(0))),Vector(b2519),Vector(Set(b2520, b2502, b566)))
                      x2560 = UnrolledForeach(Set(b2503, b566),x2518,Block(Const(())),List(List(b2540)),List(List(b2541)),None)
                        Working on pipeLatencies of result Vector(x2559, Const(()), x2552, x2555, x2546, x2556, x2557, x2558), schedule Vector(x2543, x3089, x3090, x2545, x2546, x2547, x2549, x3091, x3092, x2551, x2552, x2553, x2554, x2555, x2556, x2557, x2558, x2559)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2543 = FixDiv(b556,Const(10))
                          x3089 = FixSLA(x2543,Const(1))
                          x3090 = FixAdd(x3089,x2543)
                          x2545 = FixAdd(x3090,b2540)
                          x2546 = SRAMBankedRead(x471,Vector(List(Const(9), Const(0))),Vector(x2545),Vector(Set(b2541, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                          x2547 = VecApply(x2546,0)
                          x2549 = FixDivSRA(b2500,Const(1))
                          x3091 = FixSLA(x2549,Const(1))
                          x3092 = FixAdd(x3091,x2549)
                          x2551 = FixAdd(x3092,b2540)
                          x2552 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x2551),Vector(Set(b2541, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                          x2553 = VecApply(x2552,0)
                          x2554 = FixSub(x2547,x2553)
                          x2555 = SRAMBankedWrite(x2512,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                          x2556 = SRAMBankedWrite(x2514,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                          x2557 = SRAMBankedWrite(x2510,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                          x2558 = SRAMBankedWrite(x2513,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                          x2559 = SRAMBankedWrite(x2511,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                        Computing fullDFS: x2559
                        Computing fullDFS: x2554
                        Computing fullDFS: x2547
                        Computing fullDFS: x2546
                        Computing fullDFS: x2545
                        Computing fullDFS: x3090
                        Computing fullDFS: x2543
                        cur: x2543, inReduce: false, latency: 20.0
                        [20.0 = max(0) + 20.0] x2543 = FixDiv(b556,Const(10))
                        Computing fullDFS: x3089
                        [20.2 = max(20.0) + 0.2] x3089 = FixSLA(x2543,Const(1))
                        [21.2 = max(20.0, 20.2) + 1.0] x3090 = FixAdd(x3089,x2543)
                        [22.2 = max(21.2) + 1.0] x2545 = FixAdd(x3090,b2540)
                        [24.2 = max(22.2) + 2.0] x2546 = SRAMBankedRead(x471,Vector(List(Const(9), Const(0))),Vector(x2545),Vector(Set(b2541, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                        [24.2 = max(24.2) + 0.0] x2547 = VecApply(x2546,0)
                        Computing fullDFS: x2553
                        Computing fullDFS: x2552
                        Computing fullDFS: x2551
                        Computing fullDFS: x3092
                        Computing fullDFS: x2549
                        cur: x2549, inReduce: false, latency: 0.2
                        [0.2 = max(0) + 0.2] x2549 = FixDivSRA(b2500,Const(1))
                        Computing fullDFS: x3091
                        [0.4 = max(0.2) + 0.2] x3091 = FixSLA(x2549,Const(1))
                        [1.4 = max(0.2, 0.4) + 1.0] x3092 = FixAdd(x3091,x2549)
                        [2.4 = max(1.4) + 1.0] x2551 = FixAdd(x3092,b2540)
                        [4.4 = max(2.4) + 2.0] x2552 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x2551),Vector(Set(b2541, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                        [4.4 = max(4.4) + 0.0] x2553 = VecApply(x2552,0)
                        [25.2 = max(24.2, 4.4) + 1.0] x2554 = FixSub(x2547,x2553)
                        [26.2 = max(25.2) + 1.0] x2559 = SRAMBankedWrite(x2511,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2555
                        [26.2 = max(25.2) + 1.0] x2555 = SRAMBankedWrite(x2512,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                        Computing fullDFS: x2556
                        [26.2 = max(25.2) + 1.0] x2556 = SRAMBankedWrite(x2514,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                        Computing fullDFS: x2557
                        [26.2 = max(25.2) + 1.0] x2557 = SRAMBankedWrite(x2510,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                        Computing fullDFS: x2558
                        [26.2 = max(25.2) + 1.0] x2558 = SRAMBankedWrite(x2513,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [0.2] x2549 = FixDivSRA(b2500,Const(1))
                          [0.4] x3091 = FixSLA(x2549,Const(1))
                          [1.4] x3092 = FixAdd(x3091,x2549)
                          [2.4] x2551 = FixAdd(x3092,b2540)
                          [4.4] x2552 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x2551),Vector(Set(b2541, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                          [4.4] x2553 = VecApply(x2552,0)
                          [20.0] x2543 = FixDiv(b556,Const(10))
                          [20.2] x3089 = FixSLA(x2543,Const(1))
                          [21.2] x3090 = FixAdd(x3089,x2543)
                          [22.2] x2545 = FixAdd(x3090,b2540)
                          [24.2] x2546 = SRAMBankedRead(x471,Vector(List(Const(9), Const(0))),Vector(x2545),Vector(Set(b2541, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                          [24.2] x2547 = VecApply(x2546,0)
                          [25.2] x2554 = FixSub(x2547,x2553)
                          [26.2] x2555 = SRAMBankedWrite(x2512,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                          [26.2] x2556 = SRAMBankedWrite(x2514,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                          [26.2] x2557 = SRAMBankedWrite(x2510,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                          [26.2] x2558 = SRAMBankedWrite(x2513,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                          [26.2] x2559 = SRAMBankedWrite(x2511,Vector(x2554),Vector(List(Const(0))),Vector(b2540),Vector(Set(b2541, b2503, b566)))
                  x2590 = ParallelPipe(Set(b566),Block(Const(())))
                      x2576 = UnitPipe(Set(b2502, b566),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2575, x2571, x2564, x2567), schedule Vector(x2564, x2565, x2567, x2568, x2569, x3093, x2571, x2572, x3094, x2575)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2564 = SRAMBankedRead(x2505,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2565 = VecApply(x2564,0)
                          x2567 = SRAMBankedRead(x2506,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2568 = VecApply(x2567,0)
                          x2569 = FixMul(x2568,x2568)
                          x3093 = FixFMA(x2565,x2565,x2569)
                          x2571 = SRAMBankedRead(x2507,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2572 = VecApply(x2571,0)
                          x3094 = FixFMA(x2572,x2572,x3093)
                          x2575 = SRAMBankedWrite(x2562,Vector(x3094),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2575
                        Computing fullDFS: x3094
                        Computing fullDFS: x3093
                        Computing fullDFS: x2565
                        Computing fullDFS: x2564
                        cur: x2564, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2564 = SRAMBankedRead(x2505,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2565 = VecApply(x2564,0)
                        Computing fullDFS: x2569
                        Computing fullDFS: x2568
                        Computing fullDFS: x2567
                        cur: x2567, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2567 = SRAMBankedRead(x2506,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2568 = VecApply(x2567,0)
                        [8.0 = max(2.0) + 6.0] x2569 = FixMul(x2568,x2568)
                        [14.0 = max(2.0, 8.0) + 6.0] x3093 = FixFMA(x2565,x2565,x2569)
                        Computing fullDFS: x2572
                        Computing fullDFS: x2571
                        cur: x2571, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2571 = SRAMBankedRead(x2507,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2572 = VecApply(x2571,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3094 = FixFMA(x2572,x2572,x3093)
                        [21.0 = max(20.0) + 1.0] x2575 = SRAMBankedWrite(x2562,Vector(x3094),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x2564 = SRAMBankedRead(x2505,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2565 = VecApply(x2564,0)
                          [2.0] x2567 = SRAMBankedRead(x2506,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2568 = VecApply(x2567,0)
                          [2.0] x2571 = SRAMBankedRead(x2507,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2572 = VecApply(x2571,0)
                          [8.0] x2569 = FixMul(x2568,x2568)
                          [14.0] x3093 = FixFMA(x2565,x2565,x2569)
                          [20.0] x3094 = FixFMA(x2572,x2572,x3093)
                          [21.0] x2575 = SRAMBankedWrite(x2562,Vector(x3094),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x2589 = UnitPipe(Set(b2503, b566),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2580, x2577, x2588, x2584), schedule Vector(x2577, x2578, x2580, x2581, x2582, x3095, x2584, x2585, x3096, x2588)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2577 = SRAMBankedRead(x2510,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2578 = VecApply(x2577,0)
                          x2580 = SRAMBankedRead(x2511,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2581 = VecApply(x2580,0)
                          x2582 = FixMul(x2581,x2581)
                          x3095 = FixFMA(x2578,x2578,x2582)
                          x2584 = SRAMBankedRead(x2512,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2585 = VecApply(x2584,0)
                          x3096 = FixFMA(x2585,x2585,x3095)
                          x2588 = SRAMBankedWrite(x2563,Vector(x3096),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2580
                        cur: x2580, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2580 = SRAMBankedRead(x2511,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2577
                        cur: x2577, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2577 = SRAMBankedRead(x2510,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2588
                        Computing fullDFS: x3096
                        Computing fullDFS: x3095
                        Computing fullDFS: x2578
                        [2.0 = max(2.0) + 0.0] x2578 = VecApply(x2577,0)
                        Computing fullDFS: x2582
                        Computing fullDFS: x2581
                        [2.0 = max(2.0) + 0.0] x2581 = VecApply(x2580,0)
                        [8.0 = max(2.0) + 6.0] x2582 = FixMul(x2581,x2581)
                        [14.0 = max(2.0, 8.0) + 6.0] x3095 = FixFMA(x2578,x2578,x2582)
                        Computing fullDFS: x2585
                        Computing fullDFS: x2584
                        cur: x2584, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2584 = SRAMBankedRead(x2512,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2585 = VecApply(x2584,0)
                        [20.0 = max(14.0, 2.0) + 6.0] x3096 = FixFMA(x2585,x2585,x3095)
                        [21.0 = max(20.0) + 1.0] x2588 = SRAMBankedWrite(x2563,Vector(x3096),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x2577 = SRAMBankedRead(x2510,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2578 = VecApply(x2577,0)
                          [2.0] x2580 = SRAMBankedRead(x2511,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2581 = VecApply(x2580,0)
                          [2.0] x2584 = SRAMBankedRead(x2512,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2585 = VecApply(x2584,0)
                          [8.0] x2582 = FixMul(x2581,x2581)
                          [14.0] x3095 = FixFMA(x2578,x2578,x2582)
                          [20.0] x3096 = FixFMA(x2585,x2585,x3095)
                          [21.0] x2588 = SRAMBankedWrite(x2563,Vector(x3096),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x2615 = ParallelPipe(Set(b566),Block(Const(())))
                      x2605 = UnitPipe(Set(b2502, b566),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2597, x2603, x2604), schedule Vector(x2597, x2598, x2599, x2600, x2601, x2602, x2603, x2604)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2597 = SRAMBankedRead(x2562,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2598 = VecApply(x2597,0)
                          x2599 = FixLst(Const(0),x2598)
                          x2600 = FixLst(Const(1),x2598)
                          x2601 = And(x2599,x2600)
                          x2602 = Not(x2601)
                          x2603 = RegWrite(x2593,x2601,Set())
                          x2604 = RegWrite(x2595,x2602,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2597
                        cur: x2597, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2597 = SRAMBankedRead(x2562,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2603
                        Computing fullDFS: x2601
                        Computing fullDFS: x2599
                        Computing fullDFS: x2598
                        [2.0 = max(2.0) + 0.0] x2598 = VecApply(x2597,0)
                        [2.4 = max(2.0) + 0.4] x2599 = FixLst(Const(0),x2598)
                        Computing fullDFS: x2600
                        [2.4 = max(2.0) + 0.4] x2600 = FixLst(Const(1),x2598)
                        [2.6 = max(2.4, 2.4) + 0.2] x2601 = And(x2599,x2600)
                        [3.6 = max(2.6) + 1.0] x2603 = RegWrite(x2593,x2601,Set())
                        Computing fullDFS: x2604
                        Computing fullDFS: x2602
                        [2.8000000000000003 = max(2.6) + 0.2] x2602 = Not(x2601)
                        [3.8 = max(2.8) + 1.0] x2604 = RegWrite(x2595,x2602,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x2597 = SRAMBankedRead(x2562,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2598 = VecApply(x2597,0)
                          [2.4] x2599 = FixLst(Const(0),x2598)
                          [2.4] x2600 = FixLst(Const(1),x2598)
                          [2.6] x2601 = And(x2599,x2600)
                          [2.8] x2602 = Not(x2601)
                          [3.6] x2603 = RegWrite(x2593,x2601,Set())
                          [3.8] x2604 = RegWrite(x2595,x2602,Set())
                      x2614 = UnitPipe(Set(b2503, b566),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2606, x2612, x2613), schedule Vector(x2606, x2607, x2608, x2609, x2610, x2611, x2612, x2613)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2606 = SRAMBankedRead(x2563,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          x2607 = VecApply(x2606,0)
                          x2608 = FixLst(Const(0),x2607)
                          x2609 = FixLst(Const(1),x2607)
                          x2610 = And(x2608,x2609)
                          x2611 = Not(x2610)
                          x2612 = RegWrite(x2594,x2610,Set())
                          x2613 = RegWrite(x2596,x2611,Set())
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2606
                        cur: x2606, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2606 = SRAMBankedRead(x2563,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2612
                        Computing fullDFS: x2610
                        Computing fullDFS: x2608
                        Computing fullDFS: x2607
                        [2.0 = max(2.0) + 0.0] x2607 = VecApply(x2606,0)
                        [2.4 = max(2.0) + 0.4] x2608 = FixLst(Const(0),x2607)
                        Computing fullDFS: x2609
                        [2.4 = max(2.0) + 0.4] x2609 = FixLst(Const(1),x2607)
                        [2.6 = max(2.4, 2.4) + 0.2] x2610 = And(x2608,x2609)
                        [3.6 = max(2.6) + 1.0] x2612 = RegWrite(x2594,x2610,Set())
                        Computing fullDFS: x2613
                        Computing fullDFS: x2611
                        [2.8000000000000003 = max(2.6) + 0.2] x2611 = Not(x2610)
                        [3.8 = max(2.8) + 1.0] x2613 = RegWrite(x2596,x2611,Set())
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [2.0] x2606 = SRAMBankedRead(x2563,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2607 = VecApply(x2606,0)
                          [2.4] x2608 = FixLst(Const(0),x2607)
                          [2.4] x2609 = FixLst(Const(1),x2607)
                          [2.6] x2610 = And(x2608,x2609)
                          [2.8] x2611 = Not(x2610)
                          [3.6] x2612 = RegWrite(x2594,x2610,Set())
                          [3.8] x2613 = RegWrite(x2596,x2611,Set())
                  x2633 = Switch(List(x2963, x2964),Block(x2632))
                    Working on pipeLatencies of result Vector(x2632, x2631, x2630, x2620, x2621, Const(90)), schedule Vector(x2631, x2632, x2620, x2621, x2622, x2623, x2624, x2625, x2626, x2627, x2628, x2629, x2630)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x2631 = SwitchCase(Block(x2630))
                      x2632 = SwitchCase(Block(Const(90)))
                      x2620 = RegRead(x2593)
                      x2621 = SRAMBankedRead(x2562,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2620)),Vec[Fix[TRUE,_10,_22]])
                      x2622 = VecApply(x2621,0)
                      x2623 = FixDiv(Const(100),x2622)
                      x2624 = FixDiv(x2623,x2622)
                      x2625 = FixDiv(x2624,x2622)
                      x2626 = FixDiv(x2625,x2622)
                      x2627 = FixDiv(x2626,x2622)
                      x2628 = FixDiv(Const(10),x2622)
                      x2629 = FixDiv(x2628,x2622)
                      x2630 = FixSub(x2627,x2629)
                    Computing fullDFS: x2632
                    cur: x2632, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2632 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x2631
                    Computing fullDFS: x2620
                    cur: x2620, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2620 = RegRead(x2593)
                    Computing fullDFS: x2621
                    [2.0 = max(0.0) + 2.0] x2621 = SRAMBankedRead(x2562,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2620)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x2630
                    Computing fullDFS: x2627
                    Computing fullDFS: x2622
                    [2.0 = max(2.0) + 0.0] x2622 = VecApply(x2621,0)
                    Computing fullDFS: x2626
                    Computing fullDFS: x2625
                    Computing fullDFS: x2624
                    Computing fullDFS: x2623
                    [22.0 = max(2.0) + 20.0] x2623 = FixDiv(Const(100),x2622)
                    [42.0 = max(2.0, 22.0) + 20.0] x2624 = FixDiv(x2623,x2622)
                    [62.0 = max(2.0, 42.0) + 20.0] x2625 = FixDiv(x2624,x2622)
                    [82.0 = max(2.0, 62.0) + 20.0] x2626 = FixDiv(x2625,x2622)
                    [102.0 = max(2.0, 82.0) + 20.0] x2627 = FixDiv(x2626,x2622)
                    Computing fullDFS: x2629
                    Computing fullDFS: x2628
                    [22.0 = max(2.0) + 20.0] x2628 = FixDiv(Const(10),x2622)
                    [42.0 = max(2.0, 22.0) + 20.0] x2629 = FixDiv(x2628,x2622)
                    [103.0 = max(102.0, 42.0) + 1.0] x2630 = FixSub(x2627,x2629)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x2631 = SwitchCase(Block(x2630))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x2632 = SwitchCase(Block(Const(90)))
                      [0.0] x2620 = RegRead(x2593)
                      [2.0] x2621 = SRAMBankedRead(x2562,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2620)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2622 = VecApply(x2621,0)
                      [22.0] x2623 = FixDiv(Const(100),x2622)
                      [22.0] x2628 = FixDiv(Const(10),x2622)
                      [42.0] x2624 = FixDiv(x2623,x2622)
                      [42.0] x2629 = FixDiv(x2628,x2622)
                      [62.0] x2625 = FixDiv(x2624,x2622)
                      [82.0] x2626 = FixDiv(x2625,x2622)
                      [102.0] x2627 = FixDiv(x2626,x2622)
                      [103.0] x2631 = SwitchCase(Block(x2630))
                      [103.0] x2630 = FixSub(x2627,x2629)
                  x2647 = Switch(List(x2965, x2966),Block(x2646))
                    Working on pipeLatencies of result Vector(x2646, x2645, x2644, x2634, x2635, Const(90)), schedule Vector(x2645, x2646, x2634, x2635, x2636, x2637, x2638, x2639, x2640, x2641, x2642, x2643, x2644)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x2645 = SwitchCase(Block(x2644))
                      x2646 = SwitchCase(Block(Const(90)))
                      x2634 = RegRead(x2594)
                      x2635 = SRAMBankedRead(x2563,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2634)),Vec[Fix[TRUE,_10,_22]])
                      x2636 = VecApply(x2635,0)
                      x2637 = FixDiv(Const(100),x2636)
                      x2638 = FixDiv(x2637,x2636)
                      x2639 = FixDiv(x2638,x2636)
                      x2640 = FixDiv(x2639,x2636)
                      x2641 = FixDiv(x2640,x2636)
                      x2642 = FixDiv(Const(10),x2636)
                      x2643 = FixDiv(x2642,x2636)
                      x2644 = FixSub(x2641,x2643)
                    Computing fullDFS: x2646
                    cur: x2646, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2646 = SwitchCase(Block(Const(90)))
                    Computing fullDFS: x2645
                    Computing fullDFS: x2634
                    cur: x2634, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2634 = RegRead(x2594)
                    Computing fullDFS: x2635
                    [2.0 = max(0.0) + 2.0] x2635 = SRAMBankedRead(x2563,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2634)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x2644
                    Computing fullDFS: x2641
                    Computing fullDFS: x2636
                    [2.0 = max(2.0) + 0.0] x2636 = VecApply(x2635,0)
                    Computing fullDFS: x2640
                    Computing fullDFS: x2639
                    Computing fullDFS: x2638
                    Computing fullDFS: x2637
                    [22.0 = max(2.0) + 20.0] x2637 = FixDiv(Const(100),x2636)
                    [42.0 = max(2.0, 22.0) + 20.0] x2638 = FixDiv(x2637,x2636)
                    [62.0 = max(2.0, 42.0) + 20.0] x2639 = FixDiv(x2638,x2636)
                    [82.0 = max(2.0, 62.0) + 20.0] x2640 = FixDiv(x2639,x2636)
                    [102.0 = max(2.0, 82.0) + 20.0] x2641 = FixDiv(x2640,x2636)
                    Computing fullDFS: x2643
                    Computing fullDFS: x2642
                    [22.0 = max(2.0) + 20.0] x2642 = FixDiv(Const(10),x2636)
                    [42.0 = max(2.0, 22.0) + 20.0] x2643 = FixDiv(x2642,x2636)
                    [103.0 = max(102.0, 42.0) + 1.0] x2644 = FixSub(x2641,x2643)
                    [103.0 = max(0.0, 2.0, 103.0) + 0.0] x2645 = SwitchCase(Block(x2644))
                    Computing fullDFS: Const(90)
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x2646 = SwitchCase(Block(Const(90)))
                      [0.0] x2634 = RegRead(x2594)
                      [2.0] x2635 = SRAMBankedRead(x2563,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2634)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2636 = VecApply(x2635,0)
                      [22.0] x2637 = FixDiv(Const(100),x2636)
                      [22.0] x2642 = FixDiv(Const(10),x2636)
                      [42.0] x2638 = FixDiv(x2637,x2636)
                      [42.0] x2643 = FixDiv(x2642,x2636)
                      [62.0] x2639 = FixDiv(x2638,x2636)
                      [82.0] x2640 = FixDiv(x2639,x2636)
                      [102.0] x2641 = FixDiv(x2640,x2636)
                      [103.0] x2645 = SwitchCase(Block(x2644))
                      [103.0] x2644 = FixSub(x2641,x2643)
                  x2652 = ParallelPipe(Set(b566),Block(Const(())))
                      x2649 = UnitPipe(Set(b2502, b566),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2648), schedule Vector(x2648)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2648 = SRAMBankedWrite(x2591,Vector(x2633),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2648
                        cur: x2648, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x2648 = SRAMBankedWrite(x2591,Vector(x2633),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x2648 = SRAMBankedWrite(x2591,Vector(x2633),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                      x2651 = UnitPipe(Set(b2503, b566),Block(Const(())),None)
                        Working on pipeLatencies of result Vector(Const(()), x2650), schedule Vector(x2650)
                        Memories with both reads and writes in this scope: Set()
                        Done finding cycles: Vector(), Map()
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2650 = SRAMBankedWrite(x2592,Vector(x2647),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2650
                        cur: x2650, inReduce: false, latency: 1.0
                        [1.0 = max(0) + 1.0] x2650 = SRAMBankedWrite(x2592,Vector(x2647),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                        Cycles: Map()
                          Schedule after pipeLatencies calculation:
                          [1.0] x2650 = SRAMBankedWrite(x2592,Vector(x2647),Vector(List(Const(0))),Vector(Const(0)),Vector(Set()))
                  x2685 = ParallelPipe(Set(b566),Block(Const(())))
                      x2670 = UnrolledForeach(Set(b2502, b566),x2655,Block(Const(())),List(List(b2657)),List(List(b2658)),None)
                        Working on pipeLatencies of result Vector(Const(()), x2659, x2667, x2666, x2662, x2669, x2665, x2668), schedule Vector(x2659, x2660, x2661, x2662, x2663, x2664, x2665, x2666, x2667, x2668, x2669)
                        Memories with both reads and writes in this scope: Set(x2508)
                        NonConflictSets(x2659, x2665): Set()
                        NonConflictSets(x2659, x2665): Set()
                        Found Cycle: x2659, x2665
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x2665 = SRAMBankedWrite(x2508,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          x2659 = SRAMBankedRead(x2508,Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                            x2659 = SRAMBankedRead(x2508,Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                            x2660 = VecApply(x2659,0)
                            x2661 = FixMul(x2660,Const(0.099999904632568359375))
                            x2664 = FixMul(x2661,x2663)
                            x2665 = SRAMBankedWrite(x2508,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                        Done finding cycles: Vector(AccumTriple(x2508,x2659,x2665)), Map(x2661 -> List(AccumTriple(x2508,x2659,x2665)), x2664 -> List(AccumTriple(x2508,x2659,x2665)), x2660 -> List(AccumTriple(x2508,x2659,x2665)), x2665 -> List(AccumTriple(x2508,x2659,x2665)), x2659 -> List(AccumTriple(x2508,x2659,x2665)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2659 = SRAMBankedRead(x2508,Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                          x2660 = VecApply(x2659,0)
                          x2661 = FixMul(x2660,Const(0.099999904632568359375))
                          x2662 = SRAMBankedRead(x2591,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                          x2663 = VecApply(x2662,0)
                          x2664 = FixMul(x2661,x2663)
                          x2665 = SRAMBankedWrite(x2508,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          x2666 = SRAMBankedWrite(x2509,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          x2667 = SRAMBankedWrite(x2505,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          x2668 = SRAMBankedWrite(x2506,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          x2669 = SRAMBankedWrite(x2507,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2659
                        cur: x2659, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x2508,x2659,x2665))
                        [2.0 = max(0) + 2.0] x2659 = SRAMBankedRead(x2508,Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        Computing fullDFS: x2667
                        Computing fullDFS: x2664
                        Computing fullDFS: x2661
                        Computing fullDFS: x2660
                        cycle deps of x2660: Vector(x2659, x2660)
                        [2.0 = max(2.0) + 0.0] x2660 = VecApply(x2659,0)[cycle]
                        cycle deps of x2661: Vector(x2659, x2660, x2661)
                        [8.0 = max(2.0) + 6.0] x2661 = FixMul(x2660,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x2663
                        Computing fullDFS: x2662
                        cur: x2662, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2662 = SRAMBankedRead(x2591,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                        [2.0 = max(2.0) + 0.0] x2663 = VecApply(x2662,0)
                        cycle deps of x2664: Vector(x2659, x2660, x2661, x2664)
                        [14.0 = max(8.0, 2.0) + 6.0] x2664 = FixMul(x2661,x2663)[cycle]
                        cycle deps of x2667: Vector(x2659, x2660, x2661, x2664, x2667)
                        [15.0 = max(14.0) + 1.0] x2667 = SRAMBankedWrite(x2505,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                        Computing fullDFS: x2666
                        cycle deps of x2666: Vector(x2659, x2660, x2661, x2664, x2666)
                        [15.0 = max(14.0) + 1.0] x2666 = SRAMBankedWrite(x2509,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                        Computing fullDFS: x2669
                        cycle deps of x2669: Vector(x2659, x2660, x2661, x2664, x2669)
                        [15.0 = max(14.0) + 1.0] x2669 = SRAMBankedWrite(x2507,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                        Computing fullDFS: x2665
                        cycle deps of x2665: Vector(x2659, x2659, x2660, x2661, x2664, x2665)
                        [15.0 = max(2.0, 14.0) + 1.0] x2665 = SRAMBankedWrite(x2508,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))[cycle]
                        Computing fullDFS: x2668
                        cycle deps of x2668: Vector(x2659, x2660, x2661, x2664, x2668)
                        [15.0 = max(14.0) + 1.0] x2668 = SRAMBankedWrite(x2506,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                        Cycle #0: write: x2665, cycle: x2659, x2659, x2660, x2661, x2664, x2665
                        x2664 = FixMul(x2661,x2663) [14.0]
                          [14.0 = 15.0 - 1.0] x2665 = SRAMBankedWrite(x2508,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          [14.0 = 15.0 - 1.0] x2666 = SRAMBankedWrite(x2509,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          [14.0 = 15.0 - 1.0] x2667 = SRAMBankedWrite(x2505,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          [14.0 = 15.0 - 1.0] x2668 = SRAMBankedWrite(x2506,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          [14.0 = 15.0 - 1.0] x2669 = SRAMBankedWrite(x2507,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          [14.0]
                        x2661 = FixMul(x2660,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x2664 = FixMul(x2661,x2663)
                          [8.0]
                        x2660 = VecApply(x2659,0) [2.0]
                          [2.0 = 8.0 - 6.0] x2661 = FixMul(x2660,Const(0.099999904632568359375))
                          [2.0]
                        x2659 = SRAMBankedRead(x2508,Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2660 = VecApply(x2659,0)
                          [2.0]
                        x2659 = SRAMBankedRead(x2508,Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2660 = VecApply(x2659,0)
                          [2.0]
                        Cycles: Map(x2667 -> Vector(x2659, x2660, x2661, x2664, x2667), x2661 -> Vector(x2659, x2660, x2661), x2664 -> Vector(x2659, x2660, x2661, x2664), x2666 -> Vector(x2659, x2660, x2661, x2664, x2666), x2669 -> Vector(x2659, x2660, x2661, x2664, x2669), x2660 -> Vector(x2659, x2660), x2668 -> Vector(x2659, x2660, x2661, x2664, x2668), x2665 -> Vector(x2659, x2659, x2660, x2661, x2664, x2665), x2659 -> List(x2659))
                        pseudo cycles for x2508:
                        Multiplexed accesses for memory x2508: 
                          x2659 = SRAMBankedRead(x2508,Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                        Access: x2659 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2659 = SRAMBankedRead(x2508,Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x2508: 
                          x2665 = SRAMBankedWrite(x2508,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                        Access: x2665 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2665 = SRAMBankedWrite(x2508,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x2659),x2508,1.0)
                        AAACycle(Vector(x2665),x2508,1.0)
                        WARCycle(x2659,x2665,x2508,Vector(x2659, x2659, x2660, x2661, x2664, x2665),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x2659 = SRAMBankedRead(x2508,Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2660 = VecApply(x2659,0)
                          [2.0] x2662 = SRAMBankedRead(x2591,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2663 = VecApply(x2662,0)
                          [8.0] x2661 = FixMul(x2660,Const(0.099999904632568359375))
                          [14.0] x2664 = FixMul(x2661,x2663)
                          [15.0] x2665 = SRAMBankedWrite(x2508,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          [15.0] x2666 = SRAMBankedWrite(x2509,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          [15.0] x2667 = SRAMBankedWrite(x2505,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          [15.0] x2668 = SRAMBankedWrite(x2506,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                          [15.0] x2669 = SRAMBankedWrite(x2507,Vector(x2664),Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)))
                        Cycle #0 on x2508: 
                          x2508 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                      x2684 = UnrolledForeach(Set(b2503, b566),x2656,Block(Const(())),List(List(b2671)),List(List(b2672)),None)
                        Working on pipeLatencies of result Vector(Const(()), x2676, x2682, x2673, x2681, x2679, x2680, x2683), schedule Vector(x2673, x2674, x2675, x2676, x2677, x2678, x2679, x2680, x2681, x2682, x2683)
                        Memories with both reads and writes in this scope: Set(x2513)
                        NonConflictSets(x2673, x2682): Set()
                        NonConflictSets(x2673, x2682): Set()
                        Found Cycle: x2673, x2682
                        Exclusions: Set() Set() 
                        Found cycle between: 
                          x2682 = SRAMBankedWrite(x2513,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          x2673 = SRAMBankedRead(x2513,Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                            x2673 = SRAMBankedRead(x2513,Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                            x2674 = VecApply(x2673,0)
                            x2675 = FixMul(x2674,Const(0.099999904632568359375))
                            x2678 = FixMul(x2675,x2677)
                            x2682 = SRAMBankedWrite(x2513,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                        Done finding cycles: Vector(AccumTriple(x2513,x2673,x2682)), Map(x2682 -> List(AccumTriple(x2513,x2673,x2682)), x2673 -> List(AccumTriple(x2513,x2673,x2682)), x2675 -> List(AccumTriple(x2513,x2673,x2682)), x2678 -> List(AccumTriple(x2513,x2673,x2682)), x2674 -> List(AccumTriple(x2513,x2673,x2682)))
                        ----------------------------------
                        Computing pipeLatencies for scope:
                          x2673 = SRAMBankedRead(x2513,Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                          x2674 = VecApply(x2673,0)
                          x2675 = FixMul(x2674,Const(0.099999904632568359375))
                          x2676 = SRAMBankedRead(x2592,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                          x2677 = VecApply(x2676,0)
                          x2678 = FixMul(x2675,x2677)
                          x2679 = SRAMBankedWrite(x2512,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          x2680 = SRAMBankedWrite(x2514,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          x2681 = SRAMBankedWrite(x2510,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          x2682 = SRAMBankedWrite(x2513,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          x2683 = SRAMBankedWrite(x2511,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                        Computing fullDFS: Const(())
                        Computing fullDFS: x2676
                        cur: x2676, inReduce: false, latency: 2.0
                        [2.0 = max(0) + 2.0] x2676 = SRAMBankedRead(x2592,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                        Computing fullDFS: x2682
                        Computing fullDFS: x2673
                        cur: x2673, inReduce: true, latency: 2.0
                        Known Cycles: List(AccumTriple(x2513,x2673,x2682))
                        [2.0 = max(0) + 2.0] x2673 = SRAMBankedRead(x2513,Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]])[cycle]
                        Computing fullDFS: x2678
                        Computing fullDFS: x2675
                        Computing fullDFS: x2674
                        cycle deps of x2674: Vector(x2673, x2674)
                        [2.0 = max(2.0) + 0.0] x2674 = VecApply(x2673,0)[cycle]
                        cycle deps of x2675: Vector(x2673, x2674, x2675)
                        [8.0 = max(2.0) + 6.0] x2675 = FixMul(x2674,Const(0.099999904632568359375))[cycle]
                        Computing fullDFS: x2677
                        [2.0 = max(2.0) + 0.0] x2677 = VecApply(x2676,0)
                        cycle deps of x2678: Vector(x2673, x2674, x2675, x2678)
                        [14.0 = max(8.0, 2.0) + 6.0] x2678 = FixMul(x2675,x2677)[cycle]
                        cycle deps of x2682: Vector(x2673, x2673, x2674, x2675, x2678, x2682)
                        [15.0 = max(2.0, 14.0) + 1.0] x2682 = SRAMBankedWrite(x2513,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))[cycle]
                        Computing fullDFS: x2681
                        cycle deps of x2681: Vector(x2673, x2674, x2675, x2678, x2681)
                        [15.0 = max(14.0) + 1.0] x2681 = SRAMBankedWrite(x2510,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                        Computing fullDFS: x2679
                        cycle deps of x2679: Vector(x2673, x2674, x2675, x2678, x2679)
                        [15.0 = max(14.0) + 1.0] x2679 = SRAMBankedWrite(x2512,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                        Computing fullDFS: x2680
                        cycle deps of x2680: Vector(x2673, x2674, x2675, x2678, x2680)
                        [15.0 = max(14.0) + 1.0] x2680 = SRAMBankedWrite(x2514,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                        Computing fullDFS: x2683
                        cycle deps of x2683: Vector(x2673, x2674, x2675, x2678, x2683)
                        [15.0 = max(14.0) + 1.0] x2683 = SRAMBankedWrite(x2511,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                        Cycle #0: write: x2682, cycle: x2673, x2673, x2674, x2675, x2678, x2682
                        x2678 = FixMul(x2675,x2677) [14.0]
                          [14.0 = 15.0 - 1.0] x2679 = SRAMBankedWrite(x2512,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          [14.0 = 15.0 - 1.0] x2680 = SRAMBankedWrite(x2514,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          [14.0 = 15.0 - 1.0] x2681 = SRAMBankedWrite(x2510,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          [14.0 = 15.0 - 1.0] x2682 = SRAMBankedWrite(x2513,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          [14.0 = 15.0 - 1.0] x2683 = SRAMBankedWrite(x2511,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          [14.0]
                        x2675 = FixMul(x2674,Const(0.099999904632568359375)) [8.0]
                          [8.0 = 14.0 - 6.0] x2678 = FixMul(x2675,x2677)
                          [8.0]
                        x2674 = VecApply(x2673,0) [2.0]
                          [2.0 = 8.0 - 6.0] x2675 = FixMul(x2674,Const(0.099999904632568359375))
                          [2.0]
                        x2673 = SRAMBankedRead(x2513,Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2674 = VecApply(x2673,0)
                          [2.0]
                        x2673 = SRAMBankedRead(x2513,Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                          [2.0 = 2.0 - 0.0] x2674 = VecApply(x2673,0)
                          [2.0]
                        Cycles: Map(x2679 -> Vector(x2673, x2674, x2675, x2678, x2679), x2682 -> Vector(x2673, x2673, x2674, x2675, x2678, x2682), x2673 -> List(x2673), x2681 -> Vector(x2673, x2674, x2675, x2678, x2681), x2675 -> Vector(x2673, x2674, x2675), x2678 -> Vector(x2673, x2674, x2675, x2678), x2680 -> Vector(x2673, x2674, x2675, x2678, x2680), x2683 -> Vector(x2673, x2674, x2675, x2678, x2683), x2674 -> Vector(x2673, x2674))
                        pseudo cycles for x2513:
                        Multiplexed accesses for memory x2513: 
                          x2673 = SRAMBankedRead(x2513,Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                        Access: x2673 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2673 = SRAMBankedRead(x2513,Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 2.0 due to muxing.
                        Multiplexed accesses for memory x2513: 
                          x2682 = SRAMBankedWrite(x2513,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                        Access: x2682 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))))
                        First Port: Map(List() -> Port(Some(6),0,0,Vector(0),Vector(0)))
                        Pushing x2682 = SRAMBankedWrite(x2513,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566))) by 0.0 to 15.0 due to muxing.
                        Found cycles: 
                        AAACycle(Vector(x2673),x2513,1.0)
                        AAACycle(Vector(x2682),x2513,1.0)
                        WARCycle(x2673,x2682,x2513,Vector(x2673, x2673, x2674, x2675, x2678, x2682),15.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                          Schedule after pipeLatencies calculation:
                          [2.0] x2673 = SRAMBankedRead(x2513,Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2674 = VecApply(x2673,0)
                          [2.0] x2676 = SRAMBankedRead(x2592,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]])
                          [2.0] x2677 = VecApply(x2676,0)
                          [8.0] x2675 = FixMul(x2674,Const(0.099999904632568359375))
                          [14.0] x2678 = FixMul(x2675,x2677)
                          [15.0] x2679 = SRAMBankedWrite(x2512,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          [15.0] x2680 = SRAMBankedWrite(x2514,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          [15.0] x2681 = SRAMBankedWrite(x2510,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          [15.0] x2682 = SRAMBankedWrite(x2513,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                          [15.0] x2683 = SRAMBankedWrite(x2511,Vector(x2678),Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)))
                        Cycle #0 on x2513: 
                          x2513 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [tmp_3]
                          disjoint:     true
                          no visible intermediates:
                            closed cycle:     false
                            no intermediates: true
                            is local mem:     true
                            number of writers:  2
                            outer reduce:     false
                            accum type:       Fold (if reduce, overrides no intermediates)
                  x2705 = UnrolledForeach(Set(),x626,Block(Const(())),Vector(List(b2501)),Vector(List(b2504)),None)
                    Working on pipeLatencies of result Vector(Const(()), x2686, x2703, x2688, x2704, x2690), schedule Vector(x2686, x2687, x2688, x2689, x2690, x2691, x2692, x2694, x2696, x2697, x2698, x2700, x2701, x2702, x2703, x2704)
                    Memories with both reads and writes in this scope: Set(x585)
                    NonConflictSets(x2690, x2703): Set()
                    NonConflictSets(x2690, x2703): Set()
                    Found Cycle: x2690, x2703
                    Exclusions: Set() Set() 
                    Found cycle between: 
                      x2703 = SRAMBankedWrite(x585,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)))
                      x2690 = SRAMBankedRead(x585,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
                        x2690 = SRAMBankedRead(x585,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
                        x2691 = VecApply(x2690,0)
                        x2701 = FixAdd(x2698,x2691)
                        x2702 = Mux(x2700,x2698,x2701)
                        x2703 = SRAMBankedWrite(x585,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)))
                    Done finding cycles: Vector(AccumTriple(x585,x2690,x2703)), Map(x2703 -> List(AccumTriple(x585,x2690,x2703)), x2690 -> List(AccumTriple(x585,x2690,x2703)), x2702 -> List(AccumTriple(x585,x2690,x2703)), x2701 -> List(AccumTriple(x585,x2690,x2703)), x2691 -> List(AccumTriple(x585,x2690,x2703)))
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x2686 = SRAMBankedRead(x2509,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
                      x2687 = VecApply(x2686,0)
                      x2688 = SRAMBankedRead(x2514,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
                      x2689 = VecApply(x2688,0)
                      x2690 = SRAMBankedRead(x585,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
                      x2691 = VecApply(x2690,0)
                      x2692 = And(b2504,b566)
                      x2694 = And(b2503,b566)
                      x2696 = And(x2694,x2692)
                      x2697 = FixAdd(x2687,x2689)
                      x2698 = Mux(x2696,x2697,x2687)
                      x2700 = FixEql(b2499,Const(0))
                      x2701 = FixAdd(x2698,x2691)
                      x2702 = Mux(x2700,x2698,x2701)
                      x2703 = SRAMBankedWrite(x585,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)))
                      x2704 = SRAMBankedWrite(x586,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)))
                    Computing fullDFS: Const(())
                    Computing fullDFS: x2686
                    cur: x2686, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x2686 = SRAMBankedRead(x2509,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
                    Computing fullDFS: x2703
                    Computing fullDFS: x2690
                    cur: x2690, inReduce: true, latency: 2.0
                    Known Cycles: List(AccumTriple(x585,x2690,x2703))
                    [2.0 = max(0) + 2.0] x2690 = SRAMBankedRead(x585,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])[cycle]
                    Computing fullDFS: x2702
                    Computing fullDFS: x2698
                    Computing fullDFS: x2687
                    [2.0 = max(2.0) + 0.0] x2687 = VecApply(x2686,0)
                    Computing fullDFS: x2696
                    Computing fullDFS: x2692
                    cur: x2692, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x2692 = And(b2504,b566)
                    Computing fullDFS: x2694
                    cur: x2694, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x2694 = And(b2503,b566)
                    [0.4 = max(0.2, 0.2) + 0.2] x2696 = And(x2694,x2692)
                    Computing fullDFS: x2697
                    Computing fullDFS: x2689
                    Computing fullDFS: x2688
                    cur: x2688, inReduce: false, latency: 2.0
                    [2.0 = max(0) + 2.0] x2688 = SRAMBankedRead(x2514,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
                    [2.0 = max(2.0) + 0.0] x2689 = VecApply(x2688,0)
                    [3.0 = max(2.0, 2.0) + 1.0] x2697 = FixAdd(x2687,x2689)
                    [3.5 = max(2.0, 0.4, 3.0) + 0.5] x2698 = Mux(x2696,x2697,x2687)
                    Computing fullDFS: x2700
                    cur: x2700, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x2700 = FixEql(b2499,Const(0))
                    Computing fullDFS: x2701
                    Computing fullDFS: x2691
                    cycle deps of x2691: Vector(x2690, x2691)
                    [2.0 = max(2.0) + 0.0] x2691 = VecApply(x2690,0)[cycle]
                    cycle deps of x2701: Vector(x2690, x2691, x2701)
                    [4.5 = max(2.0, 3.5) + 1.0] x2701 = FixAdd(x2698,x2691)[cycle]
                    cycle deps of x2702: Vector(x2690, x2691, x2701, x2702)
                    [5.0 = max(3.5, 0.2, 4.5) + 0.5] x2702 = Mux(x2700,x2698,x2701)[cycle]
                    cycle deps of x2703: Vector(x2690, x2690, x2691, x2701, x2702, x2703)
                    [6.0 = max(2.0, 5.0) + 1.0] x2703 = SRAMBankedWrite(x585,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)))[cycle]
                    Computing fullDFS: x2704
                    cycle deps of x2704: Vector(x2690, x2691, x2701, x2702, x2704)
                    [6.0 = max(5.0) + 1.0] x2704 = SRAMBankedWrite(x586,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)))
                    Cycle #0: write: x2703, cycle: x2690, x2690, x2691, x2701, x2702, x2703
                    x2702 = Mux(x2700,x2698,x2701) [5.0]
                      [5.0 = 6.0 - 1.0] x2703 = SRAMBankedWrite(x585,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)))
                      [5.0 = 6.0 - 1.0] x2704 = SRAMBankedWrite(x586,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)))
                      [5.0]
                    x2701 = FixAdd(x2698,x2691) [4.5]
                      [4.5 = 5.0 - 0.5] x2702 = Mux(x2700,x2698,x2701)
                      [4.5]
                    x2691 = VecApply(x2690,0) [2.0]
                      [3.5 = 4.5 - 1.0] x2701 = FixAdd(x2698,x2691)
                      [3.5]
                    x2690 = SRAMBankedRead(x585,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]]) [2.0]
                      [3.5 = 3.5 - 0.0] x2691 = VecApply(x2690,0)
                      [3.5]
                    x2690 = SRAMBankedRead(x585,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]]) [3.5]
                      [3.5 = 3.5 - 0.0] x2691 = VecApply(x2690,0)
                      [3.5]
                    Cycles: Map(x2703 -> Vector(x2690, x2690, x2691, x2701, x2702, x2703), x2690 -> List(x2690), x2702 -> Vector(x2690, x2691, x2701, x2702), x2704 -> Vector(x2690, x2691, x2701, x2702, x2704), x2701 -> Vector(x2690, x2691, x2701), x2691 -> Vector(x2690, x2691))
                    pseudo cycles for x585:
                    Multiplexed accesses for memory x585: 
                      x2690 = SRAMBankedRead(x585,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
                    Access: x2690 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x2690 = SRAMBankedRead(x585,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]]) by 0.0 to 3.5 due to muxing.
                    Multiplexed accesses for memory x585: 
                      x2703 = SRAMBankedWrite(x585,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)))
                    Access: x2703 -> Ports: Some(Map(0 -> Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))))
                    First Port: Map(List() -> Port(Some(0),0,0,Vector(0),Vector(0)))
                    Pushing x2703 = SRAMBankedWrite(x585,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566))) by 0.0 to 6.0 due to muxing.
                    Found cycles: 
                    AAACycle(Vector(x2690),x585,1.0)
                    AAACycle(Vector(x2703),x585,1.0)
                    WARCycle(x2690,x2703,x585,Vector(x2690, x2690, x2691, x2701, x2702, x2703),5.0,spatial.node.AccumMarker$Unknown$@277b4e64,-1)
                      Schedule after pipeLatencies calculation:
                      [0.2] x2692 = And(b2504,b566)
                      [0.2] x2694 = And(b2503,b566)
                      [0.2] x2700 = FixEql(b2499,Const(0))
                      [0.4] x2696 = And(x2694,x2692)
                      [2.0] x2686 = SRAMBankedRead(x2509,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2687 = VecApply(x2686,0)
                      [2.0] x2688 = SRAMBankedRead(x2514,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
                      [2.0] x2689 = VecApply(x2688,0)
                      [3.0] x2697 = FixAdd(x2687,x2689)
                      [3.5] x2690 = SRAMBankedRead(x585,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]])
                      [3.5] x2691 = VecApply(x2690,0)
                      [3.5] x2698 = Mux(x2696,x2697,x2687)
                      [4.5] x2701 = FixAdd(x2698,x2691)
                      [5.0] x2702 = Mux(x2700,x2698,x2701)
                      [6.0] x2703 = SRAMBankedWrite(x585,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)))
                      [6.0] x2704 = SRAMBankedWrite(x586,Vector(x2702),Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)))
                    Cycle #0 on x585: 
                      x585 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]]) [accum_0]
                      disjoint:     true
                      no visible intermediates:
                        closed cycle:     false
                        no intermediates: true
                        is local mem:     true
                        number of writers:  1
                        outer reduce:     false
                        accum type:       Fold (if reduce, overrides no intermediates)
          x2858 = ParallelPipe(Set(),Block(Const(())))
              x2740 = UnrolledForeach(Set(b557),x2718,Block(Const(())),List(List(b2728)),List(List(b2729)),None)
                Working on pipeLatencies of result Vector(Const(()), x2730, x2736, x2739), schedule Vector(x2730, x2731, x2733, x3097, x3098, x2735, x2736, x2737, x2738, x2739)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x2730 = SRAMBankedRead(x568,Vector(List(Const(0))),Vector(b2728),Vector(Set(b2729, b557)),Vec[Fix[TRUE,_10,_22]])
                  x2731 = VecApply(x2730,0)
                  x2733 = FixDiv(b547,Const(10))
                  x3097 = FixSLA(x2733,Const(1))
                  x3098 = FixAdd(x3097,x2733)
                  x2735 = FixAdd(x3098,b2728)
                  x2736 = SRAMBankedRead(x473,Vector(List(Const(0), Const(0))),Vector(x2735),Vector(Set(b2729, b557)),Vec[Fix[TRUE,_10,_22]])
                  x2737 = VecApply(x2736,0)
                  x2738 = FixAdd(x2731,x2737)
                  x2739 = SRAMBankedWrite(x544,Vector(x2738),Vector(List(Const(0), Const(0))),Vector(x2735),Vector(Set(b2729, b557)))
                Computing fullDFS: Const(())
                Computing fullDFS: x2730
                cur: x2730, inReduce: false, latency: 2.0
                [2.0 = max(0) + 2.0] x2730 = SRAMBankedRead(x568,Vector(List(Const(0))),Vector(b2728),Vector(Set(b2729, b557)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2736
                Computing fullDFS: x2735
                Computing fullDFS: x3098
                Computing fullDFS: x2733
                cur: x2733, inReduce: false, latency: 20.0
                [20.0 = max(0) + 20.0] x2733 = FixDiv(b547,Const(10))
                Computing fullDFS: x3097
                [20.2 = max(20.0) + 0.2] x3097 = FixSLA(x2733,Const(1))
                [21.2 = max(20.0, 20.2) + 1.0] x3098 = FixAdd(x3097,x2733)
                [22.2 = max(21.2) + 1.0] x2735 = FixAdd(x3098,b2728)
                [24.2 = max(22.2) + 2.0] x2736 = SRAMBankedRead(x473,Vector(List(Const(0), Const(0))),Vector(x2735),Vector(Set(b2729, b557)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2739
                Computing fullDFS: x2738
                Computing fullDFS: x2731
                [2.0 = max(2.0) + 0.0] x2731 = VecApply(x2730,0)
                Computing fullDFS: x2737
                [24.2 = max(24.2) + 0.0] x2737 = VecApply(x2736,0)
                [25.2 = max(2.0, 24.2) + 1.0] x2738 = FixAdd(x2731,x2737)
                [26.2 = max(22.2, 25.2) + 1.0] x2739 = SRAMBankedWrite(x544,Vector(x2738),Vector(List(Const(0), Const(0))),Vector(x2735),Vector(Set(b2729, b557)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [2.0] x2730 = SRAMBankedRead(x568,Vector(List(Const(0))),Vector(b2728),Vector(Set(b2729, b557)),Vec[Fix[TRUE,_10,_22]])
                  [2.0] x2731 = VecApply(x2730,0)
                  [20.0] x2733 = FixDiv(b547,Const(10))
                  [20.2] x3097 = FixSLA(x2733,Const(1))
                  [21.2] x3098 = FixAdd(x3097,x2733)
                  [22.2] x2735 = FixAdd(x3098,b2728)
                  [24.2] x2736 = SRAMBankedRead(x473,Vector(List(Const(0), Const(0))),Vector(x2735),Vector(Set(b2729, b557)),Vec[Fix[TRUE,_10,_22]])
                  [24.2] x2737 = VecApply(x2736,0)
                  [25.2] x2738 = FixAdd(x2731,x2737)
                  [26.2] x2739 = SRAMBankedWrite(x544,Vector(x2738),Vector(List(Const(0), Const(0))),Vector(x2735),Vector(Set(b2729, b557)))
              x2753 = UnrolledForeach(Set(b558),x2719,Block(Const(())),List(List(b2741)),List(List(b2742)),None)
                Working on pipeLatencies of result Vector(Const(()), x2743, x2749, x2752), schedule Vector(x2743, x2744, x2746, x3099, x3100, x2748, x2749, x2750, x2751, x2752)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x2743 = SRAMBankedRead(x570,Vector(List(Const(0))),Vector(b2741),Vector(Set(b2742, b558)),Vec[Fix[TRUE,_10,_22]])
                  x2744 = VecApply(x2743,0)
                  x2746 = FixDiv(b548,Const(10))
                  x3099 = FixSLA(x2746,Const(1))
                  x3100 = FixAdd(x3099,x2746)
                  x2748 = FixAdd(x3100,b2741)
                  x2749 = SRAMBankedRead(x473,Vector(List(Const(1), Const(0))),Vector(x2748),Vector(Set(b2742, b558)),Vec[Fix[TRUE,_10,_22]])
                  x2750 = VecApply(x2749,0)
                  x2751 = FixAdd(x2744,x2750)
                  x2752 = SRAMBankedWrite(x544,Vector(x2751),Vector(List(Const(1), Const(0))),Vector(x2748),Vector(Set(b2742, b558)))
                Computing fullDFS: Const(())
                Computing fullDFS: x2743
                cur: x2743, inReduce: false, latency: 2.0
                [2.0 = max(0) + 2.0] x2743 = SRAMBankedRead(x570,Vector(List(Const(0))),Vector(b2741),Vector(Set(b2742, b558)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2749
                Computing fullDFS: x2748
                Computing fullDFS: x3100
                Computing fullDFS: x2746
                cur: x2746, inReduce: false, latency: 20.0
                [20.0 = max(0) + 20.0] x2746 = FixDiv(b548,Const(10))
                Computing fullDFS: x3099
                [20.2 = max(20.0) + 0.2] x3099 = FixSLA(x2746,Const(1))
                [21.2 = max(20.0, 20.2) + 1.0] x3100 = FixAdd(x3099,x2746)
                [22.2 = max(21.2) + 1.0] x2748 = FixAdd(x3100,b2741)
                [24.2 = max(22.2) + 2.0] x2749 = SRAMBankedRead(x473,Vector(List(Const(1), Const(0))),Vector(x2748),Vector(Set(b2742, b558)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2752
                Computing fullDFS: x2751
                Computing fullDFS: x2744
                [2.0 = max(2.0) + 0.0] x2744 = VecApply(x2743,0)
                Computing fullDFS: x2750
                [24.2 = max(24.2) + 0.0] x2750 = VecApply(x2749,0)
                [25.2 = max(2.0, 24.2) + 1.0] x2751 = FixAdd(x2744,x2750)
                [26.2 = max(22.2, 25.2) + 1.0] x2752 = SRAMBankedWrite(x544,Vector(x2751),Vector(List(Const(1), Const(0))),Vector(x2748),Vector(Set(b2742, b558)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [2.0] x2743 = SRAMBankedRead(x570,Vector(List(Const(0))),Vector(b2741),Vector(Set(b2742, b558)),Vec[Fix[TRUE,_10,_22]])
                  [2.0] x2744 = VecApply(x2743,0)
                  [20.0] x2746 = FixDiv(b548,Const(10))
                  [20.2] x3099 = FixSLA(x2746,Const(1))
                  [21.2] x3100 = FixAdd(x3099,x2746)
                  [22.2] x2748 = FixAdd(x3100,b2741)
                  [24.2] x2749 = SRAMBankedRead(x473,Vector(List(Const(1), Const(0))),Vector(x2748),Vector(Set(b2742, b558)),Vec[Fix[TRUE,_10,_22]])
                  [24.2] x2750 = VecApply(x2749,0)
                  [25.2] x2751 = FixAdd(x2744,x2750)
                  [26.2] x2752 = SRAMBankedWrite(x544,Vector(x2751),Vector(List(Const(1), Const(0))),Vector(x2748),Vector(Set(b2742, b558)))
              x2766 = UnrolledForeach(Set(b559),x2720,Block(Const(())),List(List(b2754)),List(List(b2755)),None)
                Working on pipeLatencies of result Vector(Const(()), x2756, x2762, x2765), schedule Vector(x2756, x2757, x2759, x3101, x3102, x2761, x2762, x2763, x2764, x2765)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x2756 = SRAMBankedRead(x572,Vector(List(Const(0))),Vector(b2754),Vector(Set(b2755, b559)),Vec[Fix[TRUE,_10,_22]])
                  x2757 = VecApply(x2756,0)
                  x2759 = FixDiv(b549,Const(10))
                  x3101 = FixSLA(x2759,Const(1))
                  x3102 = FixAdd(x3101,x2759)
                  x2761 = FixAdd(x3102,b2754)
                  x2762 = SRAMBankedRead(x473,Vector(List(Const(2), Const(0))),Vector(x2761),Vector(Set(b2755, b559)),Vec[Fix[TRUE,_10,_22]])
                  x2763 = VecApply(x2762,0)
                  x2764 = FixAdd(x2757,x2763)
                  x2765 = SRAMBankedWrite(x544,Vector(x2764),Vector(List(Const(2), Const(0))),Vector(x2761),Vector(Set(b2755, b559)))
                Computing fullDFS: Const(())
                Computing fullDFS: x2756
                cur: x2756, inReduce: false, latency: 2.0
                [2.0 = max(0) + 2.0] x2756 = SRAMBankedRead(x572,Vector(List(Const(0))),Vector(b2754),Vector(Set(b2755, b559)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2762
                Computing fullDFS: x2761
                Computing fullDFS: x3102
                Computing fullDFS: x2759
                cur: x2759, inReduce: false, latency: 20.0
                [20.0 = max(0) + 20.0] x2759 = FixDiv(b549,Const(10))
                Computing fullDFS: x3101
                [20.2 = max(20.0) + 0.2] x3101 = FixSLA(x2759,Const(1))
                [21.2 = max(20.0, 20.2) + 1.0] x3102 = FixAdd(x3101,x2759)
                [22.2 = max(21.2) + 1.0] x2761 = FixAdd(x3102,b2754)
                [24.2 = max(22.2) + 2.0] x2762 = SRAMBankedRead(x473,Vector(List(Const(2), Const(0))),Vector(x2761),Vector(Set(b2755, b559)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2765
                Computing fullDFS: x2764
                Computing fullDFS: x2757
                [2.0 = max(2.0) + 0.0] x2757 = VecApply(x2756,0)
                Computing fullDFS: x2763
                [24.2 = max(24.2) + 0.0] x2763 = VecApply(x2762,0)
                [25.2 = max(2.0, 24.2) + 1.0] x2764 = FixAdd(x2757,x2763)
                [26.2 = max(22.2, 25.2) + 1.0] x2765 = SRAMBankedWrite(x544,Vector(x2764),Vector(List(Const(2), Const(0))),Vector(x2761),Vector(Set(b2755, b559)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [2.0] x2756 = SRAMBankedRead(x572,Vector(List(Const(0))),Vector(b2754),Vector(Set(b2755, b559)),Vec[Fix[TRUE,_10,_22]])
                  [2.0] x2757 = VecApply(x2756,0)
                  [20.0] x2759 = FixDiv(b549,Const(10))
                  [20.2] x3101 = FixSLA(x2759,Const(1))
                  [21.2] x3102 = FixAdd(x3101,x2759)
                  [22.2] x2761 = FixAdd(x3102,b2754)
                  [24.2] x2762 = SRAMBankedRead(x473,Vector(List(Const(2), Const(0))),Vector(x2761),Vector(Set(b2755, b559)),Vec[Fix[TRUE,_10,_22]])
                  [24.2] x2763 = VecApply(x2762,0)
                  [25.2] x2764 = FixAdd(x2757,x2763)
                  [26.2] x2765 = SRAMBankedWrite(x544,Vector(x2764),Vector(List(Const(2), Const(0))),Vector(x2761),Vector(Set(b2755, b559)))
              x2779 = UnrolledForeach(Set(b560),x2721,Block(Const(())),List(List(b2767)),List(List(b2768)),None)
                Working on pipeLatencies of result Vector(Const(()), x2769, x2775, x2778), schedule Vector(x2769, x2770, x2772, x3103, x3104, x2774, x2775, x2776, x2777, x2778)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x2769 = SRAMBankedRead(x574,Vector(List(Const(0))),Vector(b2767),Vector(Set(b2768, b560)),Vec[Fix[TRUE,_10,_22]])
                  x2770 = VecApply(x2769,0)
                  x2772 = FixDiv(b550,Const(10))
                  x3103 = FixSLA(x2772,Const(1))
                  x3104 = FixAdd(x3103,x2772)
                  x2774 = FixAdd(x3104,b2767)
                  x2775 = SRAMBankedRead(x473,Vector(List(Const(3), Const(0))),Vector(x2774),Vector(Set(b2768, b560)),Vec[Fix[TRUE,_10,_22]])
                  x2776 = VecApply(x2775,0)
                  x2777 = FixAdd(x2770,x2776)
                  x2778 = SRAMBankedWrite(x544,Vector(x2777),Vector(List(Const(3), Const(0))),Vector(x2774),Vector(Set(b2768, b560)))
                Computing fullDFS: Const(())
                Computing fullDFS: x2769
                cur: x2769, inReduce: false, latency: 2.0
                [2.0 = max(0) + 2.0] x2769 = SRAMBankedRead(x574,Vector(List(Const(0))),Vector(b2767),Vector(Set(b2768, b560)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2775
                Computing fullDFS: x2774
                Computing fullDFS: x3104
                Computing fullDFS: x2772
                cur: x2772, inReduce: false, latency: 20.0
                [20.0 = max(0) + 20.0] x2772 = FixDiv(b550,Const(10))
                Computing fullDFS: x3103
                [20.2 = max(20.0) + 0.2] x3103 = FixSLA(x2772,Const(1))
                [21.2 = max(20.0, 20.2) + 1.0] x3104 = FixAdd(x3103,x2772)
                [22.2 = max(21.2) + 1.0] x2774 = FixAdd(x3104,b2767)
                [24.2 = max(22.2) + 2.0] x2775 = SRAMBankedRead(x473,Vector(List(Const(3), Const(0))),Vector(x2774),Vector(Set(b2768, b560)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2778
                Computing fullDFS: x2777
                Computing fullDFS: x2770
                [2.0 = max(2.0) + 0.0] x2770 = VecApply(x2769,0)
                Computing fullDFS: x2776
                [24.2 = max(24.2) + 0.0] x2776 = VecApply(x2775,0)
                [25.2 = max(2.0, 24.2) + 1.0] x2777 = FixAdd(x2770,x2776)
                [26.2 = max(22.2, 25.2) + 1.0] x2778 = SRAMBankedWrite(x544,Vector(x2777),Vector(List(Const(3), Const(0))),Vector(x2774),Vector(Set(b2768, b560)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [2.0] x2769 = SRAMBankedRead(x574,Vector(List(Const(0))),Vector(b2767),Vector(Set(b2768, b560)),Vec[Fix[TRUE,_10,_22]])
                  [2.0] x2770 = VecApply(x2769,0)
                  [20.0] x2772 = FixDiv(b550,Const(10))
                  [20.2] x3103 = FixSLA(x2772,Const(1))
                  [21.2] x3104 = FixAdd(x3103,x2772)
                  [22.2] x2774 = FixAdd(x3104,b2767)
                  [24.2] x2775 = SRAMBankedRead(x473,Vector(List(Const(3), Const(0))),Vector(x2774),Vector(Set(b2768, b560)),Vec[Fix[TRUE,_10,_22]])
                  [24.2] x2776 = VecApply(x2775,0)
                  [25.2] x2777 = FixAdd(x2770,x2776)
                  [26.2] x2778 = SRAMBankedWrite(x544,Vector(x2777),Vector(List(Const(3), Const(0))),Vector(x2774),Vector(Set(b2768, b560)))
              x2792 = UnrolledForeach(Set(b561),x2722,Block(Const(())),List(List(b2780)),List(List(b2781)),None)
                Working on pipeLatencies of result Vector(Const(()), x2782, x2788, x2791), schedule Vector(x2782, x2783, x2785, x3105, x3106, x2787, x2788, x2789, x2790, x2791)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x2782 = SRAMBankedRead(x576,Vector(List(Const(0))),Vector(b2780),Vector(Set(b2781, b561)),Vec[Fix[TRUE,_10,_22]])
                  x2783 = VecApply(x2782,0)
                  x2785 = FixDiv(b551,Const(10))
                  x3105 = FixSLA(x2785,Const(1))
                  x3106 = FixAdd(x3105,x2785)
                  x2787 = FixAdd(x3106,b2780)
                  x2788 = SRAMBankedRead(x473,Vector(List(Const(4), Const(0))),Vector(x2787),Vector(Set(b2781, b561)),Vec[Fix[TRUE,_10,_22]])
                  x2789 = VecApply(x2788,0)
                  x2790 = FixAdd(x2783,x2789)
                  x2791 = SRAMBankedWrite(x544,Vector(x2790),Vector(List(Const(4), Const(0))),Vector(x2787),Vector(Set(b2781, b561)))
                Computing fullDFS: Const(())
                Computing fullDFS: x2782
                cur: x2782, inReduce: false, latency: 2.0
                [2.0 = max(0) + 2.0] x2782 = SRAMBankedRead(x576,Vector(List(Const(0))),Vector(b2780),Vector(Set(b2781, b561)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2788
                Computing fullDFS: x2787
                Computing fullDFS: x3106
                Computing fullDFS: x2785
                cur: x2785, inReduce: false, latency: 20.0
                [20.0 = max(0) + 20.0] x2785 = FixDiv(b551,Const(10))
                Computing fullDFS: x3105
                [20.2 = max(20.0) + 0.2] x3105 = FixSLA(x2785,Const(1))
                [21.2 = max(20.0, 20.2) + 1.0] x3106 = FixAdd(x3105,x2785)
                [22.2 = max(21.2) + 1.0] x2787 = FixAdd(x3106,b2780)
                [24.2 = max(22.2) + 2.0] x2788 = SRAMBankedRead(x473,Vector(List(Const(4), Const(0))),Vector(x2787),Vector(Set(b2781, b561)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2791
                Computing fullDFS: x2790
                Computing fullDFS: x2783
                [2.0 = max(2.0) + 0.0] x2783 = VecApply(x2782,0)
                Computing fullDFS: x2789
                [24.2 = max(24.2) + 0.0] x2789 = VecApply(x2788,0)
                [25.2 = max(2.0, 24.2) + 1.0] x2790 = FixAdd(x2783,x2789)
                [26.2 = max(22.2, 25.2) + 1.0] x2791 = SRAMBankedWrite(x544,Vector(x2790),Vector(List(Const(4), Const(0))),Vector(x2787),Vector(Set(b2781, b561)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [2.0] x2782 = SRAMBankedRead(x576,Vector(List(Const(0))),Vector(b2780),Vector(Set(b2781, b561)),Vec[Fix[TRUE,_10,_22]])
                  [2.0] x2783 = VecApply(x2782,0)
                  [20.0] x2785 = FixDiv(b551,Const(10))
                  [20.2] x3105 = FixSLA(x2785,Const(1))
                  [21.2] x3106 = FixAdd(x3105,x2785)
                  [22.2] x2787 = FixAdd(x3106,b2780)
                  [24.2] x2788 = SRAMBankedRead(x473,Vector(List(Const(4), Const(0))),Vector(x2787),Vector(Set(b2781, b561)),Vec[Fix[TRUE,_10,_22]])
                  [24.2] x2789 = VecApply(x2788,0)
                  [25.2] x2790 = FixAdd(x2783,x2789)
                  [26.2] x2791 = SRAMBankedWrite(x544,Vector(x2790),Vector(List(Const(4), Const(0))),Vector(x2787),Vector(Set(b2781, b561)))
              x2805 = UnrolledForeach(Set(b562),x2723,Block(Const(())),List(List(b2793)),List(List(b2794)),None)
                Working on pipeLatencies of result Vector(Const(()), x2795, x2801, x2804), schedule Vector(x2795, x2796, x2798, x3107, x3108, x2800, x2801, x2802, x2803, x2804)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x2795 = SRAMBankedRead(x578,Vector(List(Const(0))),Vector(b2793),Vector(Set(b2794, b562)),Vec[Fix[TRUE,_10,_22]])
                  x2796 = VecApply(x2795,0)
                  x2798 = FixDiv(b552,Const(10))
                  x3107 = FixSLA(x2798,Const(1))
                  x3108 = FixAdd(x3107,x2798)
                  x2800 = FixAdd(x3108,b2793)
                  x2801 = SRAMBankedRead(x473,Vector(List(Const(5), Const(0))),Vector(x2800),Vector(Set(b2794, b562)),Vec[Fix[TRUE,_10,_22]])
                  x2802 = VecApply(x2801,0)
                  x2803 = FixAdd(x2796,x2802)
                  x2804 = SRAMBankedWrite(x544,Vector(x2803),Vector(List(Const(5), Const(0))),Vector(x2800),Vector(Set(b2794, b562)))
                Computing fullDFS: Const(())
                Computing fullDFS: x2795
                cur: x2795, inReduce: false, latency: 2.0
                [2.0 = max(0) + 2.0] x2795 = SRAMBankedRead(x578,Vector(List(Const(0))),Vector(b2793),Vector(Set(b2794, b562)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2801
                Computing fullDFS: x2800
                Computing fullDFS: x3108
                Computing fullDFS: x2798
                cur: x2798, inReduce: false, latency: 20.0
                [20.0 = max(0) + 20.0] x2798 = FixDiv(b552,Const(10))
                Computing fullDFS: x3107
                [20.2 = max(20.0) + 0.2] x3107 = FixSLA(x2798,Const(1))
                [21.2 = max(20.0, 20.2) + 1.0] x3108 = FixAdd(x3107,x2798)
                [22.2 = max(21.2) + 1.0] x2800 = FixAdd(x3108,b2793)
                [24.2 = max(22.2) + 2.0] x2801 = SRAMBankedRead(x473,Vector(List(Const(5), Const(0))),Vector(x2800),Vector(Set(b2794, b562)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2804
                Computing fullDFS: x2803
                Computing fullDFS: x2796
                [2.0 = max(2.0) + 0.0] x2796 = VecApply(x2795,0)
                Computing fullDFS: x2802
                [24.2 = max(24.2) + 0.0] x2802 = VecApply(x2801,0)
                [25.2 = max(2.0, 24.2) + 1.0] x2803 = FixAdd(x2796,x2802)
                [26.2 = max(22.2, 25.2) + 1.0] x2804 = SRAMBankedWrite(x544,Vector(x2803),Vector(List(Const(5), Const(0))),Vector(x2800),Vector(Set(b2794, b562)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [2.0] x2795 = SRAMBankedRead(x578,Vector(List(Const(0))),Vector(b2793),Vector(Set(b2794, b562)),Vec[Fix[TRUE,_10,_22]])
                  [2.0] x2796 = VecApply(x2795,0)
                  [20.0] x2798 = FixDiv(b552,Const(10))
                  [20.2] x3107 = FixSLA(x2798,Const(1))
                  [21.2] x3108 = FixAdd(x3107,x2798)
                  [22.2] x2800 = FixAdd(x3108,b2793)
                  [24.2] x2801 = SRAMBankedRead(x473,Vector(List(Const(5), Const(0))),Vector(x2800),Vector(Set(b2794, b562)),Vec[Fix[TRUE,_10,_22]])
                  [24.2] x2802 = VecApply(x2801,0)
                  [25.2] x2803 = FixAdd(x2796,x2802)
                  [26.2] x2804 = SRAMBankedWrite(x544,Vector(x2803),Vector(List(Const(5), Const(0))),Vector(x2800),Vector(Set(b2794, b562)))
              x2818 = UnrolledForeach(Set(b563),x2724,Block(Const(())),List(List(b2806)),List(List(b2807)),None)
                Working on pipeLatencies of result Vector(Const(()), x2808, x2814, x2817), schedule Vector(x2808, x2809, x2811, x3109, x3110, x2813, x2814, x2815, x2816, x2817)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x2808 = SRAMBankedRead(x580,Vector(List(Const(0))),Vector(b2806),Vector(Set(b2807, b563)),Vec[Fix[TRUE,_10,_22]])
                  x2809 = VecApply(x2808,0)
                  x2811 = FixDiv(b553,Const(10))
                  x3109 = FixSLA(x2811,Const(1))
                  x3110 = FixAdd(x3109,x2811)
                  x2813 = FixAdd(x3110,b2806)
                  x2814 = SRAMBankedRead(x473,Vector(List(Const(6), Const(0))),Vector(x2813),Vector(Set(b2807, b563)),Vec[Fix[TRUE,_10,_22]])
                  x2815 = VecApply(x2814,0)
                  x2816 = FixAdd(x2809,x2815)
                  x2817 = SRAMBankedWrite(x544,Vector(x2816),Vector(List(Const(6), Const(0))),Vector(x2813),Vector(Set(b2807, b563)))
                Computing fullDFS: Const(())
                Computing fullDFS: x2808
                cur: x2808, inReduce: false, latency: 2.0
                [2.0 = max(0) + 2.0] x2808 = SRAMBankedRead(x580,Vector(List(Const(0))),Vector(b2806),Vector(Set(b2807, b563)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2814
                Computing fullDFS: x2813
                Computing fullDFS: x3110
                Computing fullDFS: x2811
                cur: x2811, inReduce: false, latency: 20.0
                [20.0 = max(0) + 20.0] x2811 = FixDiv(b553,Const(10))
                Computing fullDFS: x3109
                [20.2 = max(20.0) + 0.2] x3109 = FixSLA(x2811,Const(1))
                [21.2 = max(20.0, 20.2) + 1.0] x3110 = FixAdd(x3109,x2811)
                [22.2 = max(21.2) + 1.0] x2813 = FixAdd(x3110,b2806)
                [24.2 = max(22.2) + 2.0] x2814 = SRAMBankedRead(x473,Vector(List(Const(6), Const(0))),Vector(x2813),Vector(Set(b2807, b563)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2817
                Computing fullDFS: x2816
                Computing fullDFS: x2809
                [2.0 = max(2.0) + 0.0] x2809 = VecApply(x2808,0)
                Computing fullDFS: x2815
                [24.2 = max(24.2) + 0.0] x2815 = VecApply(x2814,0)
                [25.2 = max(2.0, 24.2) + 1.0] x2816 = FixAdd(x2809,x2815)
                [26.2 = max(22.2, 25.2) + 1.0] x2817 = SRAMBankedWrite(x544,Vector(x2816),Vector(List(Const(6), Const(0))),Vector(x2813),Vector(Set(b2807, b563)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [2.0] x2808 = SRAMBankedRead(x580,Vector(List(Const(0))),Vector(b2806),Vector(Set(b2807, b563)),Vec[Fix[TRUE,_10,_22]])
                  [2.0] x2809 = VecApply(x2808,0)
                  [20.0] x2811 = FixDiv(b553,Const(10))
                  [20.2] x3109 = FixSLA(x2811,Const(1))
                  [21.2] x3110 = FixAdd(x3109,x2811)
                  [22.2] x2813 = FixAdd(x3110,b2806)
                  [24.2] x2814 = SRAMBankedRead(x473,Vector(List(Const(6), Const(0))),Vector(x2813),Vector(Set(b2807, b563)),Vec[Fix[TRUE,_10,_22]])
                  [24.2] x2815 = VecApply(x2814,0)
                  [25.2] x2816 = FixAdd(x2809,x2815)
                  [26.2] x2817 = SRAMBankedWrite(x544,Vector(x2816),Vector(List(Const(6), Const(0))),Vector(x2813),Vector(Set(b2807, b563)))
              x2831 = UnrolledForeach(Set(b564),x2725,Block(Const(())),List(List(b2819)),List(List(b2820)),None)
                Working on pipeLatencies of result Vector(Const(()), x2821, x2827, x2830), schedule Vector(x2821, x2822, x2824, x3111, x3112, x2826, x2827, x2828, x2829, x2830)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x2821 = SRAMBankedRead(x582,Vector(List(Const(0))),Vector(b2819),Vector(Set(b2820, b564)),Vec[Fix[TRUE,_10,_22]])
                  x2822 = VecApply(x2821,0)
                  x2824 = FixDiv(b554,Const(10))
                  x3111 = FixSLA(x2824,Const(1))
                  x3112 = FixAdd(x3111,x2824)
                  x2826 = FixAdd(x3112,b2819)
                  x2827 = SRAMBankedRead(x473,Vector(List(Const(7), Const(0))),Vector(x2826),Vector(Set(b2820, b564)),Vec[Fix[TRUE,_10,_22]])
                  x2828 = VecApply(x2827,0)
                  x2829 = FixAdd(x2822,x2828)
                  x2830 = SRAMBankedWrite(x544,Vector(x2829),Vector(List(Const(7), Const(0))),Vector(x2826),Vector(Set(b2820, b564)))
                Computing fullDFS: Const(())
                Computing fullDFS: x2821
                cur: x2821, inReduce: false, latency: 2.0
                [2.0 = max(0) + 2.0] x2821 = SRAMBankedRead(x582,Vector(List(Const(0))),Vector(b2819),Vector(Set(b2820, b564)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2827
                Computing fullDFS: x2826
                Computing fullDFS: x3112
                Computing fullDFS: x2824
                cur: x2824, inReduce: false, latency: 20.0
                [20.0 = max(0) + 20.0] x2824 = FixDiv(b554,Const(10))
                Computing fullDFS: x3111
                [20.2 = max(20.0) + 0.2] x3111 = FixSLA(x2824,Const(1))
                [21.2 = max(20.0, 20.2) + 1.0] x3112 = FixAdd(x3111,x2824)
                [22.2 = max(21.2) + 1.0] x2826 = FixAdd(x3112,b2819)
                [24.2 = max(22.2) + 2.0] x2827 = SRAMBankedRead(x473,Vector(List(Const(7), Const(0))),Vector(x2826),Vector(Set(b2820, b564)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2830
                Computing fullDFS: x2829
                Computing fullDFS: x2822
                [2.0 = max(2.0) + 0.0] x2822 = VecApply(x2821,0)
                Computing fullDFS: x2828
                [24.2 = max(24.2) + 0.0] x2828 = VecApply(x2827,0)
                [25.2 = max(2.0, 24.2) + 1.0] x2829 = FixAdd(x2822,x2828)
                [26.2 = max(22.2, 25.2) + 1.0] x2830 = SRAMBankedWrite(x544,Vector(x2829),Vector(List(Const(7), Const(0))),Vector(x2826),Vector(Set(b2820, b564)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [2.0] x2821 = SRAMBankedRead(x582,Vector(List(Const(0))),Vector(b2819),Vector(Set(b2820, b564)),Vec[Fix[TRUE,_10,_22]])
                  [2.0] x2822 = VecApply(x2821,0)
                  [20.0] x2824 = FixDiv(b554,Const(10))
                  [20.2] x3111 = FixSLA(x2824,Const(1))
                  [21.2] x3112 = FixAdd(x3111,x2824)
                  [22.2] x2826 = FixAdd(x3112,b2819)
                  [24.2] x2827 = SRAMBankedRead(x473,Vector(List(Const(7), Const(0))),Vector(x2826),Vector(Set(b2820, b564)),Vec[Fix[TRUE,_10,_22]])
                  [24.2] x2828 = VecApply(x2827,0)
                  [25.2] x2829 = FixAdd(x2822,x2828)
                  [26.2] x2830 = SRAMBankedWrite(x544,Vector(x2829),Vector(List(Const(7), Const(0))),Vector(x2826),Vector(Set(b2820, b564)))
              x2844 = UnrolledForeach(Set(b565),x2726,Block(Const(())),List(List(b2832)),List(List(b2833)),None)
                Working on pipeLatencies of result Vector(Const(()), x2834, x2840, x2843), schedule Vector(x2834, x2835, x2837, x3113, x3114, x2839, x2840, x2841, x2842, x2843)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x2834 = SRAMBankedRead(x584,Vector(List(Const(0))),Vector(b2832),Vector(Set(b2833, b565)),Vec[Fix[TRUE,_10,_22]])
                  x2835 = VecApply(x2834,0)
                  x2837 = FixDiv(b555,Const(10))
                  x3113 = FixSLA(x2837,Const(1))
                  x3114 = FixAdd(x3113,x2837)
                  x2839 = FixAdd(x3114,b2832)
                  x2840 = SRAMBankedRead(x473,Vector(List(Const(8), Const(0))),Vector(x2839),Vector(Set(b2833, b565)),Vec[Fix[TRUE,_10,_22]])
                  x2841 = VecApply(x2840,0)
                  x2842 = FixAdd(x2835,x2841)
                  x2843 = SRAMBankedWrite(x544,Vector(x2842),Vector(List(Const(8), Const(0))),Vector(x2839),Vector(Set(b2833, b565)))
                Computing fullDFS: Const(())
                Computing fullDFS: x2834
                cur: x2834, inReduce: false, latency: 2.0
                [2.0 = max(0) + 2.0] x2834 = SRAMBankedRead(x584,Vector(List(Const(0))),Vector(b2832),Vector(Set(b2833, b565)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2840
                Computing fullDFS: x2839
                Computing fullDFS: x3114
                Computing fullDFS: x2837
                cur: x2837, inReduce: false, latency: 20.0
                [20.0 = max(0) + 20.0] x2837 = FixDiv(b555,Const(10))
                Computing fullDFS: x3113
                [20.2 = max(20.0) + 0.2] x3113 = FixSLA(x2837,Const(1))
                [21.2 = max(20.0, 20.2) + 1.0] x3114 = FixAdd(x3113,x2837)
                [22.2 = max(21.2) + 1.0] x2839 = FixAdd(x3114,b2832)
                [24.2 = max(22.2) + 2.0] x2840 = SRAMBankedRead(x473,Vector(List(Const(8), Const(0))),Vector(x2839),Vector(Set(b2833, b565)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2843
                Computing fullDFS: x2842
                Computing fullDFS: x2835
                [2.0 = max(2.0) + 0.0] x2835 = VecApply(x2834,0)
                Computing fullDFS: x2841
                [24.2 = max(24.2) + 0.0] x2841 = VecApply(x2840,0)
                [25.2 = max(2.0, 24.2) + 1.0] x2842 = FixAdd(x2835,x2841)
                [26.2 = max(22.2, 25.2) + 1.0] x2843 = SRAMBankedWrite(x544,Vector(x2842),Vector(List(Const(8), Const(0))),Vector(x2839),Vector(Set(b2833, b565)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [2.0] x2834 = SRAMBankedRead(x584,Vector(List(Const(0))),Vector(b2832),Vector(Set(b2833, b565)),Vec[Fix[TRUE,_10,_22]])
                  [2.0] x2835 = VecApply(x2834,0)
                  [20.0] x2837 = FixDiv(b555,Const(10))
                  [20.2] x3113 = FixSLA(x2837,Const(1))
                  [21.2] x3114 = FixAdd(x3113,x2837)
                  [22.2] x2839 = FixAdd(x3114,b2832)
                  [24.2] x2840 = SRAMBankedRead(x473,Vector(List(Const(8), Const(0))),Vector(x2839),Vector(Set(b2833, b565)),Vec[Fix[TRUE,_10,_22]])
                  [24.2] x2841 = VecApply(x2840,0)
                  [25.2] x2842 = FixAdd(x2835,x2841)
                  [26.2] x2843 = SRAMBankedWrite(x544,Vector(x2842),Vector(List(Const(8), Const(0))),Vector(x2839),Vector(Set(b2833, b565)))
              x2857 = UnrolledForeach(Set(b566),x2727,Block(Const(())),List(List(b2845)),List(List(b2846)),None)
                Working on pipeLatencies of result Vector(Const(()), x2847, x2853, x2856), schedule Vector(x2847, x2848, x2850, x3115, x3116, x2852, x2853, x2854, x2855, x2856)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x2847 = SRAMBankedRead(x586,Vector(List(Const(0))),Vector(b2845),Vector(Set(b2846, b566)),Vec[Fix[TRUE,_10,_22]])
                  x2848 = VecApply(x2847,0)
                  x2850 = FixDiv(b556,Const(10))
                  x3115 = FixSLA(x2850,Const(1))
                  x3116 = FixAdd(x3115,x2850)
                  x2852 = FixAdd(x3116,b2845)
                  x2853 = SRAMBankedRead(x473,Vector(List(Const(9), Const(0))),Vector(x2852),Vector(Set(b2846, b566)),Vec[Fix[TRUE,_10,_22]])
                  x2854 = VecApply(x2853,0)
                  x2855 = FixAdd(x2848,x2854)
                  x2856 = SRAMBankedWrite(x544,Vector(x2855),Vector(List(Const(9), Const(0))),Vector(x2852),Vector(Set(b2846, b566)))
                Computing fullDFS: Const(())
                Computing fullDFS: x2847
                cur: x2847, inReduce: false, latency: 2.0
                [2.0 = max(0) + 2.0] x2847 = SRAMBankedRead(x586,Vector(List(Const(0))),Vector(b2845),Vector(Set(b2846, b566)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2853
                Computing fullDFS: x2852
                Computing fullDFS: x3116
                Computing fullDFS: x2850
                cur: x2850, inReduce: false, latency: 20.0
                [20.0 = max(0) + 20.0] x2850 = FixDiv(b556,Const(10))
                Computing fullDFS: x3115
                [20.2 = max(20.0) + 0.2] x3115 = FixSLA(x2850,Const(1))
                [21.2 = max(20.0, 20.2) + 1.0] x3116 = FixAdd(x3115,x2850)
                [22.2 = max(21.2) + 1.0] x2852 = FixAdd(x3116,b2845)
                [24.2 = max(22.2) + 2.0] x2853 = SRAMBankedRead(x473,Vector(List(Const(9), Const(0))),Vector(x2852),Vector(Set(b2846, b566)),Vec[Fix[TRUE,_10,_22]])
                Computing fullDFS: x2856
                Computing fullDFS: x2855
                Computing fullDFS: x2848
                [2.0 = max(2.0) + 0.0] x2848 = VecApply(x2847,0)
                Computing fullDFS: x2854
                [24.2 = max(24.2) + 0.0] x2854 = VecApply(x2853,0)
                [25.2 = max(2.0, 24.2) + 1.0] x2855 = FixAdd(x2848,x2854)
                [26.2 = max(22.2, 25.2) + 1.0] x2856 = SRAMBankedWrite(x544,Vector(x2855),Vector(List(Const(9), Const(0))),Vector(x2852),Vector(Set(b2846, b566)))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [2.0] x2847 = SRAMBankedRead(x586,Vector(List(Const(0))),Vector(b2845),Vector(Set(b2846, b566)),Vec[Fix[TRUE,_10,_22]])
                  [2.0] x2848 = VecApply(x2847,0)
                  [20.0] x2850 = FixDiv(b556,Const(10))
                  [20.2] x3115 = FixSLA(x2850,Const(1))
                  [21.2] x3116 = FixAdd(x3115,x2850)
                  [22.2] x2852 = FixAdd(x3116,b2845)
                  [24.2] x2853 = SRAMBankedRead(x473,Vector(List(Const(9), Const(0))),Vector(x2852),Vector(Set(b2846, b566)),Vec[Fix[TRUE,_10,_22]])
                  [24.2] x2854 = VecApply(x2853,0)
                  [25.2] x2855 = FixAdd(x2848,x2854)
                  [26.2] x2856 = SRAMBankedWrite(x544,Vector(x2855),Vector(List(Const(9), Const(0))),Vector(x2852),Vector(Set(b2846, b566)))
      x2916 = UnitPipe(Set(),Block(Const(())),None)
          x2915 = UnrolledForeach(Set(),x2864,Block(Const(())),List(List(b2865)),List(List(b2866)),None)
              x2910 = UnitPipe(Set(b2866),Block(Const(())),None)
                  x2889 = UnitPipe(Set(),Block(Const(())),None)
                    Working on pipeLatencies of result Vector(Const(()), x2886, x2884, x2888, x2885, x2881, x2887), schedule Vector(x3117, x3118, x2871, x2872, x3119, x2874, x2875, x2876, x2877, x2878, x3120, x2880, x2881, x2882, x2883, x2884, x2885, x2886, x2887, x2888)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x3117 = FixSLA(b2865,Const(1))
                      x3118 = FixAdd(x3117,b2865)
                      x2871 = FixDivSRA(x3118,Const(4))
                      x2872 = FixSLA(x2871,Const(4))
                      x3119 = FixSLA(x2871,Const(6))
                      x2874 = FixSub(x3118,x2872)
                      x2875 = FixAdd(x2874,Const(3))
                      x2876 = FixAdd(x2874,Const(18))
                      x2877 = FixDivSRA(x2876,Const(4))
                      x2878 = FixSLA(x2877,Const(4))
                      x3120 = FixSLA(x2877,Const(6))
                      x2880 = FixToFix(x3119,TRUE,_64,_0)
                      x2881 = DRAMAddress(x470)
                      x2882 = FixAdd(x2880,x2881)
                      x2883 = SimpleStruct(ArrayBuffer((offset,x2882), (size,x3120), (isLoad,Const(false))))
                      x2884 = DRAMIsAlloc(x470)
                      x2885 = StreamOutBankedWrite(x2860,ArrayBuffer(x2883),ArrayBuffer(Set(x2884)))
                      x2886 = RegWrite(x2867,x2874,Set())
                      x2887 = RegWrite(x2868,x2875,Set())
                      x2888 = RegWrite(x2869,x2878,Set())
                    Computing fullDFS: Const(())
                    Computing fullDFS: x2886
                    Computing fullDFS: x2874
                    Computing fullDFS: x3118
                    Computing fullDFS: x3117
                    cur: x3117, inReduce: false, latency: 0.2
                    [0.2 = max(0) + 0.2] x3117 = FixSLA(b2865,Const(1))
                    [1.2 = max(0.2) + 1.0] x3118 = FixAdd(x3117,b2865)
                    Computing fullDFS: x2872
                    Computing fullDFS: x2871
                    [1.4 = max(1.2) + 0.2] x2871 = FixDivSRA(x3118,Const(4))
                    [1.5999999999999999 = max(1.4) + 0.2] x2872 = FixSLA(x2871,Const(4))
                    [2.6 = max(1.2, 1.6) + 1.0] x2874 = FixSub(x3118,x2872)
                    [3.6 = max(2.6) + 1.0] x2886 = RegWrite(x2867,x2874,Set())
                    Computing fullDFS: x2884
                    cur: x2884, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2884 = DRAMIsAlloc(x470)
                    Computing fullDFS: x2888
                    Computing fullDFS: x2878
                    Computing fullDFS: x2877
                    Computing fullDFS: x2876
                    [3.6 = max(2.6) + 1.0] x2876 = FixAdd(x2874,Const(18))
                    [3.8000000000000003 = max(3.6) + 0.2] x2877 = FixDivSRA(x2876,Const(4))
                    [4.0 = max(3.8) + 0.2] x2878 = FixSLA(x2877,Const(4))
                    [5.0 = max(4.0) + 1.0] x2888 = RegWrite(x2869,x2878,Set())
                    Computing fullDFS: x2885
                    Computing fullDFS: x2883
                    Computing fullDFS: x3120
                    [4.0 = max(3.8) + 0.2] x3120 = FixSLA(x2877,Const(6))
                    Computing fullDFS: x2882
                    Computing fullDFS: x2880
                    Computing fullDFS: x3119
                    [1.5999999999999999 = max(1.4) + 0.2] x3119 = FixSLA(x2871,Const(6))
                    [1.6 = max(1.6) + 0.0] x2880 = FixToFix(x3119,TRUE,_64,_0)
                    Computing fullDFS: x2881
                    cur: x2881, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2881 = DRAMAddress(x470)
                    [3.6 = max(1.6, 0.0) + 2.0] x2882 = FixAdd(x2880,x2881)
                    [4.0 = max(4.0, 3.6) + 0.0] x2883 = SimpleStruct(ArrayBuffer((offset,x2882), (size,x3120), (isLoad,Const(false))))
                    [4.0 = max(4.0, 0.0) + 0.0] x2885 = StreamOutBankedWrite(x2860,ArrayBuffer(x2883),ArrayBuffer(Set(x2884)))
                    Computing fullDFS: x2887
                    Computing fullDFS: x2875
                    [3.6 = max(2.6) + 1.0] x2875 = FixAdd(x2874,Const(3))
                    [4.6 = max(3.6) + 1.0] x2887 = RegWrite(x2868,x2875,Set())
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x2881 = DRAMAddress(x470)
                      [0.0] x2884 = DRAMIsAlloc(x470)
                      [0.2] x3117 = FixSLA(b2865,Const(1))
                      [1.2] x3118 = FixAdd(x3117,b2865)
                      [1.4] x2871 = FixDivSRA(x3118,Const(4))
                      [1.6] x2872 = FixSLA(x2871,Const(4))
                      [1.6] x3119 = FixSLA(x2871,Const(6))
                      [1.6] x2880 = FixToFix(x3119,TRUE,_64,_0)
                      [2.6] x2874 = FixSub(x3118,x2872)
                      [3.6] x2875 = FixAdd(x2874,Const(3))
                      [3.6] x2876 = FixAdd(x2874,Const(18))
                      [3.6] x2882 = FixAdd(x2880,x2881)
                      [3.6] x2886 = RegWrite(x2867,x2874,Set())
                      [3.8] x2877 = FixDivSRA(x2876,Const(4))
                      [4.0] x2878 = FixSLA(x2877,Const(4))
                      [4.0] x3120 = FixSLA(x2877,Const(6))
                      [4.0] x2883 = SimpleStruct(ArrayBuffer((offset,x2882), (size,x3120), (isLoad,Const(false))))
                      [4.0] x2885 = StreamOutBankedWrite(x2860,ArrayBuffer(x2883),ArrayBuffer(Set(x2884)))
                      [4.6] x2887 = RegWrite(x2868,x2875,Set())
                      [5.0] x2888 = RegWrite(x2869,x2878,Set())
                  x2909 = UnrolledForeach(Set(),x2892,Block(Const(())),List(List(b2893)),List(List(b2894)),None)
                    Working on pipeLatencies of result Vector(Const(()), x2908, x2897, x2905, x2895), schedule Vector(x2895, x2896, x2897, x2898, x2899, x2900, x2901, x2902, x3121, x3122, x2904, x2905, x2906, x2907, x2908)
                    Memories with both reads and writes in this scope: Set()
                    Done finding cycles: Vector(), Map()
                    ----------------------------------
                    Computing pipeLatencies for scope:
                      x2895 = RegRead(x2867)
                      x2896 = FixLeq(x2895,b2893)
                      x2897 = RegRead(x2868)
                      x2898 = FixLst(b2893,x2897)
                      x2899 = And(x2896,x2898)
                      x2900 = FixSub(b2893,x2895)
                      x2901 = FixMod(b2865,Const(10))
                      x2902 = FixDiv(b2865,Const(10))
                      x3121 = FixSLA(x2902,Const(1))
                      x3122 = FixAdd(x3121,x2902)
                      x2904 = FixAdd(x3122,x2900)
                      x2905 = SRAMBankedRead(x544,Vector(List(x2901, Const(0))),Vector(x2904),Vector(Set(x2899, b2894)),Vec[Fix[TRUE,_10,_22]])
                      x2906 = VecApply(x2905,0)
                      x2907 = SimpleStruct(ArrayBuffer((_1,x2906), (_2,x2899)))
                      x2908 = StreamOutBankedWrite(x2861,ArrayBuffer(x2907),ArrayBuffer(Set(b2894)))
                    Computing fullDFS: Const(())
                    Computing fullDFS: x2908
                    Computing fullDFS: x2907
                    Computing fullDFS: x2899
                    Computing fullDFS: x2896
                    Computing fullDFS: x2895
                    cur: x2895, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2895 = RegRead(x2867)
                    [0.4 = max(0.0) + 0.4] x2896 = FixLeq(x2895,b2893)
                    Computing fullDFS: x2898
                    Computing fullDFS: x2897
                    cur: x2897, inReduce: false, latency: 0.0
                    [0.0 = max(0) + 0.0] x2897 = RegRead(x2868)
                    [0.4 = max(0.0) + 0.4] x2898 = FixLst(b2893,x2897)
                    [0.6000000000000001 = max(0.4, 0.4) + 0.2] x2899 = And(x2896,x2898)
                    Computing fullDFS: x2906
                    Computing fullDFS: x2905
                    Computing fullDFS: x2901
                    cur: x2901, inReduce: false, latency: 16.0
                    [16.0 = max(0) + 16.0] x2901 = FixMod(b2865,Const(10))
                    Computing fullDFS: x2904
                    Computing fullDFS: x2900
                    [1.0 = max(0.0) + 1.0] x2900 = FixSub(b2893,x2895)
                    Computing fullDFS: x3122
                    Computing fullDFS: x2902
                    cur: x2902, inReduce: false, latency: 20.0
                    [20.0 = max(0) + 20.0] x2902 = FixDiv(b2865,Const(10))
                    Computing fullDFS: x3121
                    [20.2 = max(20.0) + 0.2] x3121 = FixSLA(x2902,Const(1))
                    [21.2 = max(20.0, 20.2) + 1.0] x3122 = FixAdd(x3121,x2902)
                    [22.2 = max(1.0, 21.2) + 1.0] x2904 = FixAdd(x3122,x2900)
                    [24.2 = max(0.6, 16.0, 22.2) + 2.0] x2905 = SRAMBankedRead(x544,Vector(List(x2901, Const(0))),Vector(x2904),Vector(Set(x2899, b2894)),Vec[Fix[TRUE,_10,_22]])
                    [24.2 = max(24.2) + 0.0] x2906 = VecApply(x2905,0)
                    [24.2 = max(0.6, 24.2) + 0.0] x2907 = SimpleStruct(ArrayBuffer((_1,x2906), (_2,x2899)))
                    [24.2 = max(24.2) + 0.0] x2908 = StreamOutBankedWrite(x2861,ArrayBuffer(x2907),ArrayBuffer(Set(b2894)))
                    Cycles: Map()
                      Schedule after pipeLatencies calculation:
                      [0.0] x2895 = RegRead(x2867)
                      [0.0] x2897 = RegRead(x2868)
                      [0.4] x2896 = FixLeq(x2895,b2893)
                      [0.4] x2898 = FixLst(b2893,x2897)
                      [0.6] x2899 = And(x2896,x2898)
                      [1.0] x2900 = FixSub(b2893,x2895)
                      [16.0] x2901 = FixMod(b2865,Const(10))
                      [20.0] x2902 = FixDiv(b2865,Const(10))
                      [20.2] x3121 = FixSLA(x2902,Const(1))
                      [21.2] x3122 = FixAdd(x3121,x2902)
                      [22.2] x2904 = FixAdd(x3122,x2900)
                      [24.2] x2905 = SRAMBankedRead(x544,Vector(List(x2901, Const(0))),Vector(x2904),Vector(Set(x2899, b2894)),Vec[Fix[TRUE,_10,_22]])
                      [24.2] x2906 = VecApply(x2905,0)
                      [24.2] x2907 = SimpleStruct(ArrayBuffer((_1,x2906), (_2,x2899)))
                      [24.2] x2908 = StreamOutBankedWrite(x2861,ArrayBuffer(x2907),ArrayBuffer(Set(b2894)))
              x2914 = UnitPipe(Set(b2866),Block(Const(())),None)
                Working on pipeLatencies of result Vector(Const(()), x2912), schedule Vector(x2912)
                Memories with both reads and writes in this scope: Set()
                Done finding cycles: Vector(), Map()
                ----------------------------------
                Computing pipeLatencies for scope:
                  x2912 = StreamInBankedRead(x2862,ArrayBuffer(Set()))
                Computing fullDFS: Const(())
                Computing fullDFS: x2912
                cur: x2912, inReduce: false, latency: 1.0
                [1.0 = max(0) + 1.0] x2912 = StreamInBankedRead(x2862,ArrayBuffer(Set()))
                Cycles: Map()
                  Schedule after pipeLatencies calculation:
                  [1.0] x2912 = StreamInBankedRead(x2862,ArrayBuffer(Set()))
  x2923 = WriteTokens(x2919,Const(","),x2920,Block((b95) => x2922))
