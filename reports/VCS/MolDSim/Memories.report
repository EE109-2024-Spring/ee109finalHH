---------------------------
Estimated Total Memories: 
---------------------------
  Regs: 48.0
  Slices: 48.0
  RAM36: 164.0
---------------------------



---------------------------------------------------------------------
Name: tmp_3 (x2300)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2300 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2327 = SRAMBankedWrite(x2300,Vector(x2325),Vector(List(Const(0))),Vector(x3640),Vector(Set(x3639, x3641, x3638))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2458 = SRAMBankedWrite(x2300,Vector(x2456),Vector(List(Const(0))),Vector(x3672),Vector(Set(x3671, x3673, x3670))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x2451 = SRAMBankedRead(x2300,Vector(List(Const(0))),Vector(b2449),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2353: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2331: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2327: SRAMBankedWrite
  x2477: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2462: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2451: SRAMBankedRead
      x2458: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x2147)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x2147 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    4
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2172 = SRAMBankedWrite(x2147,Vector(x3072),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2190 = SRAMBankedRead(x2147,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
           - Mux Port #0: 
             x2219 = SRAMBankedRead(x2147,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2218)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2174: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2173: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2172: SRAMBankedWrite
  x2199: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2198: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2190: SRAMBankedRead
  x2231: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2219: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_1 (x582)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x582 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2287 = SRAMBankedWrite(x582,Vector(x3625),Vector(List(Const(0))),Vector(x3626),Vector(Set(x3627, x3628))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2821 = SRAMBankedRead(x582,Vector(List(Const(0))),Vector(b2819),Vector(Set(b2820, b564)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:35)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2707: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
      x2289: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2287: SRAMBankedWrite
  x2858: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2831: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2821: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x1552)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1552 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1610 = SRAMBankedWrite(x1552,Vector(x1607),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1636 = SRAMBankedRead(x1552,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1612: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1611: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1610: SRAMBankedWrite
  x1645: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1644: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1636: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x722
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x722 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x740 = RegWrite(x722,x738,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2929 = RegRead(x722) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x762 = RegRead(x722) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x743: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x742: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x740: RegWrite
  x775: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2929: RegRead
    x762: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x1682)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1682 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1723 = SRAMBankedWrite(x1682,Vector(x1722),Vector(List(Const(0))),Vector(x3470),Vector(Set(x3469, x3468, x3471))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1847 = SRAMBankedWrite(x1682,Vector(x1846),Vector(List(Const(0))),Vector(x3495),Vector(Set(x3492, x3493, x3494))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x1856 = SRAMBankedRead(x1682,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1729: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1728: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1723: SRAMBankedWrite
  x1853: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1852: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1847: SRAMBankedWrite
  x1873: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x1856: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2860
Type: StreamOut[BurstCmd]
Src:  ProjectTemplate.scala:54:16
Src:        out_host store out_sram
---------------------------------------------------------------------
Symbol:     x2860 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2885 = StreamOutBankedWrite(x2860,ArrayBuffer(x2883),ArrayBuffer(Set(x3823))) {}
             out_host store out_sram (ProjectTemplate.scala:54:16)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x2889: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x2885: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x506
Type: Reg[Fix[TRUE,_32,_0]]
Src:  ProjectTemplate.scala:21:14
Src:        A_sram load A_dram
---------------------------------------------------------------------
Symbol:     x506 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x513 = RegWrite(x506,x512,Set()) {}
             A_sram load A_dram (ProjectTemplate.scala:21:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x524 = RegRead(x506) {}
             A_sram load A_dram (ProjectTemplate.scala:21:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x542: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Sequenced]
  x516: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x513: RegWrite
  x541: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x524: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x476
Type: StreamIn[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:21:14
Src:        A_sram load A_dram
---------------------------------------------------------------------
Symbol:     x476 = StreamInNew(BurstDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x528 = StreamInBankedRead(x476,ArrayBuffer(Set(b521, b504))) {}
             A_sram load A_dram (ProjectTemplate.scala:21:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x541: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x528: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1138
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1138 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1156 = RegWrite(x1138,x1154,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2937 = RegRead(x1138) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x1178 = RegRead(x1138) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1159: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1158: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1156: RegWrite
  x1191: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2937: RegRead
    x1178: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_1 (x576)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x576 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1663 = SRAMBankedWrite(x576,Vector(x3445),Vector(List(Const(0))),Vector(x3443),Vector(Set(x3444, x3442))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2782 = SRAMBankedRead(x576,Vector(List(Const(0))),Vector(b2780),Vector(Set(b2781, b561)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:35)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2707: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
      x1665: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x1663: SRAMBankedWrite
  x2858: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2792: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2782: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x2096)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2096 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2141 = SRAMBankedWrite(x2096,Vector(x2138),Vector(List(Const(0))),Vector(x3591),Vector(Set(x3590, x3593, x3592))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2168 = SRAMBankedRead(x2096,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2265 = SRAMBankedWrite(x2096,Vector(x2262),Vector(List(Const(0))),Vector(x3615),Vector(Set(x3614, x3617, x3616))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2145: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2144: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2141: SRAMBankedWrite
  x2174: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2173: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2168: SRAMBankedRead
  x2269: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2268: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2265: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1140
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1140 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1157 = RegWrite(x1140,x1155,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2938 = RegRead(x1140) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1159: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1158: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1157: RegWrite
  x1191: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2938: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x2592)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x2592 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2650 = SRAMBankedWrite(x2592,Vector(x2647),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2676 = SRAMBankedRead(x2592,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2652: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2651: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2650: SRAMBankedWrite
  x2685: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2684: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2676: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x1261)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1261 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1290 = SRAMBankedWrite(x1261,Vector(x1285),Vector(List(Const(0))),Vector(x3334),Vector(Set(x3335, x3333, x3336))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1421 = SRAMBankedWrite(x1261,Vector(x1416),Vector(List(Const(0))),Vector(x3366),Vector(Set(x3367, x3365, x3368))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x1438 = SRAMBankedRead(x1261,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1313: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1291: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1290: SRAMBankedWrite
  x1437: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1422: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1421: SRAMBankedWrite
  x1457: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x1438: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x2304)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2304 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2348 = SRAMBankedWrite(x2304,Vector(x2346),Vector(List(Const(0))),Vector(x3653),Vector(Set(x3654, x3651, x3652))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2376 = SRAMBankedRead(x2304,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2472 = SRAMBankedWrite(x2304,Vector(x2470),Vector(List(Const(0))),Vector(x3676),Vector(Set(x3678, x3675, x3677))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2353: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2352: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2348: SRAMBankedWrite
  x2382: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2381: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2376: SRAMBankedRead
  x2477: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2476: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2472: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_0 (x579)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x579 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2079 = SRAMBankedWrite(x579,Vector(x3566),Vector(List(Const(0))),Vector(x3564),Vector(Set(x3567, x3565))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x2066 = SRAMBankedRead(x579,Vector(List(Const(0))),Vector(x3559),Vector(Set(x3557, x3558)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x2081: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x2066: SRAMBankedRead
  x2079: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x2510)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2510 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2557 = SRAMBankedWrite(x2510,Vector(x2554),Vector(List(Const(0))),Vector(x3712),Vector(Set(x3713, x3715, x3714))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2577 = SRAMBankedRead(x2510,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2681 = SRAMBankedWrite(x2510,Vector(x2678),Vector(List(Const(0))),Vector(x3736),Vector(Set(x3739, x3738, x3737))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2561: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2560: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2557: SRAMBankedWrite
  x2590: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2589: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2577: SRAMBankedRead
  x2685: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2684: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2681: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x2091)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2091 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2122 = SRAMBankedWrite(x2091,Vector(x2117),Vector(List(Const(0))),Vector(x3578),Vector(Set(x3577, x3579, x3580))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2155 = SRAMBankedRead(x2091,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2253 = SRAMBankedWrite(x2091,Vector(x2248),Vector(List(Const(0))),Vector(x3612),Vector(Set(x3609, x3610, x3611))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2145: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2123: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2122: SRAMBankedWrite
  x2174: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2160: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2155: SRAMBankedRead
  x2269: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2254: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2253: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x2089)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2089 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2120 = SRAMBankedWrite(x2089,Vector(x2117),Vector(List(Const(0))),Vector(x3578),Vector(Set(x3577, x3579, x3580))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2148 = SRAMBankedRead(x2089,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2251 = SRAMBankedWrite(x2089,Vector(x2248),Vector(List(Const(0))),Vector(x3612),Vector(Set(x3609, x3610, x3611))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2145: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2123: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2120: SRAMBankedWrite
  x2174: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2160: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2148: SRAMBankedRead
  x2269: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2254: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2251: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: out_sram_0 (x544)
Type: SRAM2[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:23:29
Src:        val out_sram = SRAM[T](N,3)
---------------------------------------------------------------------
Symbol:     x544 = SRAMNew(List(Const(100), Const(3)),SRAM2[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0
  Regs: 12.0
  Slices: 12.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0, 0)
     Accum:    None
     Banks:    10, 1 <Hierarchical>
       Dims {0}: Cyclic: N=10, B=1, alpha=<1>, P=<10> (176 solutions, 46 checks)
       Dims {1}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2843 = SRAMBankedWrite(x544,Vector(x2842),Vector(List(Const(8), Const(0))),Vector(x3813),Vector(Set(x3812, x3811))) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:28)
               Directly Banked: true
               Port: <offset: 8, castgroup: (8), broadcast: (0)>

             x2778 = SRAMBankedWrite(x544,Vector(x2777),Vector(List(Const(3), Const(0))),Vector(x3776),Vector(Set(x3777, x3778))) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:28)
               Directly Banked: true
               Port: <offset: 3, castgroup: (3), broadcast: (0)>

             x2739 = SRAMBankedWrite(x544,Vector(x2738),Vector(List(Const(0), Const(0))),Vector(x3757),Vector(Set(x3756, x3755))) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:28)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

             x2791 = SRAMBankedWrite(x544,Vector(x2790),Vector(List(Const(4), Const(0))),Vector(x3783),Vector(Set(x3785, x3784))) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:28)
               Directly Banked: true
               Port: <offset: 4, castgroup: (4), broadcast: (0)>

             x2856 = SRAMBankedWrite(x544,Vector(x2855),Vector(List(Const(9), Const(0))),Vector(x3818),Vector(Set(x3820, x3819))) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:28)
               Directly Banked: true
               Port: <offset: 9, castgroup: (9), broadcast: (0)>

             x2804 = SRAMBankedWrite(x544,Vector(x2803),Vector(List(Const(5), Const(0))),Vector(x3792),Vector(Set(x3790, x3791))) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:28)
               Directly Banked: true
               Port: <offset: 5, castgroup: (5), broadcast: (0)>

             x2765 = SRAMBankedWrite(x544,Vector(x2764),Vector(List(Const(2), Const(0))),Vector(x3771),Vector(Set(x3769, x3770))) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:28)
               Directly Banked: true
               Port: <offset: 2, castgroup: (2), broadcast: (0)>

             x2752 = SRAMBankedWrite(x544,Vector(x2751),Vector(List(Const(1), Const(0))),Vector(x3762),Vector(Set(x3764, x3763))) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:28)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x2830 = SRAMBankedWrite(x544,Vector(x2829),Vector(List(Const(7), Const(0))),Vector(x3804),Vector(Set(x3805, x3806))) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:28)
               Directly Banked: true
               Port: <offset: 7, castgroup: (7), broadcast: (0)>

             x2817 = SRAMBankedWrite(x544,Vector(x2816),Vector(List(Const(6), Const(0))),Vector(x3797),Vector(Set(x3799, x3798))) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:28)
               Directly Banked: true
               Port: <offset: 6, castgroup: (6), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x2905 = SRAMBankedRead(x544,Vector(List(x3827, Const(0))),Vector(x2904),Vector(Set(x3825, x3826)),Vec[Fix[TRUE,_10,_22]]) {}
             out_host store out_sram (ProjectTemplate.scala:54:16)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x444: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
    x2858: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
      x2740: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2739: SRAMBankedWrite
      x2753: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2752: SRAMBankedWrite
      x2766: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2765: SRAMBankedWrite
      x2779: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2778: SRAMBankedWrite
      x2792: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2791: SRAMBankedWrite
      x2805: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2804: SRAMBankedWrite
      x2818: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2817: SRAMBankedWrite
      x2831: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2830: SRAMBankedWrite
      x2844: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2843: SRAMBankedWrite
      x2857: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2856: SRAMBankedWrite
  x2916: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x2915: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Sequenced]
      x2910: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
        x2909: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
          x2905: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x1314)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1314 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    3
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1327 = SRAMBankedWrite(x1314,Vector(x3022),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1349 = SRAMBankedRead(x1314,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x1373 = SRAMBankedRead(x1314,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1372)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1342: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1328: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1327: SRAMBankedWrite
  x1367: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1357: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1349: SRAMBankedRead
  x1385: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x1373: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_0 (x577)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x577 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1871 = SRAMBankedWrite(x577,Vector(x3506),Vector(List(Const(0))),Vector(x3505),Vector(Set(x3503, x3504))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x1858 = SRAMBankedRead(x577,Vector(List(Const(0))),Vector(x3496),Vector(Set(x3498, x3497)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x1873: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x1858: SRAMBankedRead
  x1871: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x2505)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2505 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2536 = SRAMBankedWrite(x2505,Vector(x2533),Vector(List(Const(0))),Vector(x3701),Vector(Set(x3699, x3702, x3700))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2564 = SRAMBankedRead(x2505,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2667 = SRAMBankedWrite(x2505,Vector(x2664),Vector(List(Const(0))),Vector(x3732),Vector(Set(x3733, x3734, x3731))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2561: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2539: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2536: SRAMBankedWrite
  x2590: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2576: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2564: SRAMBankedRead
  x2685: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2670: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2667: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x1050)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1050 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1079 = SRAMBankedWrite(x1050,Vector(x1077),Vector(List(Const(0))),Vector(x3272),Vector(Set(x3275, x3273, x3274))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1111 = SRAMBankedRead(x1050,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1210 = SRAMBankedWrite(x1050,Vector(x1208),Vector(List(Const(0))),Vector(x3306),Vector(Set(x3307, x3304, x3305))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1105: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1083: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1079: SRAMBankedWrite
  x1134: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1120: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1111: SRAMBankedRead
  x1229: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1214: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1210: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x2298)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2298 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2329 = SRAMBankedWrite(x2298,Vector(x2325),Vector(List(Const(0))),Vector(x3640),Vector(Set(x3639, x3641, x3638))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2359 = SRAMBankedRead(x2298,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2460 = SRAMBankedWrite(x2298,Vector(x2456),Vector(List(Const(0))),Vector(x3672),Vector(Set(x3671, x3673, x3670))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2353: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2331: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2329: SRAMBankedWrite
  x2382: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2368: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2359: SRAMBankedRead
  x2477: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2462: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2460: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_0 (x583)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x583 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2496 = SRAMBankedWrite(x583,Vector(x3689),Vector(List(Const(0))),Vector(x3688),Vector(Set(x3687, x3686))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x2482 = SRAMBankedRead(x583,Vector(List(Const(0))),Vector(x3679),Vector(Set(x3680, x3681)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x2497: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x2482: SRAMBankedRead
  x2496: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_1 (x580)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x580 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2080 = SRAMBankedWrite(x580,Vector(x3566),Vector(List(Const(0))),Vector(x3564),Vector(Set(x3567, x3565))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2808 = SRAMBankedRead(x580,Vector(List(Const(0))),Vector(b2806),Vector(Set(b2807, b563)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:35)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2707: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
      x2081: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2080: SRAMBankedWrite
  x2858: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2818: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2808: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x1263)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1263 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1309 = SRAMBankedWrite(x1263,Vector(x1306),Vector(List(Const(0))),Vector(x3347),Vector(Set(x3348, x3346, x3349))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1332 = SRAMBankedRead(x1263,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1433 = SRAMBankedWrite(x1263,Vector(x1430),Vector(List(Const(0))),Vector(x3371),Vector(Set(x3372, x3370, x3373))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1313: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1312: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1309: SRAMBankedWrite
  x1342: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1341: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1332: SRAMBankedRead
  x1437: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1436: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1433: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x1258)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1258 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1288 = SRAMBankedWrite(x1258,Vector(x1285),Vector(List(Const(0))),Vector(x3334),Vector(Set(x3335, x3333, x3336))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1319 = SRAMBankedRead(x1258,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1419 = SRAMBankedWrite(x1258,Vector(x1416),Vector(List(Const(0))),Vector(x3366),Vector(Set(x3367, x3365, x3368))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1313: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1291: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1288: SRAMBankedWrite
  x1342: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1328: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1319: SRAMBankedRead
  x1437: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1422: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1419: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_1 (x574)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x574 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1456 = SRAMBankedWrite(x574,Vector(x3381),Vector(List(Const(0))),Vector(x3383),Vector(Set(x3382, x3384))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2769 = SRAMBankedRead(x574,Vector(List(Const(0))),Vector(b2767),Vector(Set(b2768, b560)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:35)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2707: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
      x1457: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x1456: SRAMBankedWrite
  x2858: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2779: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2769: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_1 (x578)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x578 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1872 = SRAMBankedWrite(x578,Vector(x3506),Vector(List(Const(0))),Vector(x3505),Vector(Set(x3503, x3504))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2795 = SRAMBankedRead(x578,Vector(List(Const(0))),Vector(b2793),Vector(Set(b2794, b562)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:35)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2707: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
      x1873: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x1872: SRAMBankedWrite
  x2858: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2805: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2795: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x1049)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1049 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1080 = SRAMBankedWrite(x1049,Vector(x1077),Vector(List(Const(0))),Vector(x3272),Vector(Set(x3275, x3273, x3274))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1108 = SRAMBankedRead(x1049,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1211 = SRAMBankedWrite(x1049,Vector(x1208),Vector(List(Const(0))),Vector(x3306),Vector(Set(x3307, x3304, x3305))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1105: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1083: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1080: SRAMBankedWrite
  x1134: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1120: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1108: SRAMBankedRead
  x1229: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1214: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1211: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x2305)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2305 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2350 = SRAMBankedWrite(x2305,Vector(x2346),Vector(List(Const(0))),Vector(x3653),Vector(Set(x3654, x3651, x3652))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2474 = SRAMBankedWrite(x2305,Vector(x2470),Vector(List(Const(0))),Vector(x3676),Vector(Set(x3678, x3675, x3677))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x2465 = SRAMBankedRead(x2305,Vector(List(Const(0))),Vector(b2463),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2353: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2352: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2350: SRAMBankedWrite
  x2477: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2476: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2465: SRAMBankedRead
      x2474: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x1680)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1680 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1724 = SRAMBankedWrite(x1680,Vector(x1722),Vector(List(Const(0))),Vector(x3470),Vector(Set(x3469, x3468, x3471))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1752 = SRAMBankedRead(x1680,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1848 = SRAMBankedWrite(x1680,Vector(x1846),Vector(List(Const(0))),Vector(x3495),Vector(Set(x3492, x3493, x3494))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1729: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1728: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1724: SRAMBankedWrite
  x1758: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1757: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1752: SRAMBankedRead
  x1853: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1852: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1848: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2388
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x2388 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2405 = RegWrite(x2388,x2403,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2962 = RegRead(x2388) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2407: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2406: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2405: RegWrite
  x2439: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2962: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x2097)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2097 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2140 = SRAMBankedWrite(x2097,Vector(x2138),Vector(List(Const(0))),Vector(x3591),Vector(Set(x3590, x3593, x3592))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2264 = SRAMBankedWrite(x2097,Vector(x2262),Vector(List(Const(0))),Vector(x3615),Vector(Set(x3614, x3617, x3616))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x2257 = SRAMBankedRead(x2097,Vector(List(Const(0))),Vector(b2255),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2145: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2144: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2140: SRAMBankedWrite
  x2269: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2268: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2257: SRAMBankedRead
      x2264: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x1264)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1264 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1308 = SRAMBankedWrite(x1264,Vector(x1306),Vector(List(Const(0))),Vector(x3347),Vector(Set(x3348, x3346, x3349))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1336 = SRAMBankedRead(x1264,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1432 = SRAMBankedWrite(x1264,Vector(x1430),Vector(List(Const(0))),Vector(x3371),Vector(Set(x3372, x3370, x3373))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1313: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1312: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1308: SRAMBankedWrite
  x1342: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1341: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1336: SRAMBankedRead
  x1437: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1436: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1432: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1553
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1553 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1563 = RegWrite(x1553,x1561,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2943 = RegRead(x1553) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x1580 = RegRead(x1553) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1575: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1565: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1563: RegWrite
  x1593: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2943: RegRead
    x1580: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x1673)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1673 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1706 = SRAMBankedWrite(x1673,Vector(x1701),Vector(List(Const(0))),Vector(x3455),Vector(Set(x3457, x3458, x3456))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1732 = SRAMBankedRead(x1673,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1837 = SRAMBankedWrite(x1673,Vector(x1832),Vector(List(Const(0))),Vector(x3488),Vector(Set(x3487, x3490, x3489))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1729: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1707: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1706: SRAMBankedWrite
  x1758: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1744: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1732: SRAMBankedRead
  x1853: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1838: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1837: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x2354)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x2354 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    3
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2367 = SRAMBankedWrite(x2354,Vector(x3082),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2389 = SRAMBankedRead(x2354,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2413 = SRAMBankedRead(x2354,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2412)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2382: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2368: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2367: SRAMBankedWrite
  x2407: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2397: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2389: SRAMBankedRead
  x2425: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2413: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x1469)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1469 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1494 = SRAMBankedWrite(x1469,Vector(x1493),Vector(List(Const(0))),Vector(x3395),Vector(Set(x3397, x3394, x3396))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1625 = SRAMBankedWrite(x1469,Vector(x1624),Vector(List(Const(0))),Vector(x3429),Vector(Set(x3426, x3427, x3428))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x1646 = SRAMBankedRead(x1469,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1521: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1499: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1494: SRAMBankedWrite
  x1645: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1630: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1625: SRAMBankedWrite
  x1665: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x1646: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x2514)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2514 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2556 = SRAMBankedWrite(x2514,Vector(x2554),Vector(List(Const(0))),Vector(x3712),Vector(Set(x3713, x3715, x3714))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2680 = SRAMBankedWrite(x2514,Vector(x2678),Vector(List(Const(0))),Vector(x3736),Vector(Set(x3739, x3738, x3737))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x2688 = SRAMBankedRead(x2514,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2561: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2560: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2556: SRAMBankedWrite
  x2685: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2684: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2680: SRAMBankedWrite
  x2705: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x2688: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x474
Type: StreamOut[BurstCmd]
Src:  ProjectTemplate.scala:21:14
Src:        A_sram load A_dram
---------------------------------------------------------------------
Symbol:     x474 = StreamOutNew(BurstCmdBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x496 = StreamOutBankedWrite(x474,ArrayBuffer(x494),ArrayBuffer(Set(x3125, x3126))) {}
             A_sram load A_dram (ProjectTemplate.scala:21:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x499: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Sequenced]
  x496: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x1681)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1681 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1727 = SRAMBankedWrite(x1681,Vector(x1722),Vector(List(Const(0))),Vector(x3470),Vector(Set(x3469, x3468, x3471))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1851 = SRAMBankedWrite(x1681,Vector(x1846),Vector(List(Const(0))),Vector(x3495),Vector(Set(x3492, x3493, x3494))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x1841 = SRAMBankedRead(x1681,Vector(List(Const(0))),Vector(b1839),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1729: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1728: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1727: SRAMBankedWrite
  x1853: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1852: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1841: SRAMBankedRead
      x1851: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x2509)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2509 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2535 = SRAMBankedWrite(x2509,Vector(x2533),Vector(List(Const(0))),Vector(x3701),Vector(Set(x3699, x3702, x3700))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2666 = SRAMBankedWrite(x2509,Vector(x2664),Vector(List(Const(0))),Vector(x3732),Vector(Set(x3733, x3734, x3731))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x2686 = SRAMBankedRead(x2509,Vector(List(Const(0))),Vector(b2501),Vector(Set(b2504, b566)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2561: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2539: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2535: SRAMBankedWrite
  x2685: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2670: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2666: SRAMBankedWrite
  x2705: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x2686: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x1053)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1053 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1081 = SRAMBankedWrite(x1053,Vector(x1077),Vector(List(Const(0))),Vector(x3272),Vector(Set(x3275, x3273, x3274))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1212 = SRAMBankedWrite(x1053,Vector(x1208),Vector(List(Const(0))),Vector(x3306),Vector(Set(x3307, x3304, x3305))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x1230 = SRAMBankedRead(x1053,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1105: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1083: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1081: SRAMBankedWrite
  x1229: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1214: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1212: SRAMBankedWrite
  x1249: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x1230: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x1257)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1257 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1289 = SRAMBankedWrite(x1257,Vector(x1285),Vector(List(Const(0))),Vector(x3334),Vector(Set(x3335, x3333, x3336))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1316 = SRAMBankedRead(x1257,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1420 = SRAMBankedWrite(x1257,Vector(x1416),Vector(List(Const(0))),Vector(x3366),Vector(Set(x3367, x3365, x3368))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1313: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1291: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1289: SRAMBankedWrite
  x1342: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1328: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1316: SRAMBankedRead
  x1437: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1422: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1420: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x1730)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1730 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    3
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1743 = SRAMBankedWrite(x1730,Vector(x3046),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1765 = SRAMBankedRead(x1730,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x1789 = SRAMBankedRead(x1730,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1788)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1758: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1744: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1743: SRAMBankedWrite
  x1783: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1773: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1765: SRAMBankedRead
  x1801: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x1789: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2596
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x2596 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2613 = RegWrite(x2596,x2611,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2966 = RegRead(x2596) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2615: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2614: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2613: RegWrite
  x2647: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2966: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x1881)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1881 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1913 = SRAMBankedWrite(x1881,Vector(x1909),Vector(List(Const(0))),Vector(x3518),Vector(Set(x3516, x3517, x3519))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1940 = SRAMBankedRead(x1881,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2044 = SRAMBankedWrite(x1881,Vector(x2040),Vector(List(Const(0))),Vector(x3550),Vector(Set(x3548, x3549, x3551))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1937: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1915: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1913: SRAMBankedWrite
  x1966: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1952: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1940: SRAMBankedRead
  x2061: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2046: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2044: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x899)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x899 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    4
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x924 = SRAMBankedWrite(x899,Vector(x3000),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x942 = SRAMBankedRead(x899,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
           - Mux Port #0: 
             x971 = SRAMBankedRead(x899,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x970)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x926: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x925: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x924: SRAMBankedWrite
  x951: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x950: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x942: SRAMBankedRead
  x983: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x971: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2593
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x2593 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2603 = RegWrite(x2593,x2601,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2963 = RegRead(x2593) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x2620 = RegRead(x2593) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2615: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2605: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2603: RegWrite
  x2633: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2963: RegRead
    x2620: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x1883)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1883 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1911 = SRAMBankedWrite(x1883,Vector(x1909),Vector(List(Const(0))),Vector(x3518),Vector(Set(x3516, x3517, x3519))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1947 = SRAMBankedRead(x1883,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2042 = SRAMBankedWrite(x1883,Vector(x2040),Vector(List(Const(0))),Vector(x3550),Vector(Set(x3548, x3549, x3551))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1937: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1915: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1911: SRAMBankedWrite
  x1966: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1952: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1947: SRAMBankedRead
  x2061: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2046: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2042: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1763
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1763 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1772 = RegWrite(x1763,x1770,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2948 = RegRead(x1763) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1783: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1773: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1772: RegWrite
  x1801: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2948: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x930
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x930 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x948 = RegWrite(x930,x946,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2933 = RegRead(x930) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x970 = RegRead(x930) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x951: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x950: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x948: RegWrite
  x983: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2933: RegRead
    x970: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x1674)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1674 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1705 = SRAMBankedWrite(x1674,Vector(x1701),Vector(List(Const(0))),Vector(x3455),Vector(Set(x3457, x3458, x3456))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1735 = SRAMBankedRead(x1674,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1836 = SRAMBankedWrite(x1674,Vector(x1832),Vector(List(Const(0))),Vector(x3488),Vector(Set(x3487, x3490, x3489))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1729: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1707: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1705: SRAMBankedWrite
  x1758: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1744: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1735: SRAMBankedRead
  x1853: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1838: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1836: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_1 (x584)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x584 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2495 = SRAMBankedWrite(x584,Vector(x3689),Vector(List(Const(0))),Vector(x3688),Vector(Set(x3687, x3686))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2834 = SRAMBankedRead(x584,Vector(List(Const(0))),Vector(b2832),Vector(Set(b2833, b565)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:35)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2707: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
      x2497: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2495: SRAMBankedWrite
  x2858: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2844: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2834: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x1106)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1106 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    3
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1119 = SRAMBankedWrite(x1106,Vector(x3010),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1141 = SRAMBankedRead(x1106,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x1165 = SRAMBankedRead(x1106,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1164)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1134: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1120: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1119: SRAMBankedWrite
  x1159: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1149: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1141: SRAMBankedRead
  x1177: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x1165: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x1731)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1731 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    4
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1756 = SRAMBankedWrite(x1731,Vector(x3048),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1774 = SRAMBankedRead(x1731,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
           - Mux Port #0: 
             x1803 = SRAMBankedRead(x1731,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1802)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1758: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1757: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1756: SRAMBankedWrite
  x1783: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1782: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1774: SRAMBankedRead
  x1815: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x1803: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x1055)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1055 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1099 = SRAMBankedWrite(x1055,Vector(x1098),Vector(List(Const(0))),Vector(x3288),Vector(Set(x3287, x3286, x3285))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1124 = SRAMBankedRead(x1055,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1223 = SRAMBankedWrite(x1055,Vector(x1222),Vector(List(Const(0))),Vector(x3310),Vector(Set(x3312, x3311, x3309))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1105: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1104: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1099: SRAMBankedWrite
  x1134: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1133: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1124: SRAMBankedRead
  x1229: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1228: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1223: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x2175)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x2175 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2232 = SRAMBankedWrite(x2175,Vector(x2217),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2246 = SRAMBankedRead(x2175,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2236: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2233: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2232: SRAMBankedWrite
  x2269: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2254: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2246: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2862
Type: StreamIn[Bit]
Src:  ProjectTemplate.scala:54:16
Src:        out_host store out_sram
---------------------------------------------------------------------
Symbol:     x2862 = StreamInNew(BurstAckBus)
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
         0 [Type:RD]:
           - Mux Port #0: 
             x2912 = StreamInBankedRead(x2862,ArrayBuffer(Set())) {}
             out_host store out_sram (ProjectTemplate.scala:54:16)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x2914: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
  x2912: StreamInBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x847)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x847 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x893 = SRAMBankedWrite(x847,Vector(x890),Vector(List(Const(0))),Vector(x3226),Vector(Set(x3224, x3227, x3225))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x916 = SRAMBankedRead(x847,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1017 = SRAMBankedWrite(x847,Vector(x1014),Vector(List(Const(0))),Vector(x3249),Vector(Set(x3250, x3251, x3248))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x896: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x893: SRAMBankedWrite
  x926: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x925: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x916: SRAMBankedRead
  x1021: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1020: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1017: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x637)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x637 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x663 = SRAMBankedWrite(x637,Vector(x661),Vector(List(Const(0))),Vector(x3151),Vector(Set(x3152, x3150, x3153))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x794 = SRAMBankedWrite(x637,Vector(x792),Vector(List(Const(0))),Vector(x3182),Vector(Set(x3185, x3183, x3184))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x814 = SRAMBankedRead(x637,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x689: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x667: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x663: SRAMBankedWrite
  x813: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x798: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x794: SRAMBankedWrite
  x833: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x814: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x841)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x841 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x870 = SRAMBankedWrite(x841,Vector(x869),Vector(List(Const(0))),Vector(x3214),Vector(Set(x3213, x3211, x3212))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x900 = SRAMBankedRead(x841,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1001 = SRAMBankedWrite(x841,Vector(x1000),Vector(List(Const(0))),Vector(x3246),Vector(Set(x3243, x3244, x3245))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x875: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x870: SRAMBankedWrite
  x926: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x912: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x900: SRAMBankedRead
  x1021: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1006: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1001: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2861
Type: StreamOut[Tup2[Fix[TRUE,_10,_22],Bit]]
Src:  ProjectTemplate.scala:54:16
Src:        out_host store out_sram
---------------------------------------------------------------------
Symbol:     x2861 = StreamOutNew(BurstFullDataBus())
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2908 = StreamOutBankedWrite(x2861,ArrayBuffer(x2907),ArrayBuffer(Set(x3829))) {}
             out_host store out_sram (ProjectTemplate.scala:54:16)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:



Control Tree: 
x2909: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x2908: StreamOutBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_1 (x568)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x568 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x831 = SRAMBankedWrite(x568,Vector(x3199),Vector(List(Const(0))),Vector(x3198),Vector(Set(x3201, x3200))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2730 = SRAMBankedRead(x568,Vector(List(Const(0))),Vector(b2728),Vector(Set(b2729, b557)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:35)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2707: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
      x833: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x831: SRAMBankedWrite
  x2858: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2740: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2730: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1555
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1555 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1564 = RegWrite(x1555,x1562,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2944 = RegRead(x1555) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1575: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1565: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1564: RegWrite
  x1593: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2944: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2386
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x2386 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2404 = RegWrite(x2386,x2402,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2961 = RegRead(x2386) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x2426 = RegRead(x2386) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2407: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2406: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2404: RegWrite
  x2439: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2961: RegRead
    x2426: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x1888)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1888 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1934 = SRAMBankedWrite(x1888,Vector(x1930),Vector(List(Const(0))),Vector(x3530),Vector(Set(x3532, x3529, x3531))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1960 = SRAMBankedRead(x1888,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2058 = SRAMBankedWrite(x1888,Vector(x2054),Vector(List(Const(0))),Vector(x3554),Vector(Set(x3555, x3553, x3556))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1937: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1936: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1934: SRAMBankedWrite
  x1966: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1965: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1960: SRAMBankedRead
  x2061: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2060: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2058: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1137
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1137 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1147 = RegWrite(x1137,x1145,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2935 = RegRead(x1137) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x1164 = RegRead(x1137) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1159: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1149: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1147: RegWrite
  x1177: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2935: RegRead
    x1164: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_0 (x575)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x575 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1664 = SRAMBankedWrite(x575,Vector(x3445),Vector(List(Const(0))),Vector(x3443),Vector(Set(x3444, x3442))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x1650 = SRAMBankedRead(x575,Vector(List(Const(0))),Vector(x3436),Vector(Set(x3435, x3437)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x1665: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x1650: SRAMBankedRead
  x1664: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x1054)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1054 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1101 = SRAMBankedWrite(x1054,Vector(x1098),Vector(List(Const(0))),Vector(x3288),Vector(Set(x3287, x3286, x3285))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1121 = SRAMBankedRead(x1054,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1225 = SRAMBankedWrite(x1054,Vector(x1222),Vector(List(Const(0))),Vector(x3310),Vector(Set(x3312, x3311, x3309))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1105: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1104: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1101: SRAMBankedWrite
  x1134: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1133: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1121: SRAMBankedRead
  x1229: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1228: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1225: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x2303)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2303 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2349 = SRAMBankedWrite(x2303,Vector(x2346),Vector(List(Const(0))),Vector(x3653),Vector(Set(x3654, x3651, x3652))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2372 = SRAMBankedRead(x2303,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2473 = SRAMBankedWrite(x2303,Vector(x2470),Vector(List(Const(0))),Vector(x3676),Vector(Set(x3678, x3675, x3677))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2353: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2352: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2349: SRAMBankedWrite
  x2382: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2381: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2372: SRAMBankedRead
  x2477: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2476: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2473: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x633)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x633 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x664 = SRAMBankedWrite(x633,Vector(x661),Vector(List(Const(0))),Vector(x3151),Vector(Set(x3152, x3150, x3153))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x692 = SRAMBankedRead(x633,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x795 = SRAMBankedWrite(x633,Vector(x792),Vector(List(Const(0))),Vector(x3182),Vector(Set(x3185, x3183, x3184))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x689: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x667: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x664: SRAMBankedWrite
  x718: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x704: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x692: SRAMBankedRead
  x813: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x798: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x795: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1556
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1556 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1573 = RegWrite(x1556,x1571,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2946 = RegRead(x1556) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1575: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1574: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1573: RegWrite
  x1607: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2946: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x2513)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2513 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2558 = SRAMBankedWrite(x2513,Vector(x2554),Vector(List(Const(0))),Vector(x3712),Vector(Set(x3713, x3715, x3714))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2682 = SRAMBankedWrite(x2513,Vector(x2678),Vector(List(Const(0))),Vector(x3736),Vector(Set(x3739, x3738, x3737))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x2673 = SRAMBankedRead(x2513,Vector(List(Const(0))),Vector(b2671),Vector(Set(b2672, b2503, b566)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2561: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2560: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2558: SRAMBankedWrite
  x2685: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2684: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2673: SRAMBankedRead
      x2682: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x723
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x723 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x732 = RegWrite(x723,x730,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2928 = RegRead(x723) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x743: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x733: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x732: RegWrite
  x761: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2928: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x929
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x929 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x939 = RegWrite(x929,x937,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2931 = RegRead(x929) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x956 = RegRead(x929) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x951: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x941: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x939: RegWrite
  x969: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2931: RegRead
    x956: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x1056)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1056 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1103 = SRAMBankedWrite(x1056,Vector(x1098),Vector(List(Const(0))),Vector(x3288),Vector(Set(x3287, x3286, x3285))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1128 = SRAMBankedRead(x1056,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1227 = SRAMBankedWrite(x1056,Vector(x1222),Vector(List(Const(0))),Vector(x3310),Vector(Set(x3312, x3311, x3309))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1105: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1104: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1103: SRAMBankedWrite
  x1134: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1133: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1128: SRAMBankedRead
  x1229: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1228: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1227: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x1058)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1058 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1102 = SRAMBankedWrite(x1058,Vector(x1098),Vector(List(Const(0))),Vector(x3288),Vector(Set(x3287, x3286, x3285))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1226 = SRAMBankedWrite(x1058,Vector(x1222),Vector(List(Const(0))),Vector(x3310),Vector(Set(x3312, x3311, x3309))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x1232 = SRAMBankedRead(x1058,Vector(List(Const(0))),Vector(b1045),Vector(Set(b1048, b559)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1105: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1104: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1102: SRAMBankedWrite
  x1229: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1228: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1226: SRAMBankedWrite
  x1249: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x1232: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x475
Type: FIFO[IssuedCmd]
Src:  ProjectTemplate.scala:21:14
Src:        A_sram load A_dram
---------------------------------------------------------------------
Symbol:     x475 = FIFONew(Const(16))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x498 = FIFOBankedEnq(x475,ArrayBuffer(x497),ArrayBuffer(Set(Const(true), x3126))) {}
             A_sram load A_dram (ProjectTemplate.scala:21:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x508 = FIFOBankedDeq(x475,ArrayBuffer(Set(Const(true))),Vec[IssuedCmd]) {}
             A_sram load A_dram (ProjectTemplate.scala:21:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x543: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
  x499: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Sequenced]
    x498: FIFOBankedEnq
  x542: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Sequenced]
    x516: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x508: FIFOBankedDeq
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x1886)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1886 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1933 = SRAMBankedWrite(x1886,Vector(x1930),Vector(List(Const(0))),Vector(x3530),Vector(Set(x3532, x3529, x3531))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1953 = SRAMBankedRead(x1886,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2057 = SRAMBankedWrite(x1886,Vector(x2054),Vector(List(Const(0))),Vector(x3554),Vector(Set(x3555, x3553, x3556))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1937: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1936: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1933: SRAMBankedWrite
  x1966: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1965: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1953: SRAMBankedRead
  x2061: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2060: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2057: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x1551)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1551 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1608 = SRAMBankedWrite(x1551,Vector(x1593),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1622 = SRAMBankedRead(x1551,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1612: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1609: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1608: SRAMBankedWrite
  x1645: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1630: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1622: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x898)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x898 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    3
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x911 = SRAMBankedWrite(x898,Vector(x2998),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x933 = SRAMBankedRead(x898,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x957 = SRAMBankedRead(x898,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x956)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x926: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x912: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x911: SRAMBankedWrite
  x951: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x941: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x933: SRAMBankedRead
  x969: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x957: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1971
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1971 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1980 = RegWrite(x1971,x1978,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2952 = RegRead(x1971) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1991: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1981: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1980: RegWrite
  x2009: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2952: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x505
Type: Reg[Fix[TRUE,_32,_0]]
Src:  ProjectTemplate.scala:21:14
Src:        A_sram load A_dram
---------------------------------------------------------------------
Symbol:     x505 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x511 = RegWrite(x505,x510,Set()) {}
             A_sram load A_dram (ProjectTemplate.scala:21:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x522 = RegRead(x505) {}
             A_sram load A_dram (ProjectTemplate.scala:21:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x542: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Sequenced]
  x516: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x511: RegWrite
  x541: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x522: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x2507)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2507 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2538 = SRAMBankedWrite(x2507,Vector(x2533),Vector(List(Const(0))),Vector(x3701),Vector(Set(x3699, x3702, x3700))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2571 = SRAMBankedRead(x2507,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2669 = SRAMBankedWrite(x2507,Vector(x2664),Vector(List(Const(0))),Vector(x3732),Vector(Set(x3733, x3734, x3731))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2561: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2539: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2538: SRAMBankedWrite
  x2590: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2576: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2571: SRAMBankedRead
  x2685: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2670: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2669: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x1759)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1759 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1816 = SRAMBankedWrite(x1759,Vector(x1801),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1830 = SRAMBankedRead(x1759,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1820: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1817: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1816: SRAMBankedWrite
  x1853: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1838: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1830: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2868
Type: Reg[Fix[TRUE,_32,_0]]
Src:  ProjectTemplate.scala:54:16
Src:        out_host store out_sram
---------------------------------------------------------------------
Symbol:     x2868 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2887 = RegWrite(x2868,x2875,Set()) {}
             out_host store out_sram (ProjectTemplate.scala:54:16)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x2897 = RegRead(x2868) {}
             out_host store out_sram (ProjectTemplate.scala:54:16)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x2910: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x2889: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x2887: RegWrite
  x2909: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x2897: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x1465)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1465 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1495 = SRAMBankedWrite(x1465,Vector(x1493),Vector(List(Const(0))),Vector(x3395),Vector(Set(x3397, x3394, x3396))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1524 = SRAMBankedRead(x1465,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1626 = SRAMBankedWrite(x1465,Vector(x1624),Vector(List(Const(0))),Vector(x3429),Vector(Set(x3426, x3427, x3428))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1521: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1499: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1495: SRAMBankedWrite
  x1550: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1536: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1524: SRAMBankedRead
  x1645: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1630: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1626: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x1468)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1468 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1498 = SRAMBankedWrite(x1468,Vector(x1493),Vector(List(Const(0))),Vector(x3395),Vector(Set(x3397, x3394, x3396))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1629 = SRAMBankedWrite(x1468,Vector(x1624),Vector(List(Const(0))),Vector(x3429),Vector(Set(x3426, x3427, x3428))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x1619 = SRAMBankedRead(x1468,Vector(List(Const(0))),Vector(b1617),Vector(Set(b1618, b1462, b561)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1521: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1499: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1498: SRAMBankedWrite
  x1645: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1630: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1619: SRAMBankedRead
      x1629: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2869
Type: Reg[Fix[TRUE,_32,_0]]
Src:  ProjectTemplate.scala:54:16
Src:        out_host store out_sram
---------------------------------------------------------------------
Symbol:     x2869 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2888 = RegWrite(x2869,x2878,Set()) {}
             out_host store out_sram (ProjectTemplate.scala:54:16)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x2967 = RegRead(x2869) {}
             out_host store out_sram (ProjectTemplate.scala:54:16)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x2910: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x2889: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x2888: RegWrite
  x2909: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x2967: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_1 (x570)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x570 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1039 = SRAMBankedWrite(x570,Vector(x3261),Vector(List(Const(0))),Vector(x3259),Vector(Set(x3262, x3260))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2743 = SRAMBankedRead(x570,Vector(List(Const(0))),Vector(b2741),Vector(Set(b2742, b558)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:35)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2707: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
      x1041: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x1039: SRAMBankedWrite
  x2858: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2753: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2743: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x1882)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1882 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1910 = SRAMBankedWrite(x1882,Vector(x1909),Vector(List(Const(0))),Vector(x3518),Vector(Set(x3516, x3517, x3519))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1943 = SRAMBankedRead(x1882,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2041 = SRAMBankedWrite(x1882,Vector(x2040),Vector(List(Const(0))),Vector(x3550),Vector(Set(x3548, x3549, x3551))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1937: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1915: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1910: SRAMBankedWrite
  x1966: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1952: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1943: SRAMBankedRead
  x2061: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2046: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2041: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x1472)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1472 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1518 = SRAMBankedWrite(x1472,Vector(x1514),Vector(List(Const(0))),Vector(x3409),Vector(Set(x3407, x3410, x3408))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1544 = SRAMBankedRead(x1472,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1642 = SRAMBankedWrite(x1472,Vector(x1638),Vector(List(Const(0))),Vector(x3433),Vector(Set(x3431, x3434, x3432))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1521: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1520: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1518: SRAMBankedWrite
  x1550: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1549: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1544: SRAMBankedRead
  x1645: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1644: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1642: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x2301)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2301 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2326 = SRAMBankedWrite(x2301,Vector(x2325),Vector(List(Const(0))),Vector(x3640),Vector(Set(x3639, x3641, x3638))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2457 = SRAMBankedWrite(x2301,Vector(x2456),Vector(List(Const(0))),Vector(x3672),Vector(Set(x3671, x3673, x3670))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x2478 = SRAMBankedRead(x2301,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2353: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2331: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2326: SRAMBankedWrite
  x2477: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2462: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2457: SRAMBankedWrite
  x2497: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x2478: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_0 (x567)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x567 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x832 = SRAMBankedWrite(x567,Vector(x3199),Vector(List(Const(0))),Vector(x3198),Vector(Set(x3201, x3200))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x818 = SRAMBankedRead(x567,Vector(List(Const(0))),Vector(x3193),Vector(Set(x3191, x3192)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x833: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x818: SRAMBankedRead
  x832: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x1470)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1470 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1515 = SRAMBankedWrite(x1470,Vector(x1514),Vector(List(Const(0))),Vector(x3409),Vector(Set(x3407, x3410, x3408))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1537 = SRAMBankedRead(x1470,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1639 = SRAMBankedWrite(x1470,Vector(x1638),Vector(List(Const(0))),Vector(x3433),Vector(Set(x3431, x3434, x3432))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1521: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1520: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1515: SRAMBankedWrite
  x1550: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1549: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1537: SRAMBankedRead
  x1645: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1644: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1639: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2178
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x2178 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2196 = RegWrite(x2178,x2194,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2957 = RegRead(x2178) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x2218 = RegRead(x2178) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2199: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2198: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2196: RegWrite
  x2231: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2957: RegRead
    x2218: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x1968)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1968 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2026 = SRAMBankedWrite(x1968,Vector(x2023),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2052 = SRAMBankedRead(x1968,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2028: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2027: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2026: SRAMBankedWrite
  x2061: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2060: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2052: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x1474)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1474 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1517 = SRAMBankedWrite(x1474,Vector(x1514),Vector(List(Const(0))),Vector(x3409),Vector(Set(x3407, x3410, x3408))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1641 = SRAMBankedWrite(x1474,Vector(x1638),Vector(List(Const(0))),Vector(x3433),Vector(Set(x3431, x3434, x3432))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x1648 = SRAMBankedRead(x1474,Vector(List(Const(0))),Vector(b1461),Vector(Set(b1464, b561)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1521: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1520: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1517: SRAMBankedWrite
  x1645: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1644: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1641: SRAMBankedWrite
  x1665: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x1648: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x1889)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1889 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1935 = SRAMBankedWrite(x1889,Vector(x1930),Vector(List(Const(0))),Vector(x3530),Vector(Set(x3532, x3529, x3531))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2059 = SRAMBankedWrite(x1889,Vector(x2054),Vector(List(Const(0))),Vector(x3554),Vector(Set(x3555, x3553, x3556))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x2049 = SRAMBankedRead(x1889,Vector(List(Const(0))),Vector(b2047),Vector(Set(b2048, b1879, b563)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1937: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1936: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1935: SRAMBankedWrite
  x2061: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2060: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2049: SRAMBankedRead
      x2059: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1969
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1969 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1979 = RegWrite(x1969,x1977,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2951 = RegRead(x1969) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x1996 = RegRead(x1969) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1991: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1981: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1979: RegWrite
  x2009: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2951: RegRead
    x1996: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_0 (x569)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x569 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1040 = SRAMBankedWrite(x569,Vector(x3261),Vector(List(Const(0))),Vector(x3259),Vector(Set(x3262, x3260))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x1026 = SRAMBankedRead(x569,Vector(List(Const(0))),Vector(x3254),Vector(Set(x3252, x3253)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x1041: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x1026: SRAMBankedRead
  x1040: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x719)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x719 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x776 = SRAMBankedWrite(x719,Vector(x761),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x790 = SRAMBankedRead(x719,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x780: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x777: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x776: SRAMBankedWrite
  x813: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x798: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x790: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x1678)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1678 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1726 = SRAMBankedWrite(x1678,Vector(x1722),Vector(List(Const(0))),Vector(x3470),Vector(Set(x3469, x3468, x3471))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1745 = SRAMBankedRead(x1678,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1850 = SRAMBankedWrite(x1678,Vector(x1846),Vector(List(Const(0))),Vector(x3495),Vector(Set(x3492, x3493, x3494))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1729: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1728: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1726: SRAMBankedWrite
  x1758: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1757: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1745: SRAMBankedRead
  x1853: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1852: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1850: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x842)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x842 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x871 = SRAMBankedWrite(x842,Vector(x869),Vector(List(Const(0))),Vector(x3214),Vector(Set(x3213, x3211, x3212))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x903 = SRAMBankedRead(x842,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1002 = SRAMBankedWrite(x842,Vector(x1000),Vector(List(Const(0))),Vector(x3246),Vector(Set(x3243, x3244, x3245))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x875: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x871: SRAMBankedWrite
  x926: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x912: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x903: SRAMBankedRead
  x1021: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1006: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1002: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x2384)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x2384 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2442 = SRAMBankedWrite(x2384,Vector(x2439),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2468 = SRAMBankedRead(x2384,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2464, b2295, b565)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2444: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2443: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2442: SRAMBankedWrite
  x2477: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2476: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2468: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1347
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1347 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1356 = RegWrite(x1347,x1354,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2940 = RegRead(x1347) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1367: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1357: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1356: RegWrite
  x1385: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2940: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1348
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1348 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1365 = RegWrite(x1348,x1363,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2942 = RegRead(x1348) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1367: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1366: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1365: RegWrite
  x1399: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2942: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x1344)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1344 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1402 = SRAMBankedWrite(x1344,Vector(x1399),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1428 = SRAMBankedRead(x1344,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1404: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1403: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1402: SRAMBankedWrite
  x1437: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1436: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1428: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x2511)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2511 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2559 = SRAMBankedWrite(x2511,Vector(x2554),Vector(List(Const(0))),Vector(x3712),Vector(Set(x3713, x3715, x3714))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2580 = SRAMBankedRead(x2511,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2683 = SRAMBankedWrite(x2511,Vector(x2678),Vector(List(Const(0))),Vector(x3736),Vector(Set(x3739, x3738, x3737))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2561: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2560: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2559: SRAMBankedWrite
  x2590: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2589: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2580: SRAMBankedRead
  x2685: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2684: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2683: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x721
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x721 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x731 = RegWrite(x721,x729,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2927 = RegRead(x721) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x748 = RegRead(x721) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x743: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x733: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x731: RegWrite
  x761: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2927: RegRead
    x748: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x931
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x931 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x940 = RegWrite(x931,x938,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2932 = RegRead(x931) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x951: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x941: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x940: RegWrite
  x969: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2932: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x720)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x720 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x778 = SRAMBankedWrite(x720,Vector(x775),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x804 = SRAMBankedRead(x720,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x780: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x779: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x778: SRAMBankedWrite
  x813: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x812: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x804: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2595
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x2595 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2604 = RegWrite(x2595,x2602,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2964 = RegRead(x2595) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2615: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2605: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2604: RegWrite
  x2633: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2964: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x1473)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1473 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1519 = SRAMBankedWrite(x1473,Vector(x1514),Vector(List(Const(0))),Vector(x3409),Vector(Set(x3407, x3410, x3408))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1643 = SRAMBankedWrite(x1473,Vector(x1638),Vector(List(Const(0))),Vector(x3433),Vector(Set(x3431, x3434, x3432))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x1633 = SRAMBankedRead(x1473,Vector(List(Const(0))),Vector(b1631),Vector(Set(b1632, b1463, b561)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1521: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1520: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1519: SRAMBankedWrite
  x1645: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1644: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1633: SRAMBankedRead
      x1643: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2385
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x2385 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2395 = RegWrite(x2385,x2393,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2959 = RegRead(x2385) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x2412 = RegRead(x2385) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2407: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2397: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2395: RegWrite
  x2425: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2959: RegRead
    x2412: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: A_sram_0 (x471)
Type: SRAM2[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:19:27
Src:        val A_sram = SRAM[T](N, 3)
---------------------------------------------------------------------
Symbol:     x471 = SRAMNew(List(Const(100), Const(3)),SRAM2[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0
  Regs: 12.0
  Slices: 12.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0, 0)
     Accum:    None
     Banks:    10, 1 <Hierarchical>
       Dims {0}: Cyclic: N=10, B=1, alpha=<1>, P=<10> (176 solutions, 46 checks)
       Dims {1}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x539 = SRAMBankedWrite(x471,Vector(x3137),Vector(List(x3139, Const(0))),Vector(x538),Vector(Set(x3138, x3140, x3136))) {}
             A_sram load A_dram (ProjectTemplate.scala:21:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x1069 = SRAMBankedRead(x471,Vector(List(Const(2), Const(0))),Vector(x1068),Vector(Set(x3266, x3264, x3265)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 2, castgroup: (2), broadcast: (0)>

             x1298 = SRAMBankedRead(x471,Vector(List(Const(3), Const(0))),Vector(x1297),Vector(Set(x3339, x3338, x3340)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 3, castgroup: (3), broadcast: (1)>

             x674 = SRAMBankedRead(x471,Vector(List(Const(0), Const(0))),Vector(x673),Vector(Set(x3157, x3156, x3155)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (1)>

             x1714 = SRAMBankedRead(x471,Vector(List(Const(5), Const(0))),Vector(x1713),Vector(Set(x3461, x3460, x3462)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 5, castgroup: (5), broadcast: (1)>

             x1485 = SRAMBankedRead(x471,Vector(List(Const(4), Const(0))),Vector(x1484),Vector(Set(x3388, x3386, x3387)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 4, castgroup: (4), broadcast: (0)>

             x861 = SRAMBankedRead(x471,Vector(List(Const(1), Const(0))),Vector(x860),Vector(Set(x3205, x3203, x3204)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x1901 = SRAMBankedRead(x471,Vector(List(Const(6), Const(0))),Vector(x1900),Vector(Set(x3508, x3509, x3510)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 6, castgroup: (6), broadcast: (0)>

             x1693 = SRAMBankedRead(x471,Vector(List(Const(5), Const(0))),Vector(x1692),Vector(Set(x3448, x3449, x3447)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 5, castgroup: (5), broadcast: (0)>

             x2130 = SRAMBankedRead(x471,Vector(List(Const(7), Const(0))),Vector(x2129),Vector(Set(x3582, x3584, x3583)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 7, castgroup: (7), broadcast: (1)>

             x2109 = SRAMBankedRead(x471,Vector(List(Const(7), Const(0))),Vector(x2108),Vector(Set(x3569, x3570, x3571)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 7, castgroup: (7), broadcast: (0)>

             x1922 = SRAMBankedRead(x471,Vector(List(Const(6), Const(0))),Vector(x1921),Vector(Set(x3523, x3521, x3522)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 6, castgroup: (6), broadcast: (1)>

             x1090 = SRAMBankedRead(x471,Vector(List(Const(2), Const(0))),Vector(x1089),Vector(Set(x3279, x3278, x3277)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 2, castgroup: (2), broadcast: (1)>

             x2525 = SRAMBankedRead(x471,Vector(List(Const(9), Const(0))),Vector(x2524),Vector(Set(x3691, x3693, x3692)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 9, castgroup: (9), broadcast: (0)>

             x2338 = SRAMBankedRead(x471,Vector(List(Const(8), Const(0))),Vector(x2337),Vector(Set(x3645, x3643, x3644)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 8, castgroup: (8), broadcast: (1)>

             x1277 = SRAMBankedRead(x471,Vector(List(Const(3), Const(0))),Vector(x1276),Vector(Set(x3326, x3325, x3327)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 3, castgroup: (3), broadcast: (0)>

             x2546 = SRAMBankedRead(x471,Vector(List(Const(9), Const(0))),Vector(x2545),Vector(Set(x3704, x3706, x3705)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 9, castgroup: (9), broadcast: (1)>

             x1506 = SRAMBankedRead(x471,Vector(List(Const(4), Const(0))),Vector(x1505),Vector(Set(x3399, x3401, x3400)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 4, castgroup: (4), broadcast: (1)>

             x653 = SRAMBankedRead(x471,Vector(List(Const(0), Const(0))),Vector(x652),Vector(Set(x3143, x3144, x3142)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

             x882 = SRAMBankedRead(x471,Vector(List(Const(1), Const(0))),Vector(x881),Vector(Set(x3216, x3218, x3217)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (1)>

             x2317 = SRAMBankedRead(x471,Vector(List(Const(8), Const(0))),Vector(x2316),Vector(Set(x3631, x3632, x3630)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:51)
               Directly Banked: true
               Port: <offset: 8, castgroup: (8), broadcast: (0)>




Control Tree: 
x444: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x543: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x542: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Sequenced]
      x541: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x539: SRAMBankedWrite
  x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
    x2707: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
      x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x689: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x667: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x653: SRAMBankedRead
          x688: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x674: SRAMBankedRead
      x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x875: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x861: SRAMBankedRead
          x896: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x882: SRAMBankedRead
      x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x1105: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x1083: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1069: SRAMBankedRead
          x1104: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1090: SRAMBankedRead
      x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x1313: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x1291: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1277: SRAMBankedRead
          x1312: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1298: SRAMBankedRead
      x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x1521: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x1499: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1485: SRAMBankedRead
          x1520: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1506: SRAMBankedRead
      x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x1729: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x1707: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1693: SRAMBankedRead
          x1728: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1714: SRAMBankedRead
      x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x1937: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x1915: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1901: SRAMBankedRead
          x1936: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1922: SRAMBankedRead
      x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x2145: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x2123: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x2109: SRAMBankedRead
          x2144: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x2130: SRAMBankedRead
      x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x2353: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x2331: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x2317: SRAMBankedRead
          x2352: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x2338: SRAMBankedRead
      x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x2561: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x2539: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x2525: SRAMBankedRead
          x2560: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x2546: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x928)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x928 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x986 = SRAMBankedWrite(x928,Vector(x983),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1012 = SRAMBankedRead(x928,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x988: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x987: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x986: SRAMBankedWrite
  x1021: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1020: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1012: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x640)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x640 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x686 = SRAMBankedWrite(x640,Vector(x682),Vector(List(Const(0))),Vector(x3165),Vector(Set(x3163, x3164, x3166))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x712 = SRAMBankedRead(x640,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x810 = SRAMBankedWrite(x640,Vector(x806),Vector(List(Const(0))),Vector(x3188),Vector(Set(x3190, x3187, x3189))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x689: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x688: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x686: SRAMBankedWrite
  x718: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x717: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x712: SRAMBankedRead
  x813: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x812: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x810: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x2095)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2095 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2143 = SRAMBankedWrite(x2095,Vector(x2138),Vector(List(Const(0))),Vector(x3591),Vector(Set(x3590, x3593, x3592))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2164 = SRAMBankedRead(x2095,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2267 = SRAMBankedWrite(x2095,Vector(x2262),Vector(List(Const(0))),Vector(x3615),Vector(Set(x3614, x3617, x3616))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2145: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2144: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2143: SRAMBankedWrite
  x2174: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2173: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2164: SRAMBankedRead
  x2269: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2268: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2267: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x2299)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2299 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2328 = SRAMBankedWrite(x2299,Vector(x2325),Vector(List(Const(0))),Vector(x3640),Vector(Set(x3639, x3641, x3638))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2363 = SRAMBankedRead(x2299,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2459 = SRAMBankedWrite(x2299,Vector(x2456),Vector(List(Const(0))),Vector(x3672),Vector(Set(x3671, x3673, x3670))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2353: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2331: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2328: SRAMBankedWrite
  x2382: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2368: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2363: SRAMBankedRead
  x2477: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2462: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2459: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x1967)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1967 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2024 = SRAMBankedWrite(x1967,Vector(x2009),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2038 = SRAMBankedRead(x1967,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2028: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2025: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2024: SRAMBankedWrite
  x2061: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2046: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2038: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x1343)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1343 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1400 = SRAMBankedWrite(x1343,Vector(x1385),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1414 = SRAMBankedRead(x1343,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1404: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1401: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1400: SRAMBankedWrite
  x1437: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1422: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1414: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1764
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1764 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1781 = RegWrite(x1764,x1779,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2950 = RegRead(x1764) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1783: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1782: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1781: RegWrite
  x1815: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2950: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x1884)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1884 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1912 = SRAMBankedWrite(x1884,Vector(x1909),Vector(List(Const(0))),Vector(x3518),Vector(Set(x3516, x3517, x3519))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2043 = SRAMBankedWrite(x1884,Vector(x2040),Vector(List(Const(0))),Vector(x3550),Vector(Set(x3548, x3549, x3551))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x2035 = SRAMBankedRead(x1884,Vector(List(Const(0))),Vector(b2033),Vector(Set(b2034, b1878, b563)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1937: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1915: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1912: SRAMBankedWrite
  x2061: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2046: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2035: SRAMBankedRead
      x2043: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x2506)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2506 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2537 = SRAMBankedWrite(x2506,Vector(x2533),Vector(List(Const(0))),Vector(x3701),Vector(Set(x3699, x3702, x3700))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2567 = SRAMBankedRead(x2506,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2668 = SRAMBankedWrite(x2506,Vector(x2664),Vector(List(Const(0))),Vector(x3732),Vector(Set(x3733, x3734, x3731))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2561: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2539: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2537: SRAMBankedWrite
  x2590: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2576: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2567: SRAMBankedRead
  x2685: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2670: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2668: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x850)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x850 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x895 = SRAMBankedWrite(x850,Vector(x890),Vector(List(Const(0))),Vector(x3226),Vector(Set(x3224, x3227, x3225))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1019 = SRAMBankedWrite(x850,Vector(x1014),Vector(List(Const(0))),Vector(x3249),Vector(Set(x3250, x3251, x3248))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x1024 = SRAMBankedRead(x850,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x896: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x895: SRAMBankedWrite
  x1021: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1020: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1019: SRAMBankedWrite
  x1041: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x1024: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: A_sram_1 (x472)
Type: SRAM2[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:19:27
Src:        val A_sram = SRAM[T](N, 3)
---------------------------------------------------------------------
Symbol:     x472 = SRAMNew(List(Const(100), Const(3)),SRAM2[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0
  Regs: 12.0
  Slices: 12.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    1
     Padding:  List(0, 0)
     Accum:    None
     Banks:    2, 1 <Hierarchical>
       Dims {0}: Cyclic: N=2, B=1, alpha=<1>, P=<2> (72 solutions, 1 checks)
       Dims {1}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x534 = SRAMBankedWrite(x472,Vector(x3132),Vector(List(x3130, Const(0))),Vector(x533),Vector(Set(x3133, x3134, x3131))) {}
             A_sram load A_dram (ProjectTemplate.scala:21:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x680 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x679),Vector(Set(x3159, x3160, x3161)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x1720 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1719),Vector(Set(x3465, x3464, x3466)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (5)>

             x1075 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1074),Vector(Set(x3268, x3270, x3269)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (2)>

             x2344 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x2343),Vector(Set(x3649, x3647, x3648)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (8)>

             x659 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x658),Vector(Set(x3147, x3148, x3146)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

             x1491 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1490),Vector(Set(x3390, x3392, x3391)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (4)>

             x2531 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x2530),Vector(Set(x3697, x3695, x3696)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (9)>

             x1699 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1698),Vector(Set(x3452, x3451, x3453)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (5)>

             x2115 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x2114),Vector(Set(x3575, x3574, x3573)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (7)>

             x1096 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1095),Vector(Set(x3283, x3282, x3281)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (2)>

             x1512 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1511),Vector(Set(x3403, x3405, x3404)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (4)>

             x1928 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1927),Vector(Set(x3527, x3525, x3526)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (6)>

             x1304 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x1303),Vector(Set(x3343, x3342, x3344)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (3)>

             x867 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x866),Vector(Set(x3207, x3209, x3208)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (1)>

             x1283 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1282),Vector(Set(x3330, x3331, x3329)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (3)>

             x2136 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x2135),Vector(Set(x3586, x3588, x3587)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (7)>

             x1907 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x1906),Vector(Set(x3514, x3513, x3512)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (6)>

             x2323 = SRAMBankedRead(x472,Vector(List(Const(0), Const(0))),Vector(x2322),Vector(Set(x3635, x3634, x3636)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (8)>

             x2552 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x2551),Vector(Set(x3708, x3710, x3709)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (9)>

             x888 = SRAMBankedRead(x472,Vector(List(Const(1), Const(0))),Vector(x887),Vector(Set(x3220, x3222, x3221)),Vec[Fix[TRUE,_10,_22]]) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:65)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (1)>




Control Tree: 
x444: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x543: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x542: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Sequenced]
      x541: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x534: SRAMBankedWrite
  x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
    x2707: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
      x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x689: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x667: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x659: SRAMBankedRead
          x688: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x680: SRAMBankedRead
      x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x875: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x867: SRAMBankedRead
          x896: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x888: SRAMBankedRead
      x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x1105: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x1083: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1075: SRAMBankedRead
          x1104: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1096: SRAMBankedRead
      x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x1313: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x1291: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1283: SRAMBankedRead
          x1312: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1304: SRAMBankedRead
      x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x1521: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x1499: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1491: SRAMBankedRead
          x1520: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1512: SRAMBankedRead
      x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x1729: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x1707: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1699: SRAMBankedRead
          x1728: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1720: SRAMBankedRead
      x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x1937: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x1915: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1907: SRAMBankedRead
          x1936: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x1928: SRAMBankedRead
      x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x2145: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x2123: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x2115: SRAMBankedRead
          x2144: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x2136: SRAMBankedRead
      x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x2353: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x2331: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x2323: SRAMBankedRead
          x2352: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x2344: SRAMBankedRead
      x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
        x2561: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
          x2539: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x2531: SRAMBankedRead
          x2560: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
            x2552: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x2302)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2302 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2351 = SRAMBankedWrite(x2302,Vector(x2346),Vector(List(Const(0))),Vector(x3653),Vector(Set(x3654, x3651, x3652))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2369 = SRAMBankedRead(x2302,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2475 = SRAMBankedWrite(x2302,Vector(x2470),Vector(List(Const(0))),Vector(x3676),Vector(Set(x3678, x3675, x3677))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2353: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2352: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2351: SRAMBankedWrite
  x2382: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2381: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2369: SRAMBankedRead
  x2477: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2476: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2475: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1970
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1970 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1988 = RegWrite(x1970,x1986,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2953 = RegRead(x1970) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x2010 = RegRead(x1970) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1991: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1990: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1988: RegWrite
  x2023: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2953: RegRead
    x2010: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x844)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x844 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x874 = SRAMBankedWrite(x844,Vector(x869),Vector(List(Const(0))),Vector(x3214),Vector(Set(x3213, x3211, x3212))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1005 = SRAMBankedWrite(x844,Vector(x1000),Vector(List(Const(0))),Vector(x3246),Vector(Set(x3243, x3244, x3245))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x995 = SRAMBankedRead(x844,Vector(List(Const(0))),Vector(b993),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x875: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x874: SRAMBankedWrite
  x1021: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1006: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x995: SRAMBankedRead
      x1005: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2177
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x2177 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2187 = RegWrite(x2177,x2185,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2955 = RegRead(x2177) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x2204 = RegRead(x2177) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2199: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2189: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2187: RegWrite
  x2217: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2955: RegRead
    x2204: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x2297)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2297 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2330 = SRAMBankedWrite(x2297,Vector(x2325),Vector(List(Const(0))),Vector(x3640),Vector(Set(x3639, x3641, x3638))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2356 = SRAMBankedRead(x2297,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2461 = SRAMBankedWrite(x2297,Vector(x2456),Vector(List(Const(0))),Vector(x3672),Vector(Set(x3671, x3673, x3670))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2353: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2331: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2330: SRAMBankedWrite
  x2382: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2368: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2356: SRAMBankedRead
  x2477: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2462: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2461: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x1051)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1051 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1078 = SRAMBankedWrite(x1051,Vector(x1077),Vector(List(Const(0))),Vector(x3272),Vector(Set(x3275, x3273, x3274))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1115 = SRAMBankedRead(x1051,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1209 = SRAMBankedWrite(x1051,Vector(x1208),Vector(List(Const(0))),Vector(x3306),Vector(Set(x3307, x3304, x3305))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1105: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1083: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1078: SRAMBankedWrite
  x1134: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1120: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1115: SRAMBankedRead
  x1229: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1214: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1209: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x1466)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1466 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1496 = SRAMBankedWrite(x1466,Vector(x1493),Vector(List(Const(0))),Vector(x3395),Vector(Set(x3397, x3394, x3396))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1527 = SRAMBankedRead(x1466,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1627 = SRAMBankedWrite(x1466,Vector(x1624),Vector(List(Const(0))),Vector(x3429),Vector(Set(x3426, x3427, x3428))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1521: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1499: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1496: SRAMBankedWrite
  x1550: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1536: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1527: SRAMBankedRead
  x1645: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1630: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1627: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2387
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x2387 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2396 = RegWrite(x2387,x2394,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2960 = RegRead(x2387) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2407: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2397: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2396: RegWrite
  x2425: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2960: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x846)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x846 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x891 = SRAMBankedWrite(x846,Vector(x890),Vector(List(Const(0))),Vector(x3226),Vector(Set(x3224, x3227, x3225))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x913 = SRAMBankedRead(x846,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1015 = SRAMBankedWrite(x846,Vector(x1014),Vector(List(Const(0))),Vector(x3249),Vector(Set(x3250, x3251, x3248))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x896: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x891: SRAMBankedWrite
  x926: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x925: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x913: SRAMBankedRead
  x1021: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1020: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1015: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_1 (x572)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x572 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1247 = SRAMBankedWrite(x572,Vector(x3321),Vector(List(Const(0))),Vector(x3323),Vector(Set(x3322, x3320))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2756 = SRAMBankedRead(x572,Vector(List(Const(0))),Vector(b2754),Vector(Set(b2755, b559)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:35)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2707: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
      x1249: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x1247: SRAMBankedWrite
  x2858: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2766: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2756: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x2591)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x2591 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2648 = SRAMBankedWrite(x2591,Vector(x2633),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2662 = SRAMBankedRead(x2591,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2652: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2649: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2648: SRAMBankedWrite
  x2685: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2670: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2662: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_0 (x571)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x571 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1248 = SRAMBankedWrite(x571,Vector(x3321),Vector(List(Const(0))),Vector(x3323),Vector(Set(x3322, x3320))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x1234 = SRAMBankedRead(x571,Vector(List(Const(0))),Vector(x3313),Vector(Set(x3314, x3315)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x1249: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x1234: SRAMBankedRead
  x1248: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x1675)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1675 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1704 = SRAMBankedWrite(x1675,Vector(x1701),Vector(List(Const(0))),Vector(x3455),Vector(Set(x3457, x3458, x3456))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1739 = SRAMBankedRead(x1675,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1835 = SRAMBankedWrite(x1675,Vector(x1832),Vector(List(Const(0))),Vector(x3488),Vector(Set(x3487, x3490, x3489))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1729: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1707: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1704: SRAMBankedWrite
  x1758: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1744: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1739: SRAMBankedRead
  x1853: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1838: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1835: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x1522)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1522 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    3
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1535 = SRAMBankedWrite(x1522,Vector(x3034),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1557 = SRAMBankedRead(x1522,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x1581 = SRAMBankedRead(x1522,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1580)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1550: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1536: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1535: SRAMBankedWrite
  x1575: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1565: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1557: SRAMBankedRead
  x1593: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x1581: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x932
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x932 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x949 = RegWrite(x932,x947,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2934 = RegRead(x932) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x951: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x950: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x949: RegWrite
  x983: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2934: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1762
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1762 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1780 = RegWrite(x1762,x1778,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2949 = RegRead(x1762) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x1802 = RegRead(x1762) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1783: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1782: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1780: RegWrite
  x1815: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2949: RegRead
    x1802: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2867
Type: Reg[Fix[TRUE,_32,_0]]
Src:  ProjectTemplate.scala:54:16
Src:        out_host store out_sram
---------------------------------------------------------------------
Symbol:     x2867 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2886 = RegWrite(x2867,x2874,Set()) {}
             out_host store out_sram (ProjectTemplate.scala:54:16)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x2895 = RegRead(x2867) {}
             out_host store out_sram (ProjectTemplate.scala:54:16)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x2910: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x2889: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x2886: RegWrite
  x2909: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x2895: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x634)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x634 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x662 = SRAMBankedWrite(x634,Vector(x661),Vector(List(Const(0))),Vector(x3151),Vector(Set(x3152, x3150, x3153))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x695 = SRAMBankedRead(x634,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x793 = SRAMBankedWrite(x634,Vector(x792),Vector(List(Const(0))),Vector(x3182),Vector(Set(x3185, x3183, x3184))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x689: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x667: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x662: SRAMBankedWrite
  x718: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x704: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x695: SRAMBankedRead
  x813: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x798: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x793: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1761
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1761 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1771 = RegWrite(x1761,x1769,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2947 = RegRead(x1761) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x1788 = RegRead(x1761) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1783: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1773: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1771: RegWrite
  x1801: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2947: RegRead
    x1788: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x638)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x638 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x683 = SRAMBankedWrite(x638,Vector(x682),Vector(List(Const(0))),Vector(x3165),Vector(Set(x3163, x3164, x3166))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x705 = SRAMBankedRead(x638,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x807 = SRAMBankedWrite(x638,Vector(x806),Vector(List(Const(0))),Vector(x3188),Vector(Set(x3190, x3187, x3189))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x689: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x688: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x683: SRAMBankedWrite
  x718: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x717: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x705: SRAMBankedRead
  x813: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x812: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x807: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_0 (x581)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x581 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2288 = SRAMBankedWrite(x581,Vector(x3625),Vector(List(Const(0))),Vector(x3626),Vector(Set(x3627, x3628))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x2274 = SRAMBankedRead(x581,Vector(List(Const(0))),Vector(x3620),Vector(Set(x3619, x3618)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x2289: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x2274: SRAMBankedRead
  x2288: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x2094)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2094 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2139 = SRAMBankedWrite(x2094,Vector(x2138),Vector(List(Const(0))),Vector(x3591),Vector(Set(x3590, x3593, x3592))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2161 = SRAMBankedRead(x2094,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2263 = SRAMBankedWrite(x2094,Vector(x2262),Vector(List(Const(0))),Vector(x3615),Vector(Set(x3614, x3617, x3616))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2145: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2144: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2139: SRAMBankedWrite
  x2174: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2173: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2161: SRAMBankedRead
  x2269: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2268: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2263: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1139
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1139 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1148 = RegWrite(x1139,x1146,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2936 = RegRead(x1139) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1159: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1149: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1148: RegWrite
  x1177: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2936: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x927)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x927 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x984 = SRAMBankedWrite(x927,Vector(x969),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x998 = SRAMBankedRead(x927,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b994, b838, b558)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x988: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x985: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x984: SRAMBankedWrite
  x1021: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1006: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x998: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x2563)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x2563 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    4
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2588 = SRAMBankedWrite(x2563,Vector(x3096),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2606 = SRAMBankedRead(x2563,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
           - Mux Port #0: 
             x2635 = SRAMBankedRead(x2563,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2634)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2590: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2589: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2588: SRAMBankedWrite
  x2615: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2614: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2606: SRAMBankedRead
  x2647: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2635: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x1676)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1676 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1703 = SRAMBankedWrite(x1676,Vector(x1701),Vector(List(Const(0))),Vector(x3455),Vector(Set(x3457, x3458, x3456))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1834 = SRAMBankedWrite(x1676,Vector(x1832),Vector(List(Const(0))),Vector(x3488),Vector(Set(x3487, x3490, x3489))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x1827 = SRAMBankedRead(x1676,Vector(List(Const(0))),Vector(b1825),Vector(Set(b1826, b1670, b562)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1729: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1707: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1703: SRAMBankedWrite
  x1853: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1838: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1827: SRAMBankedRead
      x1834: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x1057)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1057 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1100 = SRAMBankedWrite(x1057,Vector(x1098),Vector(List(Const(0))),Vector(x3288),Vector(Set(x3287, x3286, x3285))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1224 = SRAMBankedWrite(x1057,Vector(x1222),Vector(List(Const(0))),Vector(x3310),Vector(Set(x3312, x3311, x3309))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x1217 = SRAMBankedRead(x1057,Vector(List(Const(0))),Vector(b1215),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1105: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1104: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1100: SRAMBankedWrite
  x1229: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1228: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1217: SRAMBankedRead
      x1224: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x641)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x641 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x685 = SRAMBankedWrite(x641,Vector(x682),Vector(List(Const(0))),Vector(x3165),Vector(Set(x3163, x3164, x3166))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x809 = SRAMBankedWrite(x641,Vector(x806),Vector(List(Const(0))),Vector(x3188),Vector(Set(x3190, x3187, x3189))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x801 = SRAMBankedRead(x641,Vector(List(Const(0))),Vector(b799),Vector(Set(b800, b631, b557)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x689: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x688: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x685: SRAMBankedWrite
  x813: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x812: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x801: SRAMBankedRead
      x809: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x724
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x724 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x741 = RegWrite(x724,x739,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2930 = RegRead(x724) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x743: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x742: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x741: RegWrite
  x775: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2930: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x1887)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1887 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1931 = SRAMBankedWrite(x1887,Vector(x1930),Vector(List(Const(0))),Vector(x3530),Vector(Set(x3532, x3529, x3531))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1956 = SRAMBankedRead(x1887,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2055 = SRAMBankedWrite(x1887,Vector(x2054),Vector(List(Const(0))),Vector(x3554),Vector(Set(x3555, x3553, x3556))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1937: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1936: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1931: SRAMBankedWrite
  x1966: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1965: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1956: SRAMBankedRead
  x2061: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2060: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2055: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2179
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x2179 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2188 = RegWrite(x2179,x2186,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2956 = RegRead(x2179) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2199: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2189: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2188: RegWrite
  x2217: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2956: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x635)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x635 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x666 = SRAMBankedWrite(x635,Vector(x661),Vector(List(Const(0))),Vector(x3151),Vector(Set(x3152, x3150, x3153))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x699 = SRAMBankedRead(x635,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x797 = SRAMBankedWrite(x635,Vector(x792),Vector(List(Const(0))),Vector(x3182),Vector(Set(x3185, x3183, x3184))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x689: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x667: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x666: SRAMBankedWrite
  x718: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x704: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x699: SRAMBankedRead
  x813: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x798: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x797: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x639)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x639 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x687 = SRAMBankedWrite(x639,Vector(x682),Vector(List(Const(0))),Vector(x3165),Vector(Set(x3163, x3164, x3166))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x708 = SRAMBankedRead(x639,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x811 = SRAMBankedWrite(x639,Vector(x806),Vector(List(Const(0))),Vector(x3188),Vector(Set(x3190, x3187, x3189))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x689: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x688: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x687: SRAMBankedWrite
  x718: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x717: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x708: SRAMBankedRead
  x813: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x812: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x811: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x2383)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x2383 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2440 = SRAMBankedWrite(x2383,Vector(x2425),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2454 = SRAMBankedRead(x2383,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2450, b2294, b565)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2444: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2441: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2440: SRAMBankedWrite
  x2477: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2462: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2454: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x2512)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2512 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2555 = SRAMBankedWrite(x2512,Vector(x2554),Vector(List(Const(0))),Vector(x3712),Vector(Set(x3713, x3715, x3714))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2584 = SRAMBankedRead(x2512,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2679 = SRAMBankedWrite(x2512,Vector(x2678),Vector(List(Const(0))),Vector(x3736),Vector(Set(x3739, x3738, x3737))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2561: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2560: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2555: SRAMBankedWrite
  x2590: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2589: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2584: SRAMBankedRead
  x2685: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2684: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2679: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x845)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x845 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x873 = SRAMBankedWrite(x845,Vector(x869),Vector(List(Const(0))),Vector(x3214),Vector(Set(x3213, x3211, x3212))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1004 = SRAMBankedWrite(x845,Vector(x1000),Vector(List(Const(0))),Vector(x3246),Vector(Set(x3243, x3244, x3245))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x1022 = SRAMBankedRead(x845,Vector(List(Const(0))),Vector(b837),Vector(Set(b840, b558)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x875: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x873: SRAMBankedWrite
  x1021: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1006: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1004: SRAMBankedWrite
  x1041: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x1022: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x1471)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1471 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1516 = SRAMBankedWrite(x1471,Vector(x1514),Vector(List(Const(0))),Vector(x3409),Vector(Set(x3407, x3410, x3408))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1540 = SRAMBankedRead(x1471,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1640 = SRAMBankedWrite(x1471,Vector(x1638),Vector(List(Const(0))),Vector(x3433),Vector(Set(x3431, x3434, x3432))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1521: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1520: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1516: SRAMBankedWrite
  x1550: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1549: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1540: SRAMBankedRead
  x1645: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1644: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1640: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x1679)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1679 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1725 = SRAMBankedWrite(x1679,Vector(x1722),Vector(List(Const(0))),Vector(x3470),Vector(Set(x3469, x3468, x3471))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1748 = SRAMBankedRead(x1679,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1849 = SRAMBankedWrite(x1679,Vector(x1846),Vector(List(Const(0))),Vector(x3495),Vector(Set(x3492, x3493, x3494))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1729: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1728: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1725: SRAMBankedWrite
  x1758: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1757: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1748: SRAMBankedRead
  x1853: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1852: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1849: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x1135)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1135 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1192 = SRAMBankedWrite(x1135,Vector(x1177),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1206 = SRAMBankedRead(x1135,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1196: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1193: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1192: SRAMBankedWrite
  x1229: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1214: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1206: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x1523)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1523 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    4
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1548 = SRAMBankedWrite(x1523,Vector(x3036),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1566 = SRAMBankedRead(x1523,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
           - Mux Port #0: 
             x1595 = SRAMBankedRead(x1523,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1594)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1550: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1549: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1548: SRAMBankedWrite
  x1575: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1574: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1566: SRAMBankedRead
  x1607: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x1595: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x2508)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2508 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2534 = SRAMBankedWrite(x2508,Vector(x2533),Vector(List(Const(0))),Vector(x3701),Vector(Set(x3699, x3702, x3700))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2665 = SRAMBankedWrite(x2508,Vector(x2664),Vector(List(Const(0))),Vector(x3732),Vector(Set(x3733, x3734, x3731))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x2659 = SRAMBankedRead(x2508,Vector(List(Const(0))),Vector(b2657),Vector(Set(b2658, b2502, b566)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2561: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2539: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2534: SRAMBankedWrite
  x2685: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2670: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2659: SRAMBankedRead
      x2665: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x1266)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1266 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1310 = SRAMBankedWrite(x1266,Vector(x1306),Vector(List(Const(0))),Vector(x3347),Vector(Set(x3348, x3346, x3349))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1434 = SRAMBankedWrite(x1266,Vector(x1430),Vector(List(Const(0))),Vector(x3371),Vector(Set(x3372, x3370, x3373))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x1440 = SRAMBankedRead(x1266,Vector(List(Const(0))),Vector(b1253),Vector(Set(b1256, b560)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1313: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1312: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1310: SRAMBankedWrite
  x1437: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1436: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1434: SRAMBankedWrite
  x1457: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x1440: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x1315)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1315 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    4
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1340 = SRAMBankedWrite(x1315,Vector(x3024),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1358 = SRAMBankedRead(x1315,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
           - Mux Port #0: 
             x1387 = SRAMBankedRead(x1315,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1386)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1342: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1341: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1340: SRAMBankedWrite
  x1367: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1366: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1358: SRAMBankedRead
  x1399: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x1387: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x1052)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1052 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1082 = SRAMBankedWrite(x1052,Vector(x1077),Vector(List(Const(0))),Vector(x3272),Vector(Set(x3275, x3273, x3274))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1213 = SRAMBankedWrite(x1052,Vector(x1208),Vector(List(Const(0))),Vector(x3306),Vector(Set(x3307, x3304, x3305))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x1203 = SRAMBankedRead(x1052,Vector(List(Const(0))),Vector(b1201),Vector(Set(b1202, b1046, b559)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1105: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1083: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1082: SRAMBankedWrite
  x1229: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1214: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1203: SRAMBankedRead
      x1213: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x2176)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x2176 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2234 = SRAMBankedWrite(x2176,Vector(x2231),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2260 = SRAMBankedRead(x2176,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b2256, b2087, b564)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2236: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2235: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2234: SRAMBankedWrite
  x2269: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2268: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2260: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1345
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1345 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1355 = RegWrite(x1345,x1353,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2939 = RegRead(x1345) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x1372 = RegRead(x1345) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1367: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1357: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1355: RegWrite
  x1385: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2939: RegRead
    x1372: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x1885)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1885 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1914 = SRAMBankedWrite(x1885,Vector(x1909),Vector(List(Const(0))),Vector(x3518),Vector(Set(x3516, x3517, x3519))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2045 = SRAMBankedWrite(x1885,Vector(x2040),Vector(List(Const(0))),Vector(x3550),Vector(Set(x3548, x3549, x3551))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x2062 = SRAMBankedRead(x1885,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1937: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1915: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1914: SRAMBankedWrite
  x2061: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2046: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2045: SRAMBankedWrite
  x2081: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x2062: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x2092)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2092 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2121 = SRAMBankedWrite(x2092,Vector(x2117),Vector(List(Const(0))),Vector(x3578),Vector(Set(x3577, x3579, x3580))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2252 = SRAMBankedWrite(x2092,Vector(x2248),Vector(List(Const(0))),Vector(x3612),Vector(Set(x3609, x3610, x3611))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x2243 = SRAMBankedRead(x2092,Vector(List(Const(0))),Vector(b2241),Vector(Set(b2242, b2086, b564)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2145: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2123: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2121: SRAMBankedWrite
  x2269: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2254: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2243: SRAMBankedRead
      x2252: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x1939)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1939 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    4
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1964 = SRAMBankedWrite(x1939,Vector(x3060),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1982 = SRAMBankedRead(x1939,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
           - Mux Port #0: 
             x2011 = SRAMBankedRead(x1939,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2010)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1966: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1965: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1964: SRAMBankedWrite
  x1991: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1990: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1982: SRAMBankedRead
  x2023: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2011: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x2093)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2093 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2119 = SRAMBankedWrite(x2093,Vector(x2117),Vector(List(Const(0))),Vector(x3578),Vector(Set(x3577, x3579, x3580))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2250 = SRAMBankedWrite(x2093,Vector(x2248),Vector(List(Const(0))),Vector(x3612),Vector(Set(x3609, x3610, x3611))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x2270 = SRAMBankedRead(x2093,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2145: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2123: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2119: SRAMBankedWrite
  x2269: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2254: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2250: SRAMBankedWrite
  x2289: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x2270: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_0 (x585)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x585 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2703 = SRAMBankedWrite(x585,Vector(x3750),Vector(List(Const(0))),Vector(x3747),Vector(Set(x3749, x3748))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x2690 = SRAMBankedRead(x585,Vector(List(Const(0))),Vector(x3742),Vector(Set(x3740, x3741)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x2705: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x2690: SRAMBankedRead
  x2703: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x1938)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1938 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    3
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1951 = SRAMBankedWrite(x1938,Vector(x3058),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1973 = SRAMBankedRead(x1938,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x1997 = SRAMBankedRead(x1938,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1996)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1966: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1952: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1951: SRAMBankedWrite
  x1991: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1981: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1973: SRAMBankedRead
  x2009: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x1997: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x1760)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1760 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1818 = SRAMBankedWrite(x1760,Vector(x1815),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1844 = SRAMBankedRead(x1760,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1840, b1671, b562)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1820: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1819: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1818: SRAMBankedWrite
  x1853: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1852: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1844: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_1 (x586)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x586 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2704 = SRAMBankedWrite(x586,Vector(x3750),Vector(List(Const(0))),Vector(x3747),Vector(Set(x3749, x3748))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2847 = SRAMBankedRead(x586,Vector(List(Const(0))),Vector(b2845),Vector(Set(b2846, b566)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:35)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2707: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
      x2705: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2704: SRAMBankedWrite
  x2858: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2857: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2847: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x507
Type: Reg[Fix[TRUE,_32,_0]]
Src:  ProjectTemplate.scala:21:14
Src:        A_sram load A_dram
---------------------------------------------------------------------
Symbol:     x507 = RegNew(Const(0))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x515 = RegWrite(x507,x514,Set()) {}
             A_sram load A_dram (ProjectTemplate.scala:21:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x2926 = RegRead(x507) {}
             A_sram load A_dram (ProjectTemplate.scala:21:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x542: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Sequenced]
  x516: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
    x515: RegWrite
  x541: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x2926: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1554
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1554 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1572 = RegWrite(x1554,x1570,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2945 = RegRead(x1554) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x1594 = RegRead(x1554) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1575: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1574: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1572: RegWrite
  x1607: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2945: RegRead
    x1594: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x691)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x691 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    4
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x716 = SRAMBankedWrite(x691,Vector(x2988),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x734 = SRAMBankedRead(x691,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
           - Mux Port #0: 
             x763 = SRAMBankedRead(x691,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x762)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x718: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x717: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x716: SRAMBankedWrite
  x743: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x742: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x734: SRAMBankedRead
  x775: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x763: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x1467)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1467 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1497 = SRAMBankedWrite(x1467,Vector(x1493),Vector(List(Const(0))),Vector(x3395),Vector(Set(x3397, x3394, x3396))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1531 = SRAMBankedRead(x1467,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1628 = SRAMBankedWrite(x1467,Vector(x1624),Vector(List(Const(0))),Vector(x3429),Vector(Set(x3426, x3427, x3428))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1666: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1521: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1499: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1497: SRAMBankedWrite
  x1550: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1536: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1531: SRAMBankedRead
  x1645: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1630: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1628: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x636)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x636 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x665 = SRAMBankedWrite(x636,Vector(x661),Vector(List(Const(0))),Vector(x3151),Vector(Set(x3152, x3150, x3153))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x796 = SRAMBankedWrite(x636,Vector(x792),Vector(List(Const(0))),Vector(x3182),Vector(Set(x3185, x3183, x3184))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x787 = SRAMBankedRead(x636,Vector(List(Const(0))),Vector(b785),Vector(Set(b786, b630, b557)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x689: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x667: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x665: SRAMBankedWrite
  x813: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x798: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x787: SRAMBankedRead
      x796: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x2306)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2306 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2347 = SRAMBankedWrite(x2306,Vector(x2346),Vector(List(Const(0))),Vector(x3653),Vector(Set(x3654, x3651, x3652))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2471 = SRAMBankedWrite(x2306,Vector(x2470),Vector(List(Const(0))),Vector(x3676),Vector(Set(x3678, x3675, x3677))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x2480 = SRAMBankedRead(x2306,Vector(List(Const(0))),Vector(b2293),Vector(Set(b2296, b565)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2353: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2352: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2347: SRAMBankedWrite
  x2477: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2476: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2471: SRAMBankedWrite
  x2497: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x2480: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x848)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x848 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x894 = SRAMBankedWrite(x848,Vector(x890),Vector(List(Const(0))),Vector(x3226),Vector(Set(x3224, x3227, x3225))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x920 = SRAMBankedRead(x848,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1018 = SRAMBankedWrite(x848,Vector(x1014),Vector(List(Const(0))),Vector(x3249),Vector(Set(x3250, x3251, x3248))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x896: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x894: SRAMBankedWrite
  x926: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x925: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x920: SRAMBankedRead
  x1021: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1020: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1018: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x1677)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1677 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1702 = SRAMBankedWrite(x1677,Vector(x1701),Vector(List(Const(0))),Vector(x3455),Vector(Set(x3457, x3458, x3456))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1833 = SRAMBankedWrite(x1677,Vector(x1832),Vector(List(Const(0))),Vector(x3488),Vector(Set(x3487, x3490, x3489))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x1854 = SRAMBankedRead(x1677,Vector(List(Const(0))),Vector(b1669),Vector(Set(b1672, b562)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1874: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1729: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1707: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1702: SRAMBankedWrite
  x1853: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1838: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1833: SRAMBankedWrite
  x1873: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x1854: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x1259)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1259 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1287 = SRAMBankedWrite(x1259,Vector(x1285),Vector(List(Const(0))),Vector(x3334),Vector(Set(x3335, x3333, x3336))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1323 = SRAMBankedRead(x1259,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1418 = SRAMBankedWrite(x1259,Vector(x1416),Vector(List(Const(0))),Vector(x3366),Vector(Set(x3367, x3365, x3368))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1313: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1291: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1287: SRAMBankedWrite
  x1342: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1328: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1323: SRAMBankedRead
  x1437: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1422: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1418: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x642)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x642 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x684 = SRAMBankedWrite(x642,Vector(x682),Vector(List(Const(0))),Vector(x3165),Vector(Set(x3163, x3164, x3166))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x808 = SRAMBankedWrite(x642,Vector(x806),Vector(List(Const(0))),Vector(x3188),Vector(Set(x3190, x3187, x3189))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x816 = SRAMBankedRead(x642,Vector(List(Const(0))),Vector(b629),Vector(Set(b632, b557)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x689: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x688: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x684: SRAMBankedWrite
  x813: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x812: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x808: SRAMBankedWrite
  x833: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x816: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x1107)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1107 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    4
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1132 = SRAMBankedWrite(x1107,Vector(x3012),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1150 = SRAMBankedRead(x1107,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
           - Mux Port #0: 
             x1179 = SRAMBankedRead(x1107,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x1178)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1134: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1133: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1132: SRAMBankedWrite
  x1159: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1158: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1150: SRAMBankedRead
  x1191: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x1179: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x1265)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1265 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1307 = SRAMBankedWrite(x1265,Vector(x1306),Vector(List(Const(0))),Vector(x3347),Vector(Set(x3348, x3346, x3349))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1431 = SRAMBankedWrite(x1265,Vector(x1430),Vector(List(Const(0))),Vector(x3371),Vector(Set(x3372, x3370, x3373))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x1425 = SRAMBankedRead(x1265,Vector(List(Const(0))),Vector(b1423),Vector(Set(b1424, b1255, b560)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1313: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1312: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1307: SRAMBankedWrite
  x1437: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1436: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1425: SRAMBankedRead
      x1431: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_1 (x2090)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2090 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2118 = SRAMBankedWrite(x2090,Vector(x2117),Vector(List(Const(0))),Vector(x3578),Vector(Set(x3577, x3579, x3580))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2151 = SRAMBankedRead(x2090,Vector(List(Const(0))),Vector(Const(1)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:42)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2249 = SRAMBankedWrite(x2090,Vector(x2248),Vector(List(Const(0))),Vector(x3612),Vector(Set(x3609, x3610, x3611))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2145: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2123: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2118: SRAMBankedWrite
  x2174: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2160: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2151: SRAMBankedRead
  x2269: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2254: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2249: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2594
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x2594 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2612 = RegWrite(x2594,x2610,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2965 = RegRead(x2594) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x2634 = RegRead(x2594) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2615: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2614: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2612: RegWrite
  x2647: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2965: RegRead
    x2634: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: A_sram_2 (x473)
Type: SRAM2[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:19:27
Src:        val A_sram = SRAM[T](N, 3)
---------------------------------------------------------------------
Symbol:     x473 = SRAMNew(List(Const(100), Const(3)),SRAM2[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0
  Regs: 12.0
  Slices: 12.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0, 0)
     Accum:    None
     Banks:    10, 1 <Hierarchical>
       Dims {0}: Cyclic: N=10, B=1, alpha=<1>, P=<10> (176 solutions, 46 checks)
       Dims {1}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x540 = SRAMBankedWrite(x473,Vector(x3137),Vector(List(x3139, Const(0))),Vector(x538),Vector(Set(x3138, x3140, x3136))) {}
             A_sram load A_dram (ProjectTemplate.scala:21:14)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x2762 = SRAMBankedRead(x473,Vector(List(Const(2), Const(0))),Vector(x2761),Vector(Set(x3767, x3766)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:47)
               Directly Banked: true
               Port: <offset: 2, castgroup: (2), broadcast: (0)>

             x2801 = SRAMBankedRead(x473,Vector(List(Const(5), Const(0))),Vector(x2800),Vector(Set(x3788, x3787)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:47)
               Directly Banked: true
               Port: <offset: 5, castgroup: (5), broadcast: (0)>

             x2853 = SRAMBankedRead(x473,Vector(List(Const(9), Const(0))),Vector(x2852),Vector(Set(x3815, x3816)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:47)
               Directly Banked: true
               Port: <offset: 9, castgroup: (9), broadcast: (0)>

             x2775 = SRAMBankedRead(x473,Vector(List(Const(3), Const(0))),Vector(x2774),Vector(Set(x3774, x3773)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:47)
               Directly Banked: true
               Port: <offset: 3, castgroup: (3), broadcast: (0)>

             x2840 = SRAMBankedRead(x473,Vector(List(Const(8), Const(0))),Vector(x2839),Vector(Set(x3808, x3809)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:47)
               Directly Banked: true
               Port: <offset: 8, castgroup: (8), broadcast: (0)>

             x2788 = SRAMBankedRead(x473,Vector(List(Const(4), Const(0))),Vector(x2787),Vector(Set(x3780, x3781)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:47)
               Directly Banked: true
               Port: <offset: 4, castgroup: (4), broadcast: (0)>

             x2736 = SRAMBankedRead(x473,Vector(List(Const(0), Const(0))),Vector(x2735),Vector(Set(x3753, x3752)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:47)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

             x2827 = SRAMBankedRead(x473,Vector(List(Const(7), Const(0))),Vector(x2826),Vector(Set(x3802, x3801)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:47)
               Directly Banked: true
               Port: <offset: 7, castgroup: (7), broadcast: (0)>

             x2814 = SRAMBankedRead(x473,Vector(List(Const(6), Const(0))),Vector(x2813),Vector(Set(x3794, x3795)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:47)
               Directly Banked: true
               Port: <offset: 6, castgroup: (6), broadcast: (0)>

             x2749 = SRAMBankedRead(x473,Vector(List(Const(1), Const(0))),Vector(x2748),Vector(Set(x3759, x3760)),Vec[Fix[TRUE,_10,_22]]) {}
             out_sram(i, k) = accum(k) + A_sram(i,k) (ProjectTemplate.scala:51:47)
               Directly Banked: true
               Port: <offset: 1, castgroup: (1), broadcast: (0)>




Control Tree: 
x444: AccelScope (-1) [Level: OuterControl, Loop: Single, Schedule: Sequenced]
  x543: UnitPipe (-1) [Level: OuterControl, Loop: Single, Schedule: Streaming]
    x542: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Sequenced]
      x541: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x540: SRAMBankedWrite
  x2859: UnrolledForeach (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
    x2858: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
      x2740: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2736: SRAMBankedRead
      x2753: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2749: SRAMBankedRead
      x2766: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2762: SRAMBankedRead
      x2779: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2775: SRAMBankedRead
      x2792: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2788: SRAMBankedRead
      x2805: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2801: SRAMBankedRead
      x2818: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2814: SRAMBankedRead
      x2831: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2827: SRAMBankedRead
      x2844: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2840: SRAMBankedRead
      x2857: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
        x2853: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x1890)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1890 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1932 = SRAMBankedWrite(x1890,Vector(x1930),Vector(List(Const(0))),Vector(x3530),Vector(Set(x3532, x3529, x3531))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2056 = SRAMBankedWrite(x1890,Vector(x2054),Vector(List(Const(0))),Vector(x3554),Vector(Set(x3555, x3553, x3556))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x2064 = SRAMBankedRead(x1890,Vector(List(Const(0))),Vector(b1877),Vector(Set(b1880, b563)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1937: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1936: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1932: SRAMBankedWrite
  x2061: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2060: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2056: SRAMBankedWrite
  x2081: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x2064: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_4 (x2098)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x2098 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    8
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2142 = SRAMBankedWrite(x2098,Vector(x2138),Vector(List(Const(0))),Vector(x3591),Vector(Set(x3590, x3593, x3592))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x2266 = SRAMBankedWrite(x2098,Vector(x2262),Vector(List(Const(0))),Vector(x3615),Vector(Set(x3614, x3617, x3616))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         7 [Type:WR]:
         7 [Type:RD]:
           - Mux Port #0: 
             x2272 = SRAMBankedRead(x2098,Vector(List(Const(0))),Vector(b2085),Vector(Set(b2088, b564)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2145: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2144: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2142: SRAMBankedWrite
  x2269: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2268: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x2266: SRAMBankedWrite
  x2289: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
    x2272: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x1260)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1260 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1286 = SRAMBankedWrite(x1260,Vector(x1285),Vector(List(Const(0))),Vector(x3334),Vector(Set(x3335, x3333, x3336))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1417 = SRAMBankedWrite(x1260,Vector(x1416),Vector(List(Const(0))),Vector(x3366),Vector(Set(x3367, x3365, x3368))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x1411 = SRAMBankedRead(x1260,Vector(List(Const(0))),Vector(b1409),Vector(Set(b1410, b1254, b560)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1313: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1291: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1286: SRAMBankedWrite
  x1437: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1422: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1411: SRAMBankedRead
      x1417: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x2355)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x2355 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    4
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2380 = SRAMBankedWrite(x2355,Vector(x3084),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2398 = SRAMBankedRead(x2355,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
           - Mux Port #0: 
             x2427 = SRAMBankedRead(x2355,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2426)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2498: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2382: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2381: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2380: SRAMBankedWrite
  x2407: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2406: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2398: SRAMBankedRead
  x2439: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2427: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x2146)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x2146 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    3
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2159 = SRAMBankedWrite(x2146,Vector(x3070),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2181 = SRAMBankedRead(x2146,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2205 = SRAMBankedRead(x2146,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2204)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2174: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2160: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2159: SRAMBankedWrite
  x2199: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2189: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2181: SRAMBankedRead
  x2217: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2205: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_2 (x843)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x843 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x872 = SRAMBankedWrite(x843,Vector(x869),Vector(List(Const(0))),Vector(x3214),Vector(Set(x3213, x3211, x3212))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x907 = SRAMBankedRead(x843,Vector(List(Const(0))),Vector(Const(2)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:60)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1003 = SRAMBankedWrite(x843,Vector(x1000),Vector(List(Const(0))),Vector(x3246),Vector(Set(x3243, x3244, x3245))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x875: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x872: SRAMBankedWrite
  x926: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x912: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x907: SRAMBankedRead
  x1021: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1006: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1003: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: accum_0 (x573)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:30:30
Src:  	  val accum = SRAM[T](3)
---------------------------------------------------------------------
Symbol:     x573 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    1
     Padding:  List(0)
     Accum:    Buffer
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1455 = SRAMBankedWrite(x573,Vector(x3381),Vector(List(Const(0))),Vector(x3383),Vector(Set(x3382, x3384))) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
           - Mux Port #0: 
             x1442 = SRAMBankedRead(x573,Vector(List(Const(0))),Vector(x3375),Vector(Set(x3376, x3374)),Vec[Fix[TRUE,_10,_22]]) {}
             }{_+_} (ProjectTemplate.scala:49:10)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>




Control Tree: 
x1457: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
  x1442: SRAMBankedRead
  x1455: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x690)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x690 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    3
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x703 = SRAMBankedWrite(x690,Vector(x2986),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x725 = SRAMBankedRead(x690,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x749 = SRAMBankedRead(x690,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x748)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x834: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x718: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x704: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x703: SRAMBankedWrite
  x743: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x733: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x725: SRAMBankedRead
  x761: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x749: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: r_0 (x2562)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:36:28
Src:  	    val r = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x2562 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    3
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2575 = SRAMBankedWrite(x2562,Vector(x3094),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:18)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x2597 = SRAMBankedRead(x2562,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:29)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2621 = SRAMBankedRead(x2562,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(x2620)),Vec[Fix[TRUE,_10,_22]]) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:77)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2706: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2590: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2576: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2575: SRAMBankedWrite
  x2615: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2605: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2597: SRAMBankedRead
  x2633: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2621: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: force_0 (x1136)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:40:32
Src:              val force = SRAM[T](1)
---------------------------------------------------------------------
Symbol:     x1136 = SRAMNew(List(Const(1)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: LUTs
     Depth:    2
     Padding:  List(0)
     Accum:    None
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1194 = SRAMBankedWrite(x1136,Vector(x1191),Vector(List(Const(0))),Vector(Const(0)),Vector(Set())) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]} (ProjectTemplate.scala:44:22)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1220 = SRAMBankedRead(x1136,Vector(List(Const(0))),Vector(Const(0)),Vector(Set(b1216, b1047, b559)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:38)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1250: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1196: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1195: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1194: SRAMBankedWrite
  x1229: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1228: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1220: SRAMBankedRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_3 (x849)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x849 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x892 = SRAMBankedWrite(x849,Vector(x890),Vector(List(Const(0))),Vector(x3226),Vector(Set(x3224, x3227, x3225))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1016 = SRAMBankedWrite(x849,Vector(x1014),Vector(List(Const(0))),Vector(x3249),Vector(Set(x3250, x3251, x3248))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
           - Mux Port #0: 
             x1009 = SRAMBankedRead(x849,Vector(List(Const(0))),Vector(b1007),Vector(Set(b1008, b839, b558)),Vec[Fix[TRUE,_10,_22]]) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:26)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1042: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x897: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x896: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x892: SRAMBankedWrite
  x1021: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1020: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1009: SRAMBankedRead
      x1016: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: tmp_0 (x1262)
Type: SRAM1[Fix[TRUE,_10,_22]]
Src:  ProjectTemplate.scala:34:30
Src:  	    val tmp = SRAM[T](3).buffer
---------------------------------------------------------------------
Symbol:     x1262 = SRAMNew(List(Const(3)),SRAM1[Fix[TRUE,_10,_22]])
Instances: 1
  RAM36: 1.0


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    7
     Padding:  List(0)
     Accum:    Fold
     Banks:    1 <Flat>
       Dims {0}: Cyclic: N=1, B=1, alpha=<1>, P=<1> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1311 = SRAMBankedWrite(x1262,Vector(x1306),Vector(List(Const(0))),Vector(x3347),Vector(Set(x3348, x3346, x3349))) {}
             Foreach(0 until 3){k=> tmp(k) = A_sram(i,k) - A_sram(j,k)} (ProjectTemplate.scala:35:43)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
           - Mux Port #0: 
             x1329 = SRAMBankedRead(x1262,Vector(List(Const(0))),Vector(Const(0)),Vector(Set()),Vec[Fix[TRUE,_10,_22]]) {}
             r(0) = (tmp(0)*tmp(0)) + (tmp(1)*tmp(1)) + (tmp(2)*tmp(2)) (ProjectTemplate.scala:37:24)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         2 [Type:WR]:
         2 [Type:RD]:
         3 [Type:WR]:
         3 [Type:RD]:
         4 [Type:WR]:
         4 [Type:RD]:
         5 [Type:WR]:
         5 [Type:RD]:
         6 [Type:WR]:
           - Mux Port #0: 
             x1435 = SRAMBankedWrite(x1262,Vector(x1430),Vector(List(Const(0))),Vector(x3371),Vector(Set(x3372, x3370, x3373))) {}
             tmp(k) = tmp(k)*dt*force(0) (ProjectTemplate.scala:46:21)
               Directly Banked: true
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         6 [Type:RD]:
         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1313: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1312: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1311: SRAMBankedWrite
  x1342: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1341: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1329: SRAMBankedRead
  x1437: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1436: UnrolledForeach (-1) [Level: InnerControl, Loop: Looped, Schedule: Pipelined]
      x1435: SRAMBankedWrite
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1346
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:43
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1346 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1364 = RegWrite(x1346,x1362,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2941 = RegRead(x1346) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 1, castgroup: (1), broadcast: (0)>

             x1386 = RegRead(x1346) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:43)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x1458: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1367: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1366: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1364: RegWrite
  x1399: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2941: RegRead
    x1386: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x2180
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x2180 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x2197 = RegWrite(x2180,x2195,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2958 = RegRead(x2180) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2290: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x2199: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x2198: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x2197: RegWrite
  x2231: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2958: RegRead
---------------------------------------------------------------------




---------------------------------------------------------------------
Name: x1972
Type: Reg[Bit]
Src:  ProjectTemplate.scala:44:24
Src:  	    force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)
---------------------------------------------------------------------
Symbol:     x1972 = RegNew(Const(false))
Instances: 1


Instance Summary: 
  #0: Banked
     Resource: BRAM
     Depth:    3
     Padding:  List()
     Accum:    None
     Banks:    1 <Flat>
       Dims {}: Cyclic: N=1, B=1, alpha=<>, P=<> (1 solutions, 0 checks)
     Ports: 
         0 [Type:WR]:
           - Mux Port #0: 
             x1989 = RegWrite(x1972,x1987,Set()) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         0 [Type:RD]:
         1 [Type:WR]:
         1 [Type:RD]:
         2 [Type:WR]:
         2 [Type:RD]:
           - Mux Port #0: 
             x2954 = RegRead(x1972) {}
             force(0) = if (r(0) > 0.to[T] && r(0) > 1.to[T]) {((100.to[T])/r(0)/r(0)/r(0)/r(0)/r(0))-((10.to[T])/r(0)/r(0))} else {90.to[T]}(Pass 28)(Pass 28) (ProjectTemplate.scala:44:24)
               Directly Banked: false
               Port: <offset: 0, castgroup: (0), broadcast: (0)>

         M [Type:WR]:
         M [Type:RD]:



Control Tree: 
x2082: UnrolledReduce (-1) [Level: OuterControl, Loop: Looped, Schedule: Pipelined]
  x1991: ParallelPipe (-1) [Level: OuterControl, Loop: Single, Schedule: ForkJoin]
    x1990: UnitPipe (-1) [Level: InnerControl, Loop: Single, Schedule: Sequenced]
      x1989: RegWrite
  x2023: Switch (-1) [Level: InnerControl, Loop: Single, Schedule: Fork]
    x2954: RegRead
---------------------------------------------------------------------




